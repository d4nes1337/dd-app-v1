{"version":3,"mappings":"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","names":["cn","inputs","twMerge","clsx","avatarEmojis","productEmojis","bannerEmojis","getRandomAvatarEmoji","randomIndex","getConsistentEmoji","input","type","hash","acc","char","emojiList","index","API_BASE_URL","TIMEOUTS","CACHE_CONFIG","cache","key","ttl","item","data","handleApiError","error","message","statusCode","errorData","toast","createFetchOptions","method","body","timeout","controller","timeoutId","options","getTelegramWebApp","_a","initTelegramWebApp","miniApp","viewport","sdkError","webApp","setThemeClass","html","isDark","themeParams","getTelegramUser","initData","user","retrieveLaunchParams","e","_c","_b","_e","_d","params","userData","storedUser","showBackButton","callback","backButton","hideBackButton","sendHapticFeedbackEvent","eventData","hapticImpact","style","hapticFeedback","hapticSelection","requestTelegramTheme","__vitePreload","postEvent","n","setupThemeChangeListener","handleThemeChange","setTelegramColors","bgColor","secondaryBgColor","textColor","hintColor","linkColor","buttonColor","buttonTextColor","_f","_g","_h","globalWebApp","_i","applyTelegramThemeCSS","mainBgColor","headerBgColor","isThemeDark","forcedMainBgColor","forcedHeaderBgColor","root","previousStyle","rootElement","bottomNavBar","openTelegramUrl","url","CACHE_KEYS","userId","userFromUtils","getTelegramUserFromUtils","checkUserExists","returnFullResponse","requestBody","clearTimeout","response","errorText","errorDetail","responseText","existsResponse","checkUserProfile","safeUserId","username","getDDCoinsBalance","cacheKey","cachedBalance","apiUrl","coinsResponse","balance","MOCK_PRODUCTS","fetchProducts","cachedProducts","stockResponse","normalizedItems","price","photos","sizes","size","fetchCategories","cachedCategories","categoryResponse","fetchOrders","cachedOrders","ordersResponse","addProductToCart","productId","calculateShipping","priceCny","shippingType","category","responseData","createUnifiedOrder","orderData","items","validCategoryTypes","validShippingTypes","requestData","fetchDeliveryTypes","getClientInfo","telegramId","safeId","clientInfo","updateClientInfo","phoneNumber","email","address","REFERRAL_API_PATH","getUserReferralInfo","retryAttempt","newReferral","createReferralCode","referralInfo","getReferralStats","stats","shareReferralLink","registerReferral","referralCode","result","fetchInitialData","results","profile","orders","products","prefetchData","refreshUserData","profileCacheKey","ordersCacheKey","UserContext","createContext","UserProvider","children","telegramUser","setTelegramUser","useState","setUsername","displayName","setDisplayName","setProfile","avatarEmoji","setAvatarEmoji","loading","setLoading","initAttempted","setInitAttempted","updateTelegramUser","useCallback","fullName","usernameToUse","updateUserProfile","userProfile","defaultProfile","refreshAllUserData","rawUser","useEffect","telegramUserData","apiUserData","getTelegramUserFromAPI","apiError","jsx","useUser","context","useContext","CartContext","CartProvider","setItems","itemCount","total","totalPrice","savedCart","addToCart","product","currentItems","existingItemIndex","updatedItems","addPreorderToCart","preorderItem","preorderId","removeFromCart","updateQuantity","quantity","getItemQuantity","clearCart","useCart","useReferral","setReferralCode","isProcessing","setIsProcessing","isProcessed","setIsProcessed","code","startParam","telegramCode","pathParts","pathCode","newPath","processedReferrals","addDDCoinsWelcomeBonus","showWelcomeBonusNotification","notification","useRegistration","isNewUser","setIsNewUser","isChecking","setIsChecking","hasChecked","setHasChecked","checkResponse","managerBg","mainBanner","csBanner","ddCoinsBanner","calculatorBanner","shopBanner","sneakersBanner","clothesBanner","jeansBanner","beltBanner","Home","navigate","useNavigate","ddCoinsBalance","setDDCoinsBalance","isLoadingDDCoins","setIsLoadingDDCoins","fetchDDCoins","banners","displayUsername","handleProfileClick","jsxs","PageLayout","Link","UserAvatar","BannerSwiper","ArrowRight","LoadingSpinner","DDManagerCard","sortSizes","isNumeric","getLetterSizeValue","sizeMap","normalizedSize","numericSizes","letterSizes","sortedNumericSizes","a","b","sortedLetterSizes","Shop","searchParams","setSearchParams","useSearchParams","searchTerm","setSearchTerm","selectedSizes","setSelectedSizes","selectedBrands","setSelectedBrands","selectedCategories","setSelectedCategories","showFilters","setShowFilters","isLoading","isError","refetch","useQuery","brandParam","categoryParam","sizeParam","searchParam","newParams","availableSizes","useMemo","sizeObj","availableBrands","brands","availableCategories","categorySet","toggleSizeSelection","prev","s","toggleBrandSelection","brand","toggleCategorySelection","c","filteredProducts","matchesSearch","matchesSize","matchesBrand","matchesCategory","clearFilters","removeSizeFilter","removeBrandFilter","removeCategoryFilter","hasActiveFilters","ShoppingCart","Search","Filter","X","Tag","ProductCard","ProductDetails","useParams","addItemToCart","selectedSize","setSelectedSize","p","productEmoji","currentQuantity","photoUrls","photo","getMaxAvailableQuantity","sizeInfo","handleAddToCart","tempProduct","handleIncreaseQuantity","handleDecreaseQuantity","handleViewCart","PhotoSwiper","SizeSelector","Fragment","ShoppingBag","Minus","Plus","TelegramContext","TelegramProvider","tg","contextValue","useTelegram","Profile","isRegistered","setIsRegistered","initWebApp","getUserData","fetchDDCoinsBalance","exists","retryUser","displayOrders","SettingsIcon","Coins","o","ReferralCard","order","OrderCard","validatePromocode","promocodeText","calculateDiscountedPrice","originalPrice","promocode","finalPrice","percentageDiscount","Cart","isCreatingOrder","setIsCreatingOrder","isCheckingClientInfo","setIsCheckingClientInfo","showClientInfoForm","setShowClientInfoForm","currentPromocode","setCurrentPromocode","setFinalPrice","ddCoinsToUse","setDDCoinsToUse","selectedDeliveryRate","setSelectedDeliveryRate","setClientInfo","subtotal","sum","discountedPrice","calculatedPrice","maxDDCoinsToUse","finalPriceAfterDDCoins","handleDDCoinsChange","value","handlePromocodeApplied","handlePromocodeRemoved","handleCreateOrder","info","handleClientInfoComplete","deliveryRate","createOrderWithInfo","latestClientInfo","formattedItems","categoryType","ArrowLeft","CartItem","PromocodeInput","Loader2","ClientInfoForm","NotFound","formatCategoryName","name","word","DeliveryCalculator","setPrice","itemType","setItemType","setShippingType","itemUrl","setItemUrl","setSize","isCalculating","setIsCalculating","isAddingToCart","setIsAddingToCart","categories","setCategories","isLoadingCategories","setIsLoadingCategories","priceError","setPriceError","urlError","setUrlError","setTotalPrice","fetchedCategories","handleCalculate","apiCategoryType","mapToCategoryType","priceInCNY","shippingCost","internalCategory","handlePriceChange","numValue","handleUrlChange","extractedUrl","extractDewuUrl","cleanUrl","isValidUrl","text","urlPatterns","pattern","match","handleItemTypeChange","handleShippingTypeChange","Calculator","ExternalLink","Truck","Plane","Settings","setEmail","phone","setPhone","setAddress","isSubmitting","setIsSubmitting","setIsLoading","handleSubmit","ChevronLeft","Save","queryClient","QueryClient","TelegramInitializer","location","useLocation","initialized","setInitialized","isProcessingReferral","isNew","cleanupThemeListener","checkUserInAPI","userExists","handleNavigation","validRoutes","isProductRoute","initializeTelegram","isTelegramBrowser","hasTgWebAppData","resolve","retryUserData","parsedUser","themeChangeHandler","App","ThemeProvider","QueryClientProvider","TooltipProvider","Toaster","HashRouter","Routes","Route","ReactDOM","React"],"ignoreList":[],"sources":["../../src/lib/utils.ts","../../src/utils/emojiUtils.ts","../../src/services/api/config.ts","../../src/utils/telegramUtils.ts","../../src/services/api/userService.ts","../../src/services/api/mockData.ts","../../src/services/api/productService.ts","../../src/services/api/orderService.ts","../../src/services/api/clientService.ts","../../src/services/api/referralService.ts","../../src/services/api/optimizedService.ts","../../src/contexts/UserContext.tsx","../../src/contexts/CartContext.tsx","../../src/hooks/useReferral.tsx","../../src/hooks/useRegistration.tsx","../../src/assets/managerbg.webp","../../src/assets/jointgbanner.webp","../../src/assets/buycatsofabanner.webp","../../src/assets/ddcoinsbanner.webp","../../src/assets/calcbanner.webp","../../src/assets/gotoshopbanner.webp","../../src/assets/sneakers_category_banner.webp","../../src/assets/clothes_category_banner.webp","../../src/assets/jeans_category_banner.webp","../../src/assets/belt_category_banner.webp","../../src/pages/Home.tsx","../../src/utils/sizeUtils.ts","../../src/pages/Shop.tsx","../../src/pages/ProductDetails.tsx","../../src/contexts/TelegramContext.tsx","../../src/pages/Profile.tsx","../../src/services/api/promocodeService.ts","../../src/pages/Cart.tsx","../../src/pages/NotFound.tsx","../../src/pages/DeliveryCalculator.tsx","../../src/pages/Settings.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","\n// List of emojis that can be used as avatars\nconst avatarEmojis = [\n  '😀', '😃', '😄', '😁', '😆', '😅', '😂', '🤣', '😊', '😇',\n  '🙂', '🙃', '😉', '😌', '😍', '🥰', '😘', '😗', '😙', '😚',\n  '😋', '😛', '😝', '😜', '🤪', '🤨', '🧐', '🤓', '😎', '🤩',\n  '🥳', '😏', '😒', '😞', '😔', '😟', '😕', '🙁', '☹️', '😣',\n  '😖', '😫', '😩', '🥺', '😢', '😭', '😤', '😠', '😡', '🤬',\n  '🤯', '😳', '🥵', '🥶', '😱', '😨', '😰', '😥', '😓', '🤗',\n  '🤔', '🤭', '🤫', '🤥', '😶', '😐', '😑', '😬', '🙄', '😯',\n];\n\n// List of emojis that can be used as product placeholders\nconst productEmojis = [\n  '👕', '👚', '👔', '👗', '👖', '🧥', '🧦', '👟', '👞', '🧢',\n  '👒', '🎩', '🧣', '🧤', '👜', '👝', '👛', '👓', '🕶️', '🥾',\n  '🥿', '🌂', '☂️', '💼', '🎒', '👑', '💄', '💍', '💎', '⌚',\n  '🧸', '🔮', '🧩', '🧶', '🧵', '🔭', '🧬', '🔬', '🧪', '📱',\n  '💻', '🖥️', '🖱️', '🖨️', '📷', '🎮', '🎧', '🎵', '📚', '✏️',\n];\n\n// List of emojis for banners\nconst bannerEmojis = [\n  '🎉', '🎊', '🎁', '🎈', '🎀', '🎐', '🎇', '🎆', '✨', '🔥',\n  '💫', '⭐', '🌟', '💥', '💯', '💢', '💦', '💤', '💨', '🕊️',\n  '💝', '💖', '💗', '💓', '💞', '💕', '❤️', '🧡', '💛', '💚',\n];\n\n/**\n * Generates a random emoji from the avatar emoji list\n * @returns a random avatar emoji\n */\nexport const getRandomAvatarEmoji = (): string => {\n  const randomIndex = Math.floor(Math.random() * avatarEmojis.length);\n  return avatarEmojis[randomIndex];\n};\n\n/**\n * Generates a random emoji from the product emoji list\n * @returns a random product emoji\n */\nexport const getRandomProductEmoji = (): string => {\n  const randomIndex = Math.floor(Math.random() * productEmojis.length);\n  return productEmojis[randomIndex];\n};\n\n/**\n * Generates a random emoji from the banner emoji list\n * @returns a random banner emoji\n */\nexport const getRandomBannerEmoji = (): string => {\n  const randomIndex = Math.floor(Math.random() * bannerEmojis.length);\n  return bannerEmojis[randomIndex];\n};\n\n/**\n * Generates a consistent emoji based on a string input\n * @param input String to generate emoji from\n * @returns emoji\n */\nexport const getConsistentEmoji = (input: string, type: 'avatar' | 'product' | 'banner'): string => {\n  // Simple hash function for the input string\n  const hash = Array.from(input).reduce((acc, char) => {\n    return acc + char.charCodeAt(0);\n  }, 0);\n  \n  // Get the appropriate emoji list\n  const emojiList = type === 'avatar' \n    ? avatarEmojis \n    : type === 'product' \n      ? productEmojis \n      : bannerEmojis;\n  \n  // Use the hash to get a consistent index\n  const index = hash % emojiList.length;\n  \n  return emojiList[index];\n};\n","import { toast } from 'sonner';\n\n// API configuration\nexport const API_BASE_URL = 'https://v2786182.hosted-by-vdsina.ru/api/v1';\n\n// Increased timeout configuration for different API calls\nexport const TIMEOUTS = {\n  PRODUCTS: 15000, // 15 seconds (increased from 10)\n  ORDERS: 12000,   // 12 seconds (increased from 8)\n  PROFILE: 12000   // 12 seconds (increased from 8)\n};\n\n// Cache configuration\nexport const CACHE_CONFIG = {\n  PRODUCTS_TTL: 5 * 60 * 1000, // 5 minutes\n  PROFILE_TTL: 10 * 60 * 1000, // 10 minutes\n  ORDERS_TTL: 3 * 60 * 1000,   // 3 minutes\n};\n\n// Cache storage\ninterface CacheItem<T> {\n  data: T;\n  timestamp: number;\n}\n\n// Cache management\nexport const cache = {\n  _store: new Map<string, CacheItem<any>>(),\n  \n  get<T>(key: string, ttl: number): T | null {\n    const item = this._store.get(key);\n    if (!item) return null;\n    \n    const now = Date.now();\n    if (now - item.timestamp > ttl) {\n      // Cache expired\n      this._store.delete(key);\n      return null;\n    }\n    \n    return item.data as T;\n  },\n  \n  set<T>(key: string, data: T): void {\n    this._store.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  },\n  \n  invalidate(key: string): void {\n    this._store.delete(key);\n  },\n  \n  clear(): void {\n    this._store.clear();\n  }\n};\n\n// Helper function to handle API errors with detailed error messages\nexport const handleApiError = (error: any) => {\n  console.error('API Error:', error);\n  let message = 'An error occurred. Please try again.';\n  \n  if (error.response) {\n    // Server responded with an error status code\n    const statusCode = error.response.status;\n    \n    // Try to extract error detail from response\n    try {\n      const errorData = error.response.data;\n      if (errorData && errorData.detail) {\n        message = `API Error (${statusCode}): ${errorData.detail}`;\n      } else {\n        message = `API Error (${statusCode}): ${error.response.statusText}`;\n      }\n    } catch (e) {\n      message = `API Error (${statusCode}): Could not parse error details`;\n    }\n  } else if (error.request) {\n    // Request made but no response received\n    message = 'Network Error: No response from server. Using cached data instead.';\n  } else if (error instanceof Error) {\n    // Something else went wrong\n    message = `Error: ${error.message}`;\n  }\n  \n  if (message.includes('Using cached data')) {\n    toast.info(message);\n  } else {\n    toast.error(message);\n  }\n  \n  return Promise.reject(new Error(message));\n};\n\n// Helper function to create fetch options with proper headers and timeout\nexport const createFetchOptions = (\n  method: string = 'GET', \n  body?: any, \n  timeout: number = TIMEOUTS.PRODUCTS\n): { \n  signal: AbortSignal, \n  options: RequestInit,\n  clearTimeout: () => void \n} => {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\n  \n  const options: RequestInit = {\n    method,\n    signal: controller.signal,\n    mode: 'cors',\n    headers: {\n      'Accept': 'application/json',\n      ...(body ? { 'Content-Type': 'application/json' } : {})\n    },\n    ...(body ? { body: JSON.stringify(body) } : {})\n  };\n  \n  return {\n    signal: controller.signal,\n    options,\n    clearTimeout: () => clearTimeout(timeoutId)\n  };\n};\n","import { miniApp, hapticFeedback, backButton, mainButton, themeParams, viewport, retrieveLaunchParams, type LaunchParams } from '@telegram-apps/sdk';\n\n// Define RGB type for Telegram colors\nexport type RGB = `#${string}`;\n\n// Re-export the TelegramUser type from our central type definition\nexport interface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  language_code?: string;\n  is_premium?: boolean;\n  photo_url?: string;\n  allows_write_to_pm?: boolean;\n}\n\n// Define theme parameters interface\ninterface ThemeParams {\n  bg_color?: string;\n  text_color?: string;\n  hint_color?: string;\n  link_color?: string;\n  button_color?: string;\n  button_text_color?: string;\n  secondary_bg_color?: string;\n}\n\n// Define event types for Telegram WebApp\ntype TelegramEventType = 'themeChanged' | 'viewportChanged' | 'mainButtonClicked';\n\n// Define the complete TelegramWebApp interface\ninterface TelegramWebApp {\n  ready: () => void;\n  expand: () => void;\n  close: () => void;\n  onEvent: (eventType: TelegramEventType, eventHandler: () => void) => void;\n  offEvent: (eventType: TelegramEventType, eventHandler: () => void) => void;\n  sendData: (data: string) => void;\n  postEvent: (eventType: string, eventData?: string) => void;\n  themeParams: ThemeParams;\n  colorScheme: 'light' | 'dark';\n  initDataUnsafe?: {\n    user?: TelegramUser;\n  };\n  // Optional method that might be available in some Telegram clients\n  setHeaderColor?: (color: string) => void;\n  setBackgroundColor?: (color: string) => void;\n  openLink: (url: string, options?: { try_instant_view?: boolean }) => void;\n}\n\n/**\n * Helper function to safely access the Telegram WebApp instance\n * @returns The Telegram WebApp instance or undefined if not available\n */\nexport function getTelegramWebApp(): TelegramWebApp | undefined {\n  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {\n    // Cast to unknown first to avoid type checking, then to our interface\n    // This is safe because we know the actual implementation has these methods\n    return window.Telegram.WebApp as unknown as TelegramWebApp;\n  }\n  return undefined;\n}\n\n/**\n * Initialize the Telegram WebApp\n * This must be called before any other Telegram WebApp functions\n */\nexport function initTelegramWebApp(): void {\n  try {\n    console.log(\"Initializing Telegram WebApp...\");\n    \n    // Try SDK method first\n    try {\n      // Tell Telegram the WebApp is ready\n      miniApp.ready();\n      \n      // Expand the WebApp to full height\n      viewport.expand();\n      \n      console.log(\"Telegram WebApp initialized successfully using SDK\");\n    } catch (sdkError) {\n      console.warn(\"SDK initialization failed, falling back to direct WebApp API:\", sdkError);\n      \n      // Fallback to direct WebApp API\n      const webApp = getTelegramWebApp();\n      if (webApp) {\n        webApp.ready();\n        webApp.expand();\n        console.log(\"Telegram WebApp initialized successfully using direct WebApp API\");\n      } else {\n        throw new Error(\"Telegram WebApp is not available\");\n      }\n    }\n  } catch (error) {\n    console.error(\"Error initializing Telegram WebApp:\", error);\n  }\n}\n\n/**\n * Set the HTML class based on Telegram's color scheme\n */\nexport function setThemeClass(): void {\n  try {\n    const html = document.documentElement;\n    \n    // Add telegram-webview class to html element\n    html.classList.add('telegram-webview');\n    \n    // Get isDark from SDK or WebApp\n    const webApp = getTelegramWebApp();\n    const isDark = themeParams.isDark || webApp?.colorScheme === 'dark';\n    \n    // Set dark/light class based on Telegram's theme\n    if (isDark) {\n      html.classList.add('dark');\n      html.classList.remove('light');\n    } else {\n      html.classList.add('light');\n      html.classList.remove('dark');\n    }\n    \n    console.log(`Theme set to ${isDark ? 'dark' : 'light'} mode`);\n  } catch (error) {\n    console.error(\"Error setting theme class:\", error);\n  }\n}\n\n/**\n * Force the Telegram mini app to use a dark gray theme\n */\nexport function setDarkGrayTheme(): void {\n  try {\n    console.log(\"Setting dark gray theme for Telegram mini app\");\n    \n    // Get the root element\n    const root = document.documentElement;\n    const darkGrayColor = \"#232730\";\n    const darkGraySecondaryColor = \"#2c313c\";\n    \n    // Force dark gray theme regardless of user's Telegram theme\n    // Apply directly to HTML element\n    root.style.backgroundColor = darkGrayColor;\n    \n    // Force dark class\n    root.classList.add('dark');\n    root.classList.remove('light');\n    root.classList.add('telegram-webview');\n    \n    // Set CSS variables for Telegram colors - use !important to override any other styles\n    const style = document.createElement('style');\n    style.textContent = `\n      :root {\n        --tg-theme-bg-color: ${darkGrayColor} !important;\n        --tg-theme-secondary-bg-color: ${darkGraySecondaryColor} !important;\n        --tg-theme-text-color: #ffffff !important;\n        --tg-theme-hint-color: #7d7d7d !important;\n        --tg-theme-link-color: #64baff !important;\n        --tg-theme-button-color: #3390ec !important;\n        --tg-theme-button-text-color: #ffffff !important;\n        --tg-color-scheme: dark !important;\n        \n        --telegram-bg: ${darkGrayColor} !important;\n        --telegram-secondary-bg: ${darkGraySecondaryColor} !important;\n        --telegram-text: #ffffff !important;\n      }\n      \n      body, html, #root {\n        background-color: ${darkGrayColor} !important;\n        color: #ffffff !important;\n      }\n      \n      .dark body, .dark html, .dark #root {\n        background-color: ${darkGrayColor} !important;\n      }\n    `;\n    \n    // Add the style element to the head\n    document.head.appendChild(style);\n    \n    // Also set individual CSS variables\n    root.style.setProperty('--tg-theme-bg-color', darkGrayColor, 'important');\n    root.style.setProperty('--tg-theme-secondary-bg-color', darkGraySecondaryColor, 'important');\n    root.style.setProperty('--tg-theme-text-color', '#ffffff', 'important');\n    root.style.setProperty('--tg-theme-hint-color', '#7d7d7d', 'important');\n    root.style.setProperty('--tg-theme-link-color', '#64baff', 'important');\n    root.style.setProperty('--tg-color-scheme', 'dark', 'important');\n    \n    // Apply the background color to all main elements\n    document.body.style.backgroundColor = darkGrayColor;\n    document.body.style.setProperty('background-color', darkGrayColor, 'important');\n    \n    if (document.getElementById('root')) {\n      const rootElement = document.getElementById('root')!;\n      rootElement.style.backgroundColor = darkGrayColor;\n      rootElement.style.setProperty('background-color', darkGrayColor, 'important');\n    }\n    \n    // Try to override Telegram's theme params if possible\n    if (window.Telegram?.WebApp) {\n      try {\n        // This is a hack to try to override Telegram's theme\n        const webApp = window.Telegram.WebApp as any;\n        if (webApp._themeParams) {\n          webApp._themeParams.bg_color = darkGrayColor;\n          webApp._themeParams.secondary_bg_color = darkGraySecondaryColor;\n        }\n      } catch (e) {\n        console.error(\"Error trying to override Telegram theme params:\", e);\n      }\n    }\n    \n    console.log(\"Dark gray theme applied to Telegram mini app\");\n  } catch (error) {\n    console.error(\"Error setting dark gray theme:\", error);\n  }\n}\n\n/**\n * Sync the app's theme with Telegram's theme\n */\nexport function syncTelegramTheme(): void {\n  try {\n    // Get CSS variables from Telegram theme\n    const root = document.documentElement;\n    \n    // Set CSS variables for Telegram colors\n    if (themeParams.backgroundColor) {\n      root.style.setProperty('--tg-theme-bg-color', String(themeParams.backgroundColor));\n    }\n    \n    if (themeParams.textColor) {\n      root.style.setProperty('--tg-theme-text-color', String(themeParams.textColor));\n    }\n    \n    if (themeParams.hintColor) {\n      root.style.setProperty('--tg-theme-hint-color', String(themeParams.hintColor));\n    }\n    \n    if (themeParams.linkColor) {\n      root.style.setProperty('--tg-theme-link-color', String(themeParams.linkColor));\n    }\n    \n    if (themeParams.buttonColor) {\n      root.style.setProperty('--tg-theme-button-color', String(themeParams.buttonColor));\n    }\n    \n    if (themeParams.buttonTextColor) {\n      root.style.setProperty('--tg-theme-button-text-color', String(themeParams.buttonTextColor));\n    }\n    \n    if (themeParams.secondaryBackgroundColor) {\n      root.style.setProperty('--tg-theme-secondary-bg-color', String(themeParams.secondaryBackgroundColor));\n    }\n    \n    // Set color scheme\n    root.style.setProperty('--tg-color-scheme', themeParams.isDark ? 'dark' : 'light');\n    \n    console.log(\"Theme synchronized with Telegram\");\n  } catch (error) {\n    console.error(\"Error syncing theme:\", error);\n  }\n}\n\n/**\n * Listen for theme changes from Telegram\n * @returns Cleanup function\n */\nexport function listenForThemeChanges(): () => void {\n  try {\n    const themeChangeHandler = () => {\n      console.log(\"Theme changed, updating...\");\n      setThemeClass();\n      syncTelegramTheme();\n    };\n    \n    // Add event listener for theme changes\n    window.addEventListener('themechange', themeChangeHandler);\n    \n    // Return cleanup function\n    return () => {\n      window.removeEventListener('themechange', themeChangeHandler);\n    };\n  } catch (error) {\n    console.error(\"Error setting up theme change listener:\", error);\n    return () => {}; // Return empty cleanup function\n  }\n}\n\n/**\n * Get the Telegram user data\n * @returns User data or null if not available\n */\nexport function getTelegramUser(): TelegramUser | null {\n  try {\n    console.log(\"Attempting to get Telegram user data...\");\n    \n    // APPROACH 1: Use the official SDK method to retrieve launch parameters\n    try {\n      const { initData, user } = retrieveLaunchParams();\n      \n      if (user) {\n        console.log(\"User data found in launch parameters:\", user);\n        \n        // Store in localStorage for future use\n        try {\n          localStorage.setItem('telegramUser', JSON.stringify(user));\n        } catch (e) {\n          console.error(\"Error storing user data in localStorage:\", e);\n        }\n        \n        return user as TelegramUser;\n      } else {\n        console.log(\"No user data in launch parameters\");\n      }\n    } catch (e) {\n      console.error(\"Error retrieving launch parameters:\", e);\n    }\n    \n    // APPROACH 2: Directly access window.Telegram.WebApp.initDataUnsafe\n    if (window.Telegram?.WebApp?.initDataUnsafe?.user) {\n      const user = window.Telegram.WebApp.initDataUnsafe.user;\n      console.log(\"User data found in window.Telegram.WebApp.initDataUnsafe:\", user);\n      \n      // Store in localStorage for future use\n      try {\n        localStorage.setItem('telegramUser', JSON.stringify(user));\n      } catch (e) {\n        console.error(\"Error storing user data in localStorage:\", e);\n      }\n      \n      return user as TelegramUser;\n    }\n    \n    // APPROACH 3: Try to parse initData directly if it exists\n    if (window.Telegram?.WebApp?.initData) {\n      try {\n        const params = new URLSearchParams(window.Telegram.WebApp.initData);\n        console.log('Parsed initData params:', Array.from(params.entries()));\n        \n        if (params.has('user')) {\n          try {\n            const userData = JSON.parse(decodeURIComponent(params.get('user') || '{}'));\n            console.log('User data parsed from initData:', userData);\n            \n            // Store in localStorage for future use\n            try {\n              localStorage.setItem('telegramUser', JSON.stringify(userData));\n            } catch (e) {\n              console.error(\"Error storing user data in localStorage:\", e);\n            }\n            \n            return userData as TelegramUser;\n          } catch (e) {\n            console.error('Error parsing user data from initData:', e);\n          }\n        } else {\n          console.log('No user param in initData');\n        }\n      } catch (e) {\n        console.error('Error parsing initData:', e);\n      }\n    }\n    \n    // APPROACH 4: Fallback to localStorage as a last resort\n    try {\n      const storedUser = localStorage.getItem('telegramUser');\n      if (storedUser) {\n        const userData = JSON.parse(storedUser);\n        console.log(\"Using stored user data from localStorage:\", userData);\n        return userData as TelegramUser;\n      }\n    } catch (e) {\n      console.error(\"Error retrieving user data from localStorage:\", e);\n    }\n    \n    console.log(\"No Telegram user data available from any source\");\n    return null;\n  } catch (error) {\n    console.error(\"Error getting Telegram user:\", error);\n  return null;\n  }\n}\n\n/**\n * Show the back button in the header\n * @param callback Function to call when back button is clicked\n */\nexport function showBackButton(callback: () => void): void {\n  try {\n    console.log(\"Showing back button\");\n    \n    // First, make sure any existing handlers are removed\n    try {\n      backButton.offClick(() => {});\n    } catch (e) {\n      console.log(\"No existing back button handlers to remove\");\n    }\n    \n    // Set the callback first\n    backButton.onClick(callback);\n    \n    // Then show the back button\n    backButton.show();\n    \n    // Also try the direct WebApp API as fallback\n    if (window.Telegram?.WebApp?.BackButton) {\n      try {\n        window.Telegram.WebApp.BackButton.onClick(callback);\n        window.Telegram.WebApp.BackButton.show();\n      } catch (e) {\n        console.error(\"Error using direct WebApp API for back button:\", e);\n      }\n    }\n    \n    console.log(\"Back button shown and callback registered\");\n  } catch (error) {\n    console.error(\"Error showing back button:\", error);\n    \n    // Try direct WebApp API as fallback\n    if (window.Telegram?.WebApp?.BackButton) {\n      try {\n        window.Telegram.WebApp.BackButton.onClick(callback);\n        window.Telegram.WebApp.BackButton.show();\n        console.log(\"Back button shown using direct WebApp API\");\n      } catch (e) {\n        console.error(\"Error using direct WebApp API for back button:\", e);\n      }\n    }\n  }\n}\n\n/**\n * Hide the back button in the header\n */\nexport function hideBackButton(): void {\n  try {\n    console.log(\"Hiding back button\");\n    \n    // Hide the back button\n    backButton.hide();\n    \n    // Also try the direct WebApp API as fallback\n    if (window.Telegram?.WebApp?.BackButton) {\n      try {\n        window.Telegram.WebApp.BackButton.hide();\n      } catch (e) {\n        console.error(\"Error using direct WebApp API to hide back button:\", e);\n      }\n    }\n    \n    console.log(\"Back button hidden\");\n  } catch (error) {\n    console.error(\"Error hiding back button:\", error);\n    \n    // Try direct WebApp API as fallback\n    if (window.Telegram?.WebApp?.BackButton) {\n      try {\n        window.Telegram.WebApp.BackButton.hide();\n        console.log(\"Back button hidden using direct WebApp API\");\n      } catch (e) {\n        console.error(\"Error using direct WebApp API to hide back button:\", e);\n      }\n    }\n  }\n}\n\n/**\n * Show the main button at the bottom of the screen\n * @param text Button text\n * @param onClick Callback function\n * @param color Optional background color\n * @param textColor Optional text color\n */\nexport function showMainButton(\n  text: string,\n  onClick: () => void,\n  color?: RGB,\n  textColor?: RGB\n): void {\n  try {\n    // Set button parameters\n    const params: Record<string, any> = {\n      text: text,\n      isVisible: true\n    };\n    \n    if (color) {\n      params.backgroundColor = color;\n    }\n    \n    if (textColor) {\n      params.textColor = textColor;\n    }\n    \n    // Update button with parameters\n    mainButton.setParams(params);\n    \n    // Set click handler\n    mainButton.onClick(onClick);\n    \n    console.log(\"Main button shown with text:\", text);\n  } catch (error) {\n    console.error(\"Error showing main button:\", error);\n  }\n}\n\n/**\n * Hide the main button\n */\nexport function hideMainButton(): void {\n  try {\n    // Hide the button\n    mainButton.setParams({ isVisible: false });\n    \n    console.log(\"Main button hidden\");\n  } catch (error) {\n    console.error(\"Error hiding main button:\", error);\n  }\n}\n\n/**\n * Enable the main button\n */\nexport function enableMainButton(): void {\n  try {\n    mainButton.setParams({ isEnabled: true });\n    console.log(\"Main button enabled\");\n  } catch (error) {\n    console.error(\"Error enabling main button:\", error);\n  }\n}\n\n/**\n * Disable the main button\n */\nexport function disableMainButton(): void {\n  try {\n    mainButton.setParams({ isEnabled: false });\n    console.log(\"Main button disabled\");\n  } catch (error) {\n    console.error(\"Error disabling main button:\", error);\n  }\n}\n\n/**\n * Show loading indicator on the main button\n */\nexport function showMainButtonLoader(): void {\n  try {\n    mainButton.setParams({ isLoaderVisible: true });\n    console.log(\"Main button loader shown\");\n  } catch (error) {\n    console.error(\"Error showing main button loader:\", error);\n  }\n}\n\n/**\n * Hide loading indicator on the main button\n */\nexport function hideMainButtonLoader(): void {\n  try {\n    mainButton.setParams({ isLoaderVisible: false });\n    console.log(\"Main button loader hidden\");\n  } catch (error) {\n    console.error(\"Error hiding main button loader:\", error);\n  }\n}\n\n/**\n * Helper function to send haptic feedback events to Telegram\n * @param eventData The event data to send\n */\nfunction sendHapticFeedbackEvent(eventData: Record<string, unknown>): void {\n  try {\n    const webApp = getTelegramWebApp();\n    \n    // Different ways to send events in different Telegram clients\n    if (webApp?.postEvent) {\n      webApp.postEvent('web_app_trigger_haptic_feedback', JSON.stringify(eventData));\n    } else if (window.Telegram?.WebviewProxy?.postEvent) {\n      window.Telegram.WebviewProxy.postEvent('web_app_trigger_haptic_feedback', JSON.stringify(eventData));\n    } else if (window.TelegramWebviewProxy?.postEvent) {\n      window.TelegramWebviewProxy.postEvent('web_app_trigger_haptic_feedback', JSON.stringify(eventData));\n    } else {\n      console.warn(\"No method available to send haptic feedback event\");\n    }\n  } catch (error) {\n    console.error(\"Error sending haptic feedback event:\", error);\n  }\n}\n\n/**\n * Trigger haptic feedback\n * @param style Feedback style\n */\nexport function triggerHapticFeedback(\n  style: 'impact' | 'notification' | 'selection' = 'impact'\n): void {\n  try {\n    // Try SDK method first\n    try {\n      switch (style) {\n        case 'impact':\n          hapticFeedback.impactOccurred('medium');\n          break;\n        case 'notification':\n          hapticFeedback.notificationOccurred('success');\n          break;\n        case 'selection':\n          hapticFeedback.selectionChanged();\n          break;\n        default:\n          hapticFeedback.impactOccurred('medium');\n      }\n      console.log(`Haptic feedback triggered via SDK: ${style}`);\n    } catch (sdkError) {\n      console.warn(\"SDK haptic feedback failed, falling back to direct WebApp API:\", sdkError);\n      \n      // Fallback to direct WebApp API\n      switch (style) {\n        case 'impact':\n          sendHapticFeedbackEvent({ type: 'impact', impact_style: 'medium' });\n          break;\n        case 'notification':\n          sendHapticFeedbackEvent({ type: 'notification', notification_type: 'success' });\n          break;\n        case 'selection':\n          sendHapticFeedbackEvent({ type: 'selection_change' });\n          break;\n        default:\n          sendHapticFeedbackEvent({ type: 'impact', impact_style: 'medium' });\n      }\n      console.log(`Haptic feedback triggered via WebApp API: ${style}`);\n    }\n  } catch (error) {\n    console.error(\"Error triggering haptic feedback:\", error);\n  }\n}\n\n/**\n * Trigger haptic impact feedback\n * @param style Impact style\n */\nexport const hapticImpact = (style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft' = 'medium'): void => {\n  try {\n    // Try SDK method first\n    try {\n      hapticFeedback.impactOccurred(style);\n      console.log(`Haptic impact triggered via SDK: ${style}`);\n    } catch (sdkError) {\n      console.warn(\"SDK haptic impact failed, falling back to direct WebApp API:\", sdkError);\n      \n      // Fallback to direct WebApp API\n      sendHapticFeedbackEvent({ type: 'impact', impact_style: style });\n      console.log(`Haptic impact triggered via WebApp API: ${style}`);\n    }\n  } catch (error) {\n    console.error(\"Error triggering haptic impact:\", error);\n  }\n};\n\n/**\n * Trigger haptic notification feedback\n * @param type Notification type\n */\nexport const hapticNotification = (type: 'error' | 'success' | 'warning' = 'success'): void => {\n  try {\n    // Try SDK method first\n    try {\n      hapticFeedback.notificationOccurred(type);\n      console.log(`Haptic notification triggered via SDK: ${type}`);\n    } catch (sdkError) {\n      console.warn(\"SDK haptic notification failed, falling back to direct WebApp API:\", sdkError);\n      \n      // Fallback to direct WebApp API\n      sendHapticFeedbackEvent({ type: 'notification', notification_type: type });\n      console.log(`Haptic notification triggered via WebApp API: ${type}`);\n    }\n  } catch (error) {\n    console.error(\"Error triggering haptic notification:\", error);\n  }\n};\n\n/**\n * Trigger haptic selection feedback\n */\nexport const hapticSelection = (): void => {\n  try {\n    // Try SDK method first\n    try {\n      hapticFeedback.selectionChanged();\n      console.log(\"Haptic selection triggered via SDK\");\n    } catch (sdkError) {\n      console.warn(\"SDK haptic selection failed, falling back to direct WebApp API:\", sdkError);\n      \n      // Fallback to direct WebApp API\n      sendHapticFeedbackEvent({ type: 'selection_change' });\n      console.log(\"Haptic selection triggered via WebApp API\");\n    }\n  } catch (error) {\n    console.error(\"Error triggering haptic selection:\", error);\n  }\n};\n\n/**\n * Send data to the Telegram bot\n * @param data Data to send\n */\nexport async function sendDataToBot(data: any): Promise<void> {\n  try {\n    // Convert data to string if it's an object\n    const dataToSend = typeof data === 'object' ? JSON.stringify(data) : String(data);\n    \n    // Use the WebApp API directly since the SDK doesn't expose sendData\n    if (window.Telegram?.WebApp) {\n      window.Telegram.WebApp.sendData(dataToSend);\n      console.log(\"Data sent to bot:\", dataToSend);\n    } else {\n      throw new Error(\"Telegram WebApp is not available\");\n    }\n  } catch (error) {\n    console.error(\"Error sending data to bot:\", error);\n    throw error;\n  }\n}\n\n/**\n * Close the WebApp\n */\nexport function closeWebApp(): void {\n  try {\n    miniApp.close();\n    console.log(\"WebApp closed\");\n  } catch (error) {\n    console.error(\"Error closing WebApp:\", error);\n  }\n}\n\n/**\n * Request the current theme from Telegram\n * This will trigger a theme_changed event with the current theme\n */\nexport function requestTelegramTheme(): void {\n  try {\n    console.log(\"Requesting current theme from Telegram\");\n    \n    // Use the official SDK if available\n    if (window.Telegram?.WebApp) {\n      try {\n        // Request the theme from Telegram\n        window.Telegram.WebApp.postEvent('web_app_request_theme', '');\n        console.log(\"Theme requested from Telegram using WebApp.postEvent\");\n      } catch (e) {\n        console.error(\"Error requesting theme using WebApp.postEvent:\", e);\n      }\n    }\n    \n    // Also try using the @telegram-apps/sdk methods as a fallback\n    try {\n      // Import dynamically to avoid circular dependencies\n      import('@telegram-apps/sdk').then(({ postEvent }) => {\n        // Request theme\n        postEvent('web_app_request_theme');\n        console.log(\"Theme requested from Telegram using SDK postEvent\");\n      }).catch(e => {\n        console.error(\"Error importing SDK for postEvent:\", e);\n      });\n    } catch (e) {\n      console.error(\"Error requesting theme using SDK postEvent:\", e);\n    }\n  } catch (error) {\n    console.error(\"Error requesting Telegram theme:\", error);\n  }\n}\n\n/**\n * Setup theme change listener for instant theme updates\n * This should be called once when the app initializes\n * @returns Cleanup function to remove the listener\n */\nexport function setupThemeChangeListener(): () => void {\n  console.log(\"Setting up theme change listener for instant updates\");\n  \n  // Function to handle theme changes\n  const handleThemeChange = () => {\n    console.log(\"Theme change detected, updating colors and styles\");\n    setThemeClass();\n    setTelegramColors();\n  };\n  \n  // Get the WebApp instance\n  const webApp = getTelegramWebApp();\n  \n  if (webApp) {\n    try {\n      // Use Telegram's onEvent method for theme changes\n      webApp.onEvent('themeChanged', handleThemeChange);\n      \n      // Also listen for the standard themechange event as backup\n      window.addEventListener('themechange', handleThemeChange);\n      \n      // Return cleanup function\n      return () => {\n        try {\n          webApp.offEvent('themeChanged', handleThemeChange);\n        } catch (e) {\n          console.warn(\"Error removing Telegram theme listener:\", e);\n        }\n        window.removeEventListener('themechange', handleThemeChange);\n      };\n    } catch (error) {\n      console.error(\"Error setting up Telegram event listener:\", error);\n      \n      // Fallback to just window event listener\n      window.addEventListener('themechange', handleThemeChange);\n      return () => {\n        window.removeEventListener('themechange', handleThemeChange);\n      };\n    }\n  }\n  \n  // If no WebApp, just use window event\n  window.addEventListener('themechange', handleThemeChange);\n  return () => {\n    window.removeEventListener('themechange', handleThemeChange);\n  };\n}\n\n/**\n * Set the Telegram Mini App header and background colors based on the user's Telegram theme\n * Uses the official Telegram Mini Apps methods and applies Telegram's actual theme colors\n */\nexport function setTelegramColors(): void {\n  try {\n    console.log(\"Setting Telegram Mini App colors based on Telegram's native theme\");\n    \n    // Get the WebApp instance\n    const webApp = getTelegramWebApp();\n    \n    // Get theme colors from WebApp or SDK\n    let bgColor: RGB;\n    let secondaryBgColor: RGB;\n    let textColor: RGB;\n    let hintColor: RGB;\n    let linkColor: RGB;\n    let buttonColor: RGB;\n    let buttonTextColor: RGB;\n    let isDark: boolean;\n    \n    if (webApp) {\n      console.log(\"WebApp theme params:\", webApp.themeParams);\n      \n      // Use Telegram's native theme parameters directly\n      bgColor = (webApp.themeParams?.bg_color || (webApp.colorScheme === 'dark' ? '#271a28' : '#ffffff')) as RGB;\n      secondaryBgColor = (webApp.themeParams?.secondary_bg_color || (webApp.colorScheme === 'dark' ? '#382639' : '#f7f7f7')) as RGB;\n      textColor = (webApp.themeParams?.text_color || (webApp.colorScheme === 'dark' ? '#ffffff' : '#000000')) as RGB;\n      hintColor = (webApp.themeParams?.hint_color || (webApp.colorScheme === 'dark' ? '#7d7d7d' : '#999999')) as RGB;\n      linkColor = (webApp.themeParams?.link_color || (webApp.colorScheme === 'dark' ? '#64baff' : '#2481cc')) as RGB;\n      buttonColor = (webApp.themeParams?.button_color || (webApp.colorScheme === 'dark' ? '#3390ec' : '#2481cc')) as RGB;\n      buttonTextColor = (webApp.themeParams?.button_text_color || '#ffffff') as RGB;\n      isDark = webApp.colorScheme === 'dark';\n      \n      console.log(\"Using native Telegram theme colors:\", {\n        bgColor,\n        secondaryBgColor,\n        textColor,\n        hintColor,\n        linkColor,\n        buttonColor,\n        buttonTextColor,\n        isDark\n      });\n      \n      // IMPORTANT: Set the header color to match the frontend background color (secondaryBgColor)\n      // This ensures the Telegram miniapp border matches our app's background\n      try {\n        // Try multiple approaches to set the header color\n        \n        // Approach 1: Try using direct WebApp method if available\n        if (webApp.setHeaderColor) {\n          webApp.setHeaderColor(secondaryBgColor);\n          console.log(\"Header color set using WebApp.setHeaderColor:\", secondaryBgColor);\n        } \n        // Approach 2: Use postEvent method\n        else {\n          webApp.postEvent('web_app_set_header_color', JSON.stringify({\n            color: secondaryBgColor\n          }));\n          console.log(\"Header color set using postEvent:\", secondaryBgColor);\n        }\n        \n        // Approach 3: Try using global Telegram object directly\n        if (window.Telegram?.WebApp) {\n          const globalWebApp = window.Telegram.WebApp;\n          // @ts-ignore - Ignore TypeScript errors for direct access\n          if (typeof globalWebApp.setHeaderColor === 'function') {\n            // @ts-ignore\n            globalWebApp.setHeaderColor(secondaryBgColor);\n            console.log(\"Header color set using global Telegram.WebApp.setHeaderColor\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Error setting header color:\", error);\n        \n        // Fallback: Try using color_key instead of direct color\n        try {\n          if (window.Telegram?.WebApp) {\n            // @ts-ignore\n            if (typeof window.Telegram.WebApp.setHeaderColor === 'function') {\n              // @ts-ignore\n              window.Telegram.WebApp.setHeaderColor('secondary_bg_color');\n              console.log(\"Header color set using color_key: secondary_bg_color\");\n            }\n          }\n        } catch (e) {\n          console.error(\"All attempts to set header color failed:\", e);\n        }\n      }\n      \n      // Set the background color to match the secondary background color\n      try {\n        if (webApp.setBackgroundColor) {\n          webApp.setBackgroundColor(secondaryBgColor);\n          console.log(\"Background color set using WebApp.setBackgroundColor:\", secondaryBgColor);\n        } else {\n          webApp.postEvent('web_app_set_background_color', JSON.stringify({\n            color: secondaryBgColor\n          }));\n          console.log(\"Background color set using postEvent:\", secondaryBgColor);\n        }\n      } catch (error) {\n        console.error(\"Error setting background color:\", error);\n      }\n    } else {\n      // Fallback to SDK\n      console.log(\"WebApp not available, using SDK theme params\");\n      \n      // Use SDK theme params with exact color for dark mode\n      bgColor = (themeParams.backgroundColor || (themeParams.isDark ? '#271a28' : '#ffffff')) as RGB;\n      secondaryBgColor = (themeParams.secondaryBackgroundColor || (themeParams.isDark ? '#382639' : '#f7f7f7')) as RGB;\n      textColor = (themeParams.textColor || (themeParams.isDark ? '#ffffff' : '#000000')) as RGB;\n      hintColor = (themeParams.hintColor || (themeParams.isDark ? '#7d7d7d' : '#999999')) as RGB;\n      linkColor = (themeParams.linkColor || (themeParams.isDark ? '#64baff' : '#2481cc')) as RGB;\n      buttonColor = (themeParams.buttonColor || (themeParams.isDark ? '#3390ec' : '#2481cc')) as RGB;\n      buttonTextColor = (themeParams.buttonTextColor || '#ffffff') as RGB;\n      isDark = !!themeParams.isDark;\n      \n      console.log(\"Using SDK theme colors:\", {\n        bgColor,\n        secondaryBgColor,\n        textColor,\n        hintColor,\n        linkColor,\n        buttonColor,\n        buttonTextColor,\n        isDark\n      });\n      \n      // Apply colors to Telegram Mini App header and background using SDK\n      try {\n        import('@telegram-apps/sdk').then(({ postEvent }) => {\n          // IMPORTANT: Set header color to match the frontend background color\n          // Use direct color value instead of color_key to ensure exact match\n          postEvent('web_app_set_header_color', { color: secondaryBgColor });\n          console.log(\"Header color set to match frontend background:\", secondaryBgColor, \"via SDK\");\n          \n          // Set background color to match the secondary background color\n          postEvent('web_app_set_background_color', { color: secondaryBgColor });\n          console.log(\"Background color set to:\", secondaryBgColor, \"via SDK\");\n        }).catch(e => {\n          console.error(\"Error importing SDK for postEvent:\", e);\n        });\n      } catch (error) {\n        console.error(\"Error setting colors via SDK:\", error);\n      }\n    }\n    \n    // Apply theme CSS based on Telegram's colors\n    applyTelegramThemeCSS(\n      secondaryBgColor, // Main app background uses secondaryBgColor\n      textColor,\n      hintColor,\n      linkColor,\n      buttonColor,\n      buttonTextColor,\n      secondaryBgColor, // IMPORTANT: Use secondaryBgColor for UI elements too\n      isDark\n    );\n    \n    // Request the theme again to ensure we have the latest\n    requestTelegramTheme();\n  } catch (error) {\n    console.error(\"Error setting Telegram colors:\", error);\n  }\n}\n\n/**\n * Apply theme CSS based on Telegram's colors\n */\nfunction applyTelegramThemeCSS(\n  mainBgColor: RGB,\n  textColor: RGB,\n  hintColor: RGB,\n  linkColor: RGB,\n  buttonColor: RGB,\n  buttonTextColor: RGB,\n  headerBgColor: RGB,\n  isDark: boolean | undefined\n): void {\n  try {\n    // Ensure isDark is a boolean\n    const isThemeDark = isDark === true;\n    \n    // Force theme background color for consistency\n    const forcedMainBgColor = mainBgColor;\n    const forcedHeaderBgColor = headerBgColor;\n    \n    console.log(`Applying ${isThemeDark ? 'dark' : 'light'} theme CSS with Telegram colors`);\n    console.log(`Using main background color: ${forcedMainBgColor}`);\n    console.log(`Using header background color: ${forcedHeaderBgColor}`);\n    \n    // Get the root element\n    const root = document.documentElement;\n    \n    // Set theme class\n    if (isThemeDark) {\n      root.classList.add('dark');\n      root.classList.remove('light');\n    } else {\n      root.classList.add('light');\n      root.classList.remove('dark');\n    }\n    root.classList.add('telegram-webview');\n    \n    // Set CSS variables for Telegram colors - use !important to override any other styles\n    const style = document.createElement('style');\n    style.textContent = `\n      :root {\n        --tg-theme-bg-color: ${forcedHeaderBgColor} !important;\n        --tg-theme-secondary-bg-color: ${forcedMainBgColor} !important;\n        --tg-theme-text-color: ${textColor} !important;\n        --tg-theme-hint-color: ${hintColor} !important;\n        --tg-theme-link-color: ${linkColor} !important;\n        --tg-theme-button-color: ${buttonColor} !important;\n        --tg-theme-button-text-color: ${buttonTextColor} !important;\n        --tg-color-scheme: ${isThemeDark ? 'dark' : 'light'} !important;\n        \n        --telegram-bg: ${forcedMainBgColor} !important;\n        --telegram-header-bg: ${forcedHeaderBgColor} !important;\n        --telegram-secondary-bg: ${forcedHeaderBgColor} !important;\n        --telegram-text: ${textColor} !important;\n        --telegram-hint: ${hintColor} !important;\n        --telegram-link: ${linkColor} !important;\n        --telegram-button: ${buttonColor} !important;\n        --telegram-button-text: ${buttonTextColor} !important;\n      }\n      \n      body, html, #root {\n        background-color: ${forcedMainBgColor} !important;\n        color: ${textColor} !important;\n      }\n      \n      .${isThemeDark ? 'dark' : 'light'} body, .${isThemeDark ? 'dark' : 'light'} html, .${isThemeDark ? 'dark' : 'light'} #root {\n        background-color: ${forcedMainBgColor} !important;\n      }\n      \n      /* Apply colors to common UI elements */\n      .card, .popover, .dropdown-menu, .card-container {\n        background-color: ${forcedHeaderBgColor} !important;\n        color: ${textColor} !important;\n        border: 1px solid ${isThemeDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'} !important;\n      }\n      \n      a {\n        color: ${linkColor} !important;\n      }\n      \n      .hint, .text-muted {\n        color: ${hintColor} !important;\n      }\n      \n      .btn-primary, .button-primary {\n        background-color: ${buttonColor} !important;\n        color: ${buttonTextColor} !important;\n      }\n      \n      /* Search inputs and form controls */\n      input, select, textarea {\n        background-color: ${forcedMainBgColor} !important;\n        color: ${textColor} !important;\n        border-color: ${hintColor}30 !important;\n      }\n      \n      input:focus, select:focus, textarea:focus {\n        border-color: ${buttonColor} !important;\n        box-shadow: 0 0 0 2px ${buttonColor}30 !important;\n      }\n      \n      /* Size selector buttons */\n      .size-button {\n        background-color: ${forcedMainBgColor} !important;\n        color: ${textColor} !important;\n        border-color: ${hintColor}30 !important;\n      }\n      \n      .size-button.selected {\n        background-color: ${buttonColor}10 !important;\n        color: ${buttonColor} !important;\n        border-color: ${buttonColor} !important;\n      }\n      \n      /* Bottom navigation bar - solid color matching the secondary background color */\n      .bottom-nav-bar {\n        background-color: ${forcedHeaderBgColor} !important;\n        /* Remove border and shadow */\n        border-top: none !important;\n        box-shadow: none !important;\n        /* Add a subtle top border for separation */\n        border-top: 1px solid ${isThemeDark ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.05)'} !important;\n      }\n      \n      /* Bottom navigation items */\n      .bottom-nav-bar a {\n        color: ${hintColor} !important;\n        padding: 8px 0 !important;\n        transition: all 0.2s ease !important;\n      }\n      \n      /* Active navigation items */\n      .bottom-nav-bar a.active, \n      .bottom-nav-bar a.active svg,\n      .bottom-nav-bar a[aria-current=\"page\"],\n      .bottom-nav-bar a[aria-current=\"page\"] svg {\n        color: ${buttonColor} !important;\n      }\n      \n      /* Navigation item hover effect */\n      .bottom-nav-bar a:hover {\n        color: ${buttonColor}CC !important;\n        transform: translateY(-2px) !important;\n      }\n      \n      /* Badge styling */\n      .bottom-nav-bar .badge {\n        background-color: ${buttonColor} !important;\n        color: ${buttonTextColor} !important;\n      }\n      \n      /* Force styles for desktop view */\n      @media (min-width: 768px) {\n        body, html, #root, .telegram-webview, .dark body, .dark html, .dark #root {\n          background-color: ${forcedMainBgColor} !important;\n        }\n        \n        .bottom-nav-bar, .dark .bottom-nav-bar {\n          background-color: ${forcedHeaderBgColor} !important;\n          border-top: none !important;\n          box-shadow: none !important;\n        }\n      }\n    `;\n    \n    // Remove any previous style element we added\n    const previousStyle = document.getElementById('telegram-theme-style');\n    if (previousStyle) {\n      previousStyle.remove();\n    }\n    \n    // Add ID to the style element for easy reference\n    style.id = 'telegram-theme-style';\n    \n    // Add the style element to the head\n    document.head.appendChild(style);\n    \n    // Also set individual CSS variables\n    root.style.setProperty('--tg-theme-bg-color', forcedHeaderBgColor, 'important');\n    root.style.setProperty('--tg-theme-secondary-bg-color', forcedMainBgColor, 'important');\n    root.style.setProperty('--tg-theme-text-color', textColor, 'important');\n    root.style.setProperty('--tg-theme-hint-color', hintColor, 'important');\n    root.style.setProperty('--tg-theme-link-color', linkColor, 'important');\n    root.style.setProperty('--tg-theme-button-color', buttonColor, 'important');\n    root.style.setProperty('--tg-theme-button-text-color', buttonTextColor, 'important');\n    root.style.setProperty('--tg-color-scheme', isThemeDark ? 'dark' : 'light', 'important');\n    \n    // Apply the background color to all main elements\n    document.body.style.backgroundColor = forcedMainBgColor;\n    document.body.style.setProperty('background-color', forcedMainBgColor, 'important');\n    document.body.style.color = textColor;\n    document.body.style.setProperty('color', textColor, 'important');\n    \n    if (document.getElementById('root')) {\n      const rootElement = document.getElementById('root')!;\n      rootElement.style.backgroundColor = forcedMainBgColor;\n      rootElement.style.setProperty('background-color', forcedMainBgColor, 'important');\n    }\n    \n    // Apply styles to bottom navigation bar directly if it exists\n    const bottomNavBar = document.querySelector('.bottom-nav-bar');\n    if (bottomNavBar) {\n      (bottomNavBar as HTMLElement).style.backgroundColor = forcedHeaderBgColor;\n      (bottomNavBar as HTMLElement).style.setProperty('background-color', forcedHeaderBgColor, 'important');\n      // Remove backdrop filter\n      (bottomNavBar as HTMLElement).style.backdropFilter = 'none';\n      (bottomNavBar as HTMLElement).style.setProperty('-webkit-backdrop-filter', 'none', 'important');\n      // Remove border and shadow\n      (bottomNavBar as HTMLElement).style.borderTop = 'none';\n      (bottomNavBar as HTMLElement).style.setProperty('border-top', 'none', 'important');\n      (bottomNavBar as HTMLElement).style.boxShadow = 'none';\n      (bottomNavBar as HTMLElement).style.setProperty('box-shadow', 'none', 'important');\n    }\n    \n    // Force background color on html element too\n    document.documentElement.style.backgroundColor = forcedMainBgColor;\n    document.documentElement.style.setProperty('background-color', forcedMainBgColor, 'important');\n    \n    console.log(`${isThemeDark ? 'Dark' : 'Light'} theme CSS applied with Telegram colors`);\n  } catch (error) {\n    console.error(\"Error applying theme CSS:\", error);\n  }\n}\n\n/**\n * Open URL directly in Telegram WebApp\n * This bypasses the confirmation dialog and opens the URL within Telegram\n * @param url URL to open\n */\nexport function openTelegramUrl(url: string): void {\n  try {\n    console.log(\"Opening URL in Telegram:\", url);\n    \n    // Get the WebApp instance\n    const webApp = getTelegramWebApp();\n    \n    if (webApp) {\n      // Use Telegram's openLink method if available (newer versions)\n      if (typeof webApp.openLink === 'function') {\n        webApp.openLink(url, { try_instant_view: true });\n        console.log(\"URL opened using WebApp.openLink\");\n        return;\n      }\n    }\n    \n    // Fallback to global Telegram.WebApp\n    if (window.Telegram?.WebApp) {\n      const globalWebApp = window.Telegram.WebApp;\n      // @ts-ignore - Some versions might have this method\n      if (typeof globalWebApp.openLink === 'function') {\n        // @ts-ignore\n        globalWebApp.openLink(url, { try_instant_view: true });\n        console.log(\"URL opened using global Telegram.WebApp.openLink\");\n        return;\n      }\n    }\n    \n    // If all else fails, just open in a new tab\n    console.warn(\"No Telegram-specific method available to open URL, falling back to window.open\");\n    window.open(url, '_blank');\n  } catch (error) {\n    console.error(\"Error opening URL in Telegram:\", error);\n    // Fallback to regular open\n    window.open(url, '_blank');\n  }\n}\n","import { toast } from 'sonner';\nimport { API_BASE_URL, TIMEOUTS, handleApiError, cache, CACHE_CONFIG, createFetchOptions } from './config';\nimport { TelegramUser, UserProfile, UserExistsRequest, UserExistsResponse, UserRankRequest, UserRankResponse, DeliveryRate } from './types';\nimport { getTelegramUser as getTelegramUserFromUtils } from '@/utils/telegramUtils';\n\n// Cache keys\nconst CACHE_KEYS = {\n  PROFILE: (userId: number) => `profile_${userId}`,\n  RANK: (userId: number) => `rank_${userId}`,\n  DD_COINS: (userId: number) => `dd_coins_${userId}`,\n  DELIVERY_RATES: 'delivery_rates'\n};\n\n// Helper function to get Telegram user data\nexport const getTelegramUser = (): TelegramUser | null => {\n  try {\n    // First try to get user data from telegramUtils (which has better parsing)\n    const userFromUtils = getTelegramUserFromUtils();\n    if (userFromUtils) {\n      console.log('Using Telegram user data from telegramUtils');\n      return userFromUtils;\n    }\n    \n    // Check if Telegram WebApp is available\n    if (window.Telegram && window.Telegram.WebApp) {\n      const user = window.Telegram.WebApp.initDataUnsafe.user;\n      \n      // Make sure we have a valid user object\n      if (user && user.id) {\n        return user;\n      } else {\n        console.warn('Telegram WebApp available but user data is invalid');\n      }\n    }\n    \n    // We couldn't get user data - this is a real issue\n    console.error('No Telegram user data available');\n    return null;\n  } catch (error) {\n    console.error('Error getting Telegram user:', error);\n    return null;\n  }\n};\n\n// Check if user exists in the system when the app initializes\nexport const checkUserExists = async (returnFullResponse: boolean = false): Promise<boolean | UserExistsResponse> => {\n  try {\n    const user = getTelegramUser();\n    if (!user) {\n      console.error('No Telegram user data available for existence check');\n      return false;\n    }\n    \n    console.log(`Checking if user exists: ID=${user.id}, username=${user.username || 'not set'}`);\n    \n    // Prepare the request body\n    const requestBody: UserExistsRequest = {\n      telegram_user_id: user.id\n    };\n    \n    // Add username if available\n    if (user.username) {\n      requestBody.telegram_username = user.username;\n    }\n    \n    // Make the API call with improved fetch options\n    const { options, clearTimeout } = createFetchOptions('POST', requestBody, TIMEOUTS.PROFILE);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/users/check-exists`, options);\n      clearTimeout();\n      \n      if (!response.ok) {\n        // Gracefully handle 404 - consider user doesn't exist\n        if (response.status === 404) {\n          console.log('User not found (404), considered as non-existent');\n          return false;\n        }\n        \n        const errorText = await response.text();\n        let errorDetail;\n        try {\n          const errorJson = JSON.parse(errorText);\n          errorDetail = errorJson.detail || errorText;\n        } catch (e) {\n          errorDetail = errorText || `HTTP error ${response.status}`;\n        }\n        throw new Error(errorDetail);\n      }\n      \n      // Get the response text first\n      const responseText = await response.text();\n      \n      // Parse response\n      const existsResponse: UserExistsResponse = JSON.parse(responseText);\n      console.log('User existence check result:', existsResponse);\n      \n      // Return full response if requested\n      if (returnFullResponse) {\n        return existsResponse;\n      }\n      \n      // Return true if user exists\n      return existsResponse.exists;\n    } catch (error: any) {\n      // Log the error but don't show toast for this background check\n      console.error('Error checking if user exists:', error);\n      return false;\n    }\n  } catch (error: any) {\n    console.error('Error in checkUserExists:', error);\n    return false;\n  }\n};\n\n// Get user rank with caching\n/*\nexport const getUserRank = async (): Promise<number> => {\n  try {\n    const user = getTelegramUser();\n    if (!user || !user.id) {\n      console.error('No Telegram user data available for getting rank');\n      return 0; // Default rank\n    }\n    \n    console.log(`Getting rank for user ID: ${user.id}`);\n    \n    // Check cache first\n    const cacheKey = CACHE_KEYS.RANK(user.id);\n    const cachedRank = cache.get<number>(cacheKey, CACHE_CONFIG.PROFILE_TTL);\n    if (cachedRank !== null) {\n      console.log('Using cached rank data:', cachedRank);\n      return cachedRank;\n    }\n    \n    // Prepare the request\n    const requestBody: UserRankRequest = {\n      telegram_user_id: user.id\n    };\n    \n    // Make the API call with improved fetch options\n    const { options, clearTimeout } = createFetchOptions('POST', requestBody, TIMEOUTS.PROFILE);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/users/rank`, options);\n      clearTimeout();\n      \n      // If user not found, just return 0 as the default rank\n      if (response.status === 404) {\n        console.log('User not found in rank API, using default rank 0');\n        // Cache the default rank to avoid repeated calls\n        cache.set(cacheKey, 0);\n        return 0;\n      }\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorDetail;\n        try {\n          const errorJson = JSON.parse(errorText);\n          errorDetail = errorJson.detail || errorText;\n        } catch (e) {\n          errorDetail = errorText || `HTTP error ${response.status}`;\n        }\n        throw new Error(errorDetail);\n      }\n      \n      // Get the response text first\n      const responseText = await response.text();\n      console.log('Raw rank response:', responseText);\n      \n      // Parse response\n      const rankResponse: UserRankResponse = JSON.parse(responseText);\n      console.log('User rank result:', rankResponse);\n      \n      // Make sure we have loyalty_rank and convert to number\n      if (rankResponse.loyalty_rank === undefined) {\n        console.error('loyalty_rank not found in response:', rankResponse);\n        // Return 0 as default\n        cache.set(cacheKey, 0);\n        return 0;\n      }\n      \n      // Get the loyalty_rank value \n      // Convert string rank to number if needed\n      const rankValue = typeof rankResponse.loyalty_rank === 'string' \n        ? parseInt(rankResponse.loyalty_rank, 10) || 0\n        : Number(rankResponse.loyalty_rank) || 0;\n      \n      console.log('Extracted rank value:', rankValue);\n      \n      // Cache the rank\n      cache.set(cacheKey, rankValue);\n      \n      return rankValue;\n    } catch (error: any) {\n      console.error('Error getting user rank:', error);\n      \n      // Don't show error toast for user not found\n      if (!error.message.includes('User not found')) {\n        toast.error(`Error getting rank: ${error.message}`);\n      }\n      \n      return 0; // Default rank\n    }\n  } catch (error: any) {\n    console.error('Error in getUserRank:', error);\n    \n    // Don't show error toast for user not found\n    if (!error.message.includes('User not found')) {\n      toast.error(`Error: ${error.message}`);\n    }\n    \n    return 0; // Default rank\n  }\n};\n*/\n\n// Legacy function for backward compatibility\nexport const checkUserProfile = async (userId: number): Promise<UserProfile> => {\n  try {\n    // Get current user info if userId wasn't provided\n    const user = getTelegramUser();\n    const safeUserId = userId || (user ? user.id : 0);\n    const username = user ? (user.username || `user_${safeUserId}`) : `user_${safeUserId}`;\n    \n    if (!safeUserId) {\n      console.error('No user ID available for profile check');\n      throw new Error('User ID required');\n    }\n    \n    // Get user rank via the new API\n    // const loyaltyRank = await getUserRank();\n    // console.log(`Retrieved loyalty rank for user ${safeUserId}: ${loyaltyRank}`);\n    \n    // Return a compatible profile object\n    return {\n      telegram_username: username,\n      rank: 0, // Default to 0 since rank is not used\n      total_orders: 0 // We don't have this information in the new API\n    };\n  } catch (error) {\n    console.error('Error in legacy checkUserProfile:', error);\n    \n    // Return a minimal profile to prevent app crashes\n    return {\n      telegram_username: `user_${userId || 0}`,\n      rank: 0,\n      total_orders: 0\n    };\n  }\n};\n\n/**\n * Get user's DD coins balance\n * @returns A promise that resolves to the user's DD coins balance\n */\nexport const getDDCoinsBalance = async (): Promise<number> => {\n  try {\n    const user = getTelegramUser();\n    if (!user || !user.id) {\n      console.error('No Telegram user data available for getting DD coins balance');\n      return 0; // Default balance\n    }\n    \n    const userId = user.id;\n    console.log(`Getting DD coins balance for user ID: ${userId}`);\n    \n    // Check cache first with shorter TTL during debugging\n    const cacheKey = CACHE_KEYS.DD_COINS(userId);\n    const cachedBalance = cache.get<number>(cacheKey, 10000); // 10 seconds during testing\n    if (cachedBalance !== null) {\n      console.log('Using cached DD coins balance:', cachedBalance);\n      return cachedBalance;\n    }\n    \n    // For demo/debugging, we can call the API endpoint directly without fetch options\n    try {\n      console.log(`Direct API call to: ${API_BASE_URL}/users/${userId}/dd-coins`);\n      \n      // Make the API call with improved fetch options\n      const { options, clearTimeout } = createFetchOptions('GET', null, TIMEOUTS.PROFILE);\n      \n      // Use explicit URL with user ID for better debugging\n      const apiUrl = `${API_BASE_URL}/users/${userId}/dd-coins`;\n      console.log('API URL for DD coins:', apiUrl);\n      \n      const response = await fetch(apiUrl, options);\n      clearTimeout();\n      \n      console.log('DD coins API response status:', response.status);\n      \n      // If user not found, just return 0 as the default balance\n      if (response.status === 404) {\n        console.log('User not found in DD coins API, using default balance 0');\n        // Cache the default balance to avoid repeated calls\n        cache.set(cacheKey, 0);\n        return 0;\n      }\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('DD coins API non-OK response:', errorText);\n        let errorDetail;\n        try {\n          const errorJson = JSON.parse(errorText);\n          errorDetail = errorJson.detail || errorText;\n        } catch (e) {\n          errorDetail = errorText || `HTTP error ${response.status}`;\n        }\n        throw new Error(errorDetail);\n      }\n      \n      // Get the response text first\n      const responseText = await response.text();\n      console.log('Raw DD coins response:', responseText);\n      \n      if (!responseText) {\n        console.error('Empty response from DD coins API');\n        return 0;\n      }\n      \n      // Try to parse the response\n      try {\n        // Parse response\n        const coinsResponse = JSON.parse(responseText);\n        console.log('DD coins response (parsed JSON):', coinsResponse);\n        console.log('DD coins balance value:', coinsResponse.dd_coins_balance);\n        console.log('Type of DD coins balance:', typeof coinsResponse.dd_coins_balance);\n        \n        // Extract the balance - The API returns { \"telegram_user_id\": 432530443, \"dd_coins_balance\": 1488 }\n        let balance = 0;\n        if (coinsResponse.dd_coins_balance !== undefined) {\n          // Handle both string and number types\n          balance = typeof coinsResponse.dd_coins_balance === 'string' \n            ? parseFloat(coinsResponse.dd_coins_balance) \n            : Number(coinsResponse.dd_coins_balance);\n            \n          console.log('Retrieved balance value:', balance);\n        } else {\n          console.error('DD coins balance field not found in response');\n        }\n        \n        console.log('Parsed DD coins balance:', balance);\n        console.log('Type of parsed balance:', typeof balance);\n        \n        // Cache the balance\n        cache.set(cacheKey, balance);\n        \n        return balance;\n      } catch (e) {\n        console.error('Error parsing DD coins response:', e);\n        return 0;\n      }\n    } catch (error: any) {\n      console.error('Error getting DD coins balance:', error);\n      \n      // Don't show error toast for user not found\n      if (!error.message.includes('User not found')) {\n        toast.error(`Error getting DD coins balance: ${error.message}`);\n      }\n      \n      return 0; // Default balance\n    }\n  } catch (error: any) {\n    console.error('Error in getDDCoinsBalance:', error);\n    return 0; // Default balance\n  }\n};\n\n/**\n * Get available delivery rates\n * @returns A promise that resolves to an array of delivery rates\n */\nexport const getDeliveryRates = async (): Promise<DeliveryRate[]> => {\n  try {\n    // Check cache first\n    const cacheKey = CACHE_KEYS.DELIVERY_RATES;\n    const cachedRates = cache.get<DeliveryRate[]>(cacheKey, CACHE_CONFIG.PROFILE_TTL);\n    if (cachedRates !== null) {\n      console.log('Using cached delivery rates:', cachedRates);\n      return cachedRates;\n    }\n    \n    console.log('Fetching delivery rates from API...');\n    \n    // Make the API call with improved fetch options\n    const { options, clearTimeout } = createFetchOptions('GET', null, TIMEOUTS.PROFILE);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/users/delivery-rates`, options);\n      clearTimeout();\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorDetail;\n        try {\n          const errorJson = JSON.parse(errorText);\n          errorDetail = errorJson.detail || errorText;\n        } catch (e) {\n          errorDetail = errorText || `HTTP error ${response.status}`;\n        }\n        throw new Error(errorDetail);\n      }\n      \n      // Get the response text first\n      const responseText = await response.text();\n      console.log('Raw delivery rates response:', responseText);\n      \n      // Parse response - format is { \"delivery_rates\": [{ \"delivery_type\": \"...\", \"price_rub\": 0 }, ...] }\n      const ratesResponse = JSON.parse(responseText);\n      console.log('Delivery rates response:', ratesResponse);\n      \n      // Extract the rates\n      const rates = ratesResponse.delivery_rates || [];\n      \n      // Cache the rates\n      cache.set(cacheKey, rates);\n      \n      return rates;\n    } catch (error: any) {\n      console.error('Error getting delivery rates:', error);\n      toast.error(`Error getting delivery rates: ${error.message}`);\n      return []; // Empty array as default\n    }\n  } catch (error: any) {\n    console.error('Error in getDeliveryRates:', error);\n    return []; // Empty array as default\n  }\n};\n","import { StockItem, Order, OrderItem, SizeAvailability, ItemPhoto } from './types';\n\n// Mock data for fallback when API is unavailable - legacy format\nexport const MOCK_STOCK: StockItem[] = [\n  {\n    \"sku\": \"TS001-BLK\",\n    \"item_name\": \"Basic T-Shirt\",\n    \"color_code\": \"BLK\",\n    \"brand\": \"FashionBrand\",\n    \"description\": \"Original SKU: TS001-BLK\",\n    \"price_rub\": 500.0,\n    \"sizes\": [\n      { \"size\": \"M\", \"quantity\": 2 },\n      { \"size\": \"L\", \"quantity\": 2 }\n    ],\n    \"photos\": [\n      { \"photo_url\": \"https://example.com/photos/ts001_front.jpg\", \"photo_category\": \"front\" },\n      { \"photo_url\": \"https://example.com/photos/ts001_side.jpg\", \"photo_category\": \"side\" }\n    ]\n  },\n  {\n    \"sku\": \"JN002-BLU\",\n    \"item_name\": \"Slim Jeans\",\n    \"color_code\": \"BLU\",\n    \"brand\": \"DenimCo\",\n    \"description\": \"Original SKU: JN002-BLU\",\n    \"price_rub\": 1200.0,\n    \"sizes\": [\n      { \"size\": \"32\", \"quantity\": 2 }\n    ],\n    \"photos\": [\n      { \"photo_url\": \"https://example.com/photos/jn002_front.jpg\", \"photo_category\": \"front\" }\n    ]\n  },\n  {\n    \"sku\": \"SW003-RED\",\n    \"item_name\": \"Wool Sweater\",\n    \"color_code\": \"RED\",\n    \"brand\": \"WinterWear\",\n    \"description\": \"Original SKU: SW003-RED\",\n    \"price_rub\": 1500.0,\n    \"sizes\": [\n      { \"size\": \"S\", \"quantity\": 1 },\n      { \"size\": \"M\", \"quantity\": 3 }\n    ],\n    \"photos\": [\n      { \"photo_url\": \"https://example.com/photos/sw003_front.jpg\", \"photo_category\": \"front\" }\n    ]\n  }\n];\n\n// Mock products with proper structure for new API\nexport const MOCK_PRODUCTS: StockItem[] = [\n  {\n    \"sku\": \"TS001-BLK\",\n    \"item_name\": \"Basic T-Shirt\",\n    \"color_code\": \"BLK\",\n    \"brand\": \"FashionBrand\",\n    \"description\": \"Original SKU: TS001-BLK\",\n    \"price_rub\": 500.0,\n    \"sizes\": [\n      { \"size\": \"M\", \"quantity\": 2 },\n      { \"size\": \"L\", \"quantity\": 2 }\n    ],\n    \"photos\": [\n      { \"photo_url\": \"https://example.com/photos/ts001_front.jpg\", \"photo_category\": \"front\" },\n      { \"photo_url\": \"https://example.com/photos/ts001_side.jpg\", \"photo_category\": \"side\" }\n    ]\n  },\n  {\n    \"sku\": \"JN002-BLU\",\n    \"item_name\": \"Slim Jeans\",\n    \"color_code\": \"BLU\",\n    \"brand\": \"DenimCo\",\n    \"description\": \"Original SKU: JN002-BLU\",\n    \"price_rub\": 1200.0,\n    \"sizes\": [\n      { \"size\": \"32\", \"quantity\": 2 }\n    ],\n    \"photos\": [\n      { \"photo_url\": \"https://example.com/photos/jn002_front.jpg\", \"photo_category\": \"front\" }\n    ]\n  },\n  {\n    \"sku\": \"SW003-RED\",\n    \"item_name\": \"Wool Sweater\",\n    \"color_code\": \"RED\",\n    \"brand\": \"WinterWear\",\n    \"description\": \"Original SKU: SW003-RED\",\n    \"price_rub\": 1500.0,\n    \"sizes\": [\n      { \"size\": \"S\", \"quantity\": 1 },\n      { \"size\": \"M\", \"quantity\": 3 }\n    ],\n    \"photos\": [\n      { \"photo_url\": \"https://example.com/photos/sw003_front.jpg\", \"photo_category\": \"front\" }\n    ]\n  }\n];\n\nexport const MOCK_ORDERS: Order[] = [\n  {\n    order_id: 1,\n    created_at: '2023-02-20T00:00:00',\n    prepay_amount: '1500.0',\n    status: 'paid',\n    items: [\n      { \n        sku: 'SW003-RED', \n        item_name: 'Wool Sweater', \n        size: 'M', \n        price_cny: '150.0',\n        price_rub: '1500.0' \n      }\n    ]\n  },\n  {\n    order_id: 2,\n    created_at: '2023-05-15T00:00:00',\n    prepay_amount: '1700.0',\n    status: 'pending',\n    items: [\n      { \n        sku: 'TS001-BLK', \n        item_name: 'Basic T-Shirt', \n        size: 'L', \n        price_cny: '50.0',\n        price_rub: '500.0' \n      },\n      { \n        sku: 'JN002-BLU', \n        item_name: 'Slim Jeans', \n        size: '32', \n        price_cny: '120.0',\n        price_rub: '1200.0' \n      }\n    ]\n  }\n];\n","import { toast } from 'sonner';\nimport { API_BASE_URL, TIMEOUTS, handleApiError, cache, CACHE_CONFIG, createFetchOptions } from './config';\nimport { StockItem, StockResponse, SizeAvailability, ItemPhoto, CategoryResponse, Category } from './types';\nimport { MOCK_PRODUCTS } from './mockData';\n\n// Cache keys\nconst CACHE_KEYS = {\n  PRODUCTS: 'products',\n  CATEGORIES: 'categories'\n};\n\n// Fetch all available products with fallback to mock data and caching\nexport const fetchProducts = async (): Promise<StockItem[]> => {\n  console.log('Fetching products...');\n  \n  try {\n    // Check cache first\n    const cachedProducts = cache.get<StockItem[]>(CACHE_KEYS.PRODUCTS, CACHE_CONFIG.PRODUCTS_TTL);\n    if (cachedProducts) {\n      console.log('Using cached products data');\n      return cachedProducts;\n    }\n    \n    console.log('No cached products, fetching from API...');\n    \n    // Make the API call with improved fetch options\n    const { options, clearTimeout } = createFetchOptions('GET', undefined, TIMEOUTS.PRODUCTS);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/stock/in-stock`, options);\n      clearTimeout();\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorDetail;\n        try {\n          const errorJson = JSON.parse(errorText);\n          errorDetail = errorJson.detail || errorText;\n        } catch (e) {\n          errorDetail = errorText || `HTTP error ${response.status}`;\n        }\n        throw new Error(errorDetail);\n      }\n      \n      // Get the response text first\n      const responseText = await response.text();\n      \n      // Parse response\n      const stockResponse: StockResponse = JSON.parse(responseText);\n      console.log('Products fetched successfully, count:', stockResponse.items?.length || 0);\n      \n      if (!stockResponse.items || !Array.isArray(stockResponse.items)) {\n        console.error('API returned invalid products data');\n        toast.error('Invalid products data received from API');\n        return MOCK_PRODUCTS;\n      }\n      \n      // Process the items to ensure consistent data format\n      const normalizedItems = stockResponse.items.map(item => {\n        // Ensure price_rub is a number\n        const price = typeof item.price_rub === 'string' \n          ? parseFloat(item.price_rub.replace(/[^\\d.-]/g, '')) \n          : Number(item.price_rub);\n          \n        // Ensure photos array exists\n        const photos = Array.isArray(item.photos) ? item.photos : [];\n        \n        // Ensure sizes array exists and has quantity as number\n        const sizes = Array.isArray(item.sizes) \n          ? item.sizes.map(size => ({\n              ...size,\n              quantity: typeof size.quantity === 'string' ? parseInt(size.quantity, 10) : size.quantity\n            }))\n          : [];\n        \n        return {\n          ...item,\n          price_rub: isNaN(price) ? 0 : price,\n          photos: photos,\n          sizes: sizes\n        };\n      });\n      \n      // Cache the products\n      cache.set(CACHE_KEYS.PRODUCTS, normalizedItems);\n      \n      return normalizedItems;\n    } catch (error: any) {\n      console.error('Error fetching products:', error);\n      toast.error(`Error loading products: ${error.message}`);\n      return MOCK_PRODUCTS;\n    }\n  } catch (error: any) {\n    console.error('Error in fetchProducts:', error);\n    toast.error(`Error: ${error.message}`);\n    return MOCK_PRODUCTS;\n  }\n};\n\n/**\n * Fetch all available categories\n * @returns A promise that resolves to an array of categories\n */\nexport const fetchCategories = async (): Promise<Category[]> => {\n  console.log('Fetching categories...');\n  \n  try {\n    // Check cache first\n    const cachedCategories = cache.get<Category[]>(CACHE_KEYS.CATEGORIES, CACHE_CONFIG.PRODUCTS_TTL);\n    if (cachedCategories) {\n      console.log('Using cached categories data');\n      return cachedCategories;\n    }\n    \n    console.log('No cached categories, fetching from API...');\n    \n    // Make the API call with improved fetch options\n    const { options, clearTimeout } = createFetchOptions('GET', undefined, TIMEOUTS.PRODUCTS);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/stock/get-categories`, options);\n      clearTimeout();\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorDetail;\n        try {\n          const errorJson = JSON.parse(errorText);\n          errorDetail = errorJson.detail || errorText;\n        } catch (e) {\n          errorDetail = errorText || `HTTP error ${response.status}`;\n        }\n        throw new Error(errorDetail);\n      }\n      \n      // Get the response text first\n      const responseText = await response.text();\n      \n      // Parse response\n      const categoryResponse: CategoryResponse = JSON.parse(responseText);\n      console.log('Categories fetched successfully, count:', categoryResponse.categories?.length || 0);\n      \n      if (!categoryResponse.categories || !Array.isArray(categoryResponse.categories)) {\n        console.error('API returned invalid categories data');\n        toast.error('Invalid categories data received from API');\n        return [];\n      }\n      \n      // Cache the categories\n      cache.set(CACHE_KEYS.CATEGORIES, categoryResponse.categories);\n      \n      return categoryResponse.categories;\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      throw error;\n    }\n  } catch (error: any) {\n    console.error('Failed to fetch categories:', error);\n    handleApiError('Failed to fetch categories');\n    return [];\n  }\n};\n","import { toast } from 'sonner';\nimport { API_BASE_URL, TIMEOUTS, handleApiError, cache, CACHE_CONFIG, createFetchOptions } from './config';\nimport { Order, CartItem, OrdersRequest, OrdersResponse, OrderStockRequest, OrderStockResponse, PreorderRequest, PreorderResponse, StockOrderItem } from './types';\nimport { MOCK_ORDERS } from './mockData';\nimport { getTelegramUser } from './userService';\n\n// Cache keys\nconst CACHE_KEYS = {\n  ORDERS: (userId: number) => `orders_${userId}`\n};\n\n// Fetch orders for the current user with fallback to mock data and caching\nexport const fetchOrders = async (): Promise<Order[]> => {\n  try {\n    // Get the current user\n    const user = getTelegramUser();\n    if (!user || !user.id) {\n      console.error('No user data available when fetching orders');\n      return []; // Return empty array instead of mock data\n    }\n    \n    console.log(`Fetching orders for user ID: ${user.id}...`);\n    \n    // Check cache first\n    const cacheKey = CACHE_KEYS.ORDERS(user.id);\n    const cachedOrders = cache.get<Order[]>(cacheKey, CACHE_CONFIG.ORDERS_TTL);\n    if (cachedOrders) {\n      console.log('Using cached orders data');\n      return cachedOrders;\n    }\n    \n    console.log('No cached orders, fetching from API...');\n    \n    // Prepare the request\n    const requestBody: OrdersRequest = {\n      telegram_user_id: user.id\n    };\n    \n    // Make the API call with improved fetch options\n    const { options, clearTimeout } = createFetchOptions('POST', requestBody, TIMEOUTS.ORDERS);\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/users/orders`, options);\n      clearTimeout();\n      \n      // If user not found or no orders yet, return empty array\n      if (response.status === 404) {\n        console.log('User has no orders or not found in orders API');\n        // Cache empty array to avoid repeated calls\n        cache.set(cacheKey, []);\n        return [];\n      }\n      \n      if (!response.ok) {\n        // Remove debug toasts\n        const errorText = await response.text();\n        let errorDetail;\n        try {\n          const errorJson = JSON.parse(errorText);\n          errorDetail = errorJson.detail || errorText;\n        } catch (e) {\n          errorDetail = errorText || `HTTP error ${response.status}`;\n        }\n        throw new Error(errorDetail);\n      }\n      \n      // Get the response text first\n      const responseText = await response.text();\n      \n      // Parse response\n      const ordersResponse: OrdersResponse = JSON.parse(responseText);\n      console.log('Orders fetched successfully:', ordersResponse);\n      \n      if (!ordersResponse.orders || !Array.isArray(ordersResponse.orders)) {\n        console.error('API returned invalid orders data');\n        return [];\n      }\n      \n      // Cache the orders\n      cache.set(cacheKey, ordersResponse.orders);\n      \n      return ordersResponse.orders;\n    } catch (error: any) {\n      console.error('Error fetching orders:', error);\n      \n      // Don't show error toast for user not found\n      if (!error.message.includes('User not found')) {\n        toast.error('Данные пользователя недоступны. Попробуйте еще раз.');\n      }\n      \n      return [];\n    }\n  } catch (error: any) {\n    console.error('Error in fetchOrders:', error);\n    \n    // Don't show error toast for user not found\n    if (!error.message.includes('User not found')) {\n      toast.error('Данные пользователя недоступны. Попробуйте еще раз.');\n    }\n    \n    return [];\n  }\n};\n\n/**\n * Create a new order and send a confirmation message to the Telegram chat\n * @param cartItems The items in the cart\n * @param shippingCost The cost of shipping\n * @returns A promise that resolves to the created order\n */\nexport const createOrder = async (cartItems: CartItem[], shippingCost: number = 800): Promise<boolean> => {\n  try {\n    // Get the user data\n    const user = getTelegramUser();\n    if (!user) {\n      console.error('No user data available when creating order');\n      toast.error('Данные пользователя недоступны. Попробуйте еще раз.');\n      return false;\n    }\n    \n    console.log('Creating order for user:', user);\n    \n    // Calculate total price\n    const subtotal = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n    const totalPrice = subtotal + shippingCost;\n    \n    // Generate a unique order ID\n    const orderNumber = `${user.id}-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`;\n    console.log(`Generated order number: ${orderNumber}`);\n    \n    // Format the order items for the message\n    const orderItems = cartItems.map(item => {\n      return `${item.name} ${item.color} (цвет: ${getColorName(item.color)}, размер: ${item.size})  ${item.price.toFixed(2)}RUB x${item.quantity} шт`;\n    }).join('\\n');\n    \n    // Create the order message\n    const orderMessage = `\nЗаказ №${orderNumber} успешно оформлен\n\n\nСостав заказа:\n${orderItems}\nСтоимость доставки: ${shippingCost.toFixed(2)}RUB\n\nСумма: ${totalPrice.toLocaleString()} RUB\n\nСпасибо за ваш заказ! В ближайшее время с вами свяжется менеджер\n`;\n    \n    console.log('Prepared order message');\n    \n    // Create the order data\n    const orderData = {\n      user_id: user.id,\n      username: user.username || `user_${user.id}`,\n      order_number: orderNumber,\n      items: cartItems.map(item => ({\n        product_id: item.productId,\n        name: item.name,\n        color: item.color,\n        size: item.size,\n        price: item.price,\n        quantity: item.quantity\n      })),\n      shipping_cost: shippingCost,\n      total_price: totalPrice\n    };\n    \n    // Send the order to the API\n    const { options, clearTimeout } = createFetchOptions('POST', orderData, TIMEOUTS.ORDERS);\n    \n    // Store the order in localStorage as a backup\n    try {\n      localStorage.setItem(`order_${orderNumber}`, JSON.stringify(orderData));\n    } catch (e) {\n      console.warn('Could not store order in localStorage:', e);\n    }\n    \n    // Send the order confirmation message to the Telegram chat\n    console.log('Sending order confirmation to Telegram chat');\n    try {\n      await sendOrderConfirmation(user.id, orderMessage);\n      console.log('Order confirmation sent successfully');\n    } catch (error) {\n      console.error('Failed to send order confirmation, but continuing with order creation:', error);\n      // We'll continue with the order creation even if the confirmation fails\n    }\n    \n    // Invalidate the orders cache for this user\n    const username = user.username || `user_${user.id}`;\n    cache.invalidate(CACHE_KEYS.ORDERS(user.id));\n    \n    // Show success message\n    toast.success('Заказ успешно создан! Проверьте чат в Telegram для получения деталей.');\n    \n    return true;\n  } catch (error: any) {\n    console.error('Error creating order:', error);\n    toast.error('Ошибка при создании заказа. Пожалуйста, попробуйте еще раз.');\n    return false;\n  }\n};\n\n/**\n * Send an order confirmation message to the Telegram chat\n * @param chatId The Telegram chat ID\n * @param message The message to send\n */\nconst sendOrderConfirmation = async (chatId: number, message: string): Promise<void> => {\n  try {\n    // Determine if we're in development or production\n    const isDevelopment = window.location.hostname === 'localhost' || \n                          window.location.hostname === '127.0.0.1';\n    \n    // Use local API in development, fallback to API_BASE_URL in production\n    const apiUrl = isDevelopment \n      ? 'http://localhost:3001/api/telegram/send_message'\n      : `${API_BASE_URL}/telegram/send_message`;\n    \n    console.log(`Sending order confirmation to chat ID ${chatId} via ${apiUrl}`);\n    console.log('Message length:', message.length);\n    console.log('Environment:', isDevelopment ? 'Development' : 'Production');\n    \n    // Add a timeout to the fetch request\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n    \n    try {\n      console.log('Sending fetch request...');\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          chat_id: chatId,\n          text: message\n        }),\n        signal: controller.signal,\n        mode: 'cors', // Explicitly set CORS mode\n      });\n      \n      // Clear the timeout\n      clearTimeout(timeoutId);\n      \n      console.log(`Response status: ${response.status} ${response.statusText}`);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        console.error('API response not OK:', response.status, response.statusText);\n        console.error('Error data:', errorData);\n        throw new Error(`Failed to send message: ${errorData?.error || response.statusText}`);\n      }\n      \n      const responseData = await response.json();\n      console.log('Order confirmation sent successfully:', responseData);\n      \n      // Store the message in localStorage as a backup\n      try {\n        localStorage.setItem(`order_message_${chatId}_${Date.now()}`, message);\n      } catch (e) {\n        console.warn('Could not store order message in localStorage:', e);\n      }\n    } catch (fetchError: any) {\n      clearTimeout(timeoutId);\n      \n      if (fetchError.name === 'AbortError') {\n        console.error('Request timeout when sending order confirmation');\n        throw new Error('Request timeout when sending order confirmation');\n      }\n      \n      console.error('Fetch error details:', fetchError);\n      \n      // If we're in development and get a CORS error, try a different approach\n      if (isDevelopment && (fetchError.message.includes('CORS') || fetchError.message.includes('Failed to fetch'))) {\n        console.log('CORS issue detected, trying alternative approach...');\n        \n        // Create a fallback message with key order details\n        const fallbackMessage = `\n⚠️ Order created but notification failed to send via API.\n\nOrder Number: ${message.split('№')[1]?.split(' ')[0] || 'Unknown'}\nTotal: ${message.split('Сумма: ')[1]?.split('\\n')[0] || 'Unknown'}\n\nPlease check your orders in the app.\n`;\n        \n        // Show a warning to the user\n        toast.warning('Заказ создан, но уведомление не может быть отправлено в Telegram.');\n        console.error('Could not send notification to Telegram due to CORS or network issues. The bot server might not be running or accessible.');\n        \n        // Log the fallback message\n        console.log('Fallback message:', fallbackMessage);\n      }\n      \n      throw fetchError;\n    }\n  } catch (error: any) {\n    console.error('Error sending order confirmation:', error);\n    \n    // Store the failed message in localStorage for potential retry\n    try {\n      localStorage.setItem(`failed_order_message_${chatId}_${Date.now()}`, JSON.stringify({\n        chat_id: chatId,\n        text: message,\n        error: error.message\n      }));\n    } catch (e) {\n      console.warn('Could not store failed order message in localStorage:', e);\n    }\n    \n    // Don't show an error toast here, as we've already created the order successfully\n    // Just log the error for debugging\n  }\n};\n\n/**\n * Get the Russian name for a color code\n * @param colorCode The color code (e.g., \"black\", \"white\")\n * @returns The Russian name for the color\n */\nconst getColorName = (colorCode: string): string => {\n  const colorMap: Record<string, string> = {\n    'black': 'Черный',\n    'white': 'Белый',\n    'red': 'Красный',\n    'blue': 'Синий',\n    'green': 'Зеленый',\n    'yellow': 'Желтый',\n    'purple': 'Фиолетовый',\n    'orange': 'Оранжевый',\n    'pink': 'Розовый',\n    'gray': 'Серый',\n    'brown': 'Коричневый'\n  };\n  \n  return colorMap[colorCode.toLowerCase()] || colorCode;\n};\n\n// Add a product to the user's cart\nexport const addProductToCart = async (productId: string, size: string): Promise<boolean> => {\n  try {\n    // This is just a placeholder/mock since we don't have a real cart API\n    // In a real app, you'd call an API endpoint here\n    console.log(`[MOCK API] Added product to cart - Product ID: ${productId}, Size: ${size}`);\n    return true;\n  } catch (error) {\n    console.error('Error adding product to cart:', error);\n    return false;\n  }\n};\n\n// Update the application when an order is placed\nexport const handleOrderPlaced = (orderId: number, items: CartItem[]): void => {\n  try {\n    // Get the current user\n    const user = getTelegramUser();\n    if (!user || !user.id) {\n      console.error('No user data available for handleOrderPlaced');\n      return;\n    }\n    \n    // Invalidate the orders cache for this user\n    cache.invalidate(CACHE_KEYS.ORDERS(user.id));\n    \n    // Show success message\n    toast.success('Заказ успешно оформлен!');\n  } catch (error) {\n    console.error('Error in handleOrderPlaced:', error);\n  }\n};\n\ninterface CreateStockOrderData {\n  telegram_user_id: number;\n  delivery_type?: string;\n  delivery_method?: string;\n  delivery_address?: string;\n  promocode_text?: string;\n  dd_coins_amount?: number;\n  items: {\n    sku: string;\n    size: string;\n    quantity: number;\n    sale_price: number;\n  }[];\n}\n\ninterface CreateStockOrderResponse {\n  success: boolean;\n  message: string;\n  order_id?: number;\n}\n\nexport const createStockOrder = async (orderData: CreateStockOrderData): Promise<CreateStockOrderResponse> => {\n  try {\n    // Validate required fields\n    if (!orderData.items?.length) {\n      throw new Error('Order must contain at least one item');\n    }\n\n    for (const item of orderData.items) {\n      if (!item.sku) {\n        throw new Error('Each item must have a SKU');\n      }\n    }\n\n    // Use delivery_method if provided, otherwise use delivery_type\n    const deliveryType = orderData.delivery_method || orderData.delivery_type;\n\n    // Validate delivery_address if needed\n    if ((deliveryType === 'courier' || deliveryType === 'shipping') && !orderData.delivery_address) {\n      throw new Error('Delivery address is required for courier or shipping delivery method');\n    }\n\n    // Create a clean order data object with standardized field names\n    const cleanOrderData = {\n      ...orderData,\n      delivery_type: deliveryType\n    };\n\n    const { options, clearTimeout } = createFetchOptions('POST', cleanOrderData);\n\n    const response = await fetch(`${API_BASE_URL}/orders/stock`, options);\n    clearTimeout();\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      let errorDetail;\n      try {\n        const errorJson = JSON.parse(errorText);\n        errorDetail = errorJson.detail || errorText;\n      } catch (e) {\n        errorDetail = errorText;\n      }\n      throw new Error(errorDetail);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating stock order:', error);\n    throw error;\n  }\n};\n\nexport const createPreorder = async (orderData: {\n  telegram_user_id: number;\n  delivery_method: string;\n  delivery_address?: string;\n  promocode_text?: string;\n  dd_coins_amount?: number;\n  final_price?: number;\n  preorder_item: {\n    dewu_url: string;\n    size: string;\n    price_cny: number;\n    category_type: string;  // Must be one of: \"обувь\", \"одежда\", \"аксессуары\"\n    delivery_type: string;  // Must be one of: \"cargo\" or \"aero\"\n    quantity: number;\n  };\n}): Promise<CreateStockOrderResponse> => {\n  try {\n    // Validate required fields\n    if (!orderData.telegram_user_id) {\n      throw new Error('Telegram user ID is required');\n    }\n    \n    if (!orderData.preorder_item) {\n      throw new Error('Preorder item details are required');\n    }\n    \n    if (!orderData.preorder_item.dewu_url) {\n      throw new Error('Preorder item URL is required');\n    }\n    \n    if (!orderData.preorder_item.category_type) {\n      throw new Error('Preorder item category type is required');\n    }\n    \n    if (!orderData.preorder_item.delivery_type) {\n      throw new Error('Preorder item delivery type is required');\n    }\n    \n    // Validate category_type\n    const validCategoryTypes = ['обувь', 'одежда', 'аксессуары'];\n    if (!validCategoryTypes.includes(orderData.preorder_item.category_type)) {\n      throw new Error(`Invalid category type. Must be one of: ${validCategoryTypes.join(', ')}`);\n    }\n    \n    // Validate delivery_type\n    const validDeliveryTypes = ['cargo', 'aero'];\n    if (!validDeliveryTypes.includes(orderData.preorder_item.delivery_type)) {\n      throw new Error(`Invalid delivery type. Must be one of: ${validDeliveryTypes.join(', ')}`);\n    }\n    \n    // Validate delivery_address if needed\n    if ((orderData.delivery_method === 'courier' || orderData.delivery_method === 'shipping') && !orderData.delivery_address) {\n      throw new Error('Delivery address is required for courier or shipping delivery method');\n    }\n    \n    // Create a clean request structure as expected by the API\n    const requestData = {\n      telegram_user_id: orderData.telegram_user_id,\n      preorder_item: orderData.preorder_item,\n      delivery_method: orderData.delivery_method,\n      delivery_address: orderData.delivery_address || '',\n      promocode_text: orderData.promocode_text,\n      dd_coins_amount: orderData.dd_coins_amount,\n      final_price: orderData.final_price,\n      quantity: orderData.preorder_item.quantity\n    };\n    \n    const { options, clearTimeout } = createFetchOptions('POST', requestData);\n\n    const response = await fetch(`${API_BASE_URL}/orders/preorder`, options);\n    clearTimeout();\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(errorText || 'Failed to create preorder');\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating preorder:', error);\n    throw error;\n  }\n};\n\n/**\n * Calculate shipping cost using the API\n * @param priceCny The price in CNY\n * @param shippingType The shipping type ('cargo' for car, 'aero' for plane)\n * @param category The item category (e.g., 'sneakers', 'hoodie')\n * @returns A promise that resolves to the shipping cost\n */\nexport const calculateShipping = async (\n  priceCny: number,\n  shippingType: string,\n  category: string\n): Promise<number> => {\n  try {\n    // Convert shipping type to API format if needed\n    const apiShippingType = shippingType === 'car' ? 'cargo' : shippingType === 'plane' ? 'aero' : shippingType;\n    \n    // Prepare the request body\n    const requestBody = {\n      price_cny: priceCny,\n      shipping_type: apiShippingType,\n      category\n    };\n    \n    console.log('Shipping calculation request:', requestBody);\n    \n    // Make the API call\n    const { options, clearTimeout } = createFetchOptions('POST', requestBody, TIMEOUTS.PRODUCTS);\n    \n    const response = await fetch(`${API_BASE_URL}/orders/calculate-shipping`, options);\n    clearTimeout();\n    \n    console.log(`Response status: ${response.status} ${response.statusText}`);\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      console.error('API response not OK:', response.status, response.statusText);\n      console.error('Error data:', errorData);\n      throw new Error(`Failed to calculate shipping: ${errorData?.message || response.statusText}`);\n    }\n    \n    // Get the response\n    const responseData = await response.json();\n    console.log('Shipping calculation response:', responseData);\n    \n    // Return the shipping cost\n    return responseData.shipping_cost;\n  } catch (error: any) {\n    console.error('Error calculating shipping:', error);\n    throw new Error(`Error calculating shipping: ${error.message}`);\n  }\n};\n\n// Add a new function for creating unified orders (both stock and preorder items)\nexport const createUnifiedOrder = async (orderData: {\n  telegram_user_id: number;\n  delivery_method: string;\n  delivery_address?: string;\n  promocode_text?: string;\n  dd_coins_amount?: number;\n  items: {\n    item_type: 'stock' | 'preorder';\n    // For stock items\n    stock_id?: number;\n    sku?: string;\n    size?: string;\n    quantity?: number;\n    // For preorder items\n    dewu_url?: string;\n    category_type?: string;\n    shipping_type?: string;\n    price_cny?: number;\n  }[];\n  final_price?: number;\n}): Promise<CreateStockOrderResponse> => {\n  try {\n    // Validate required fields\n    if (!orderData.items?.length) {\n      throw new Error('Order must contain at least one item');\n    }\n\n    // Prepare the items array in the format expected by the API\n    const items = orderData.items.map(item => {\n      if (item.item_type === 'preorder') {\n        // Validate preorder item fields\n        if (!item.dewu_url) {\n          throw new Error('Preorder item must have a URL');\n        }\n        if (!item.category_type) {\n          throw new Error('Preorder item must have a category type');\n        }\n        if (!item.shipping_type) {\n          throw new Error('Preorder item must have a shipping type');\n        }\n        if (!item.price_cny) {\n          throw new Error('Preorder item must have a price in CNY');\n        }\n        \n        // Validate category_type\n        const validCategoryTypes = ['обувь', 'одежда', 'аксессуары'];\n        if (!validCategoryTypes.includes(item.category_type)) {\n          throw new Error(`Invalid category type for preorder. Must be one of: ${validCategoryTypes.join(', ')}`);\n        }\n        \n        // Validate shipping_type\n        const validShippingTypes = ['cargo', 'aero'];\n        if (!validShippingTypes.includes(item.shipping_type)) {\n          throw new Error(`Invalid shipping type for preorder. Must be one of: ${validShippingTypes.join(', ')}`);\n        }\n\n        // Return preorder item in the format expected by the API\n        return {\n          item_type: 'preorder',\n          dewu_url: item.dewu_url,\n          size: item.size || '',\n          price_cny: item.price_cny,\n          category_type: item.category_type,\n          shipping_type: item.shipping_type,\n          quantity: item.quantity || 1\n        };\n      } else {\n        // Stock item\n        // If stock_id is provided, use that\n        if (item.stock_id) {\n          return {\n            item_type: 'stock',\n            stock_id: item.stock_id\n          };\n        }\n        \n        // Otherwise require sku and size\n        if (!item.sku) {\n          throw new Error('Stock item must have a SKU');\n        }\n        \n        return {\n          item_type: 'stock',\n          sku: item.sku,\n          size: item.size || '',\n          quantity: item.quantity || 1\n        };\n      }\n    });\n\n    // Validate delivery_address if needed\n    if ((orderData.delivery_method === 'courier' || orderData.delivery_method === 'shipping') && !orderData.delivery_address) {\n      throw new Error('Delivery address is required for courier or shipping delivery method');\n    }\n\n    // Prepare the request data\n    const requestData = {\n      telegram_user_id: orderData.telegram_user_id,\n      items: items,\n      delivery_method: orderData.delivery_method,\n      delivery_address: orderData.delivery_address || '',\n      promocode_text: orderData.promocode_text,\n      dd_coins_amount: orderData.dd_coins_amount,\n      final_price: orderData.final_price\n    };\n\n    console.log(\"Sending unified order request:\", JSON.stringify(requestData, null, 2));\n\n    const { options, clearTimeout } = createFetchOptions('POST', requestData);\n\n    const response = await fetch(`${API_BASE_URL}/orders/create-order`, options);\n    clearTimeout();\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      let errorDetail;\n      try {\n        const errorJson = JSON.parse(errorText);\n        errorDetail = errorJson.detail || errorText;\n      } catch (e) {\n        errorDetail = errorText;\n      }\n      throw new Error(errorDetail);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating unified order:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch available delivery types\n * @returns A promise that resolves to an array of delivery types\n */\nexport const fetchDeliveryTypes = async () => {\n  try {\n    const { options, clearTimeout } = createFetchOptions('GET', undefined, TIMEOUTS.PRODUCTS);\n    \n    const response = await fetch(`${API_BASE_URL}/orders/delivery-types`, options);\n    clearTimeout();\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      console.error('API response not OK:', response.status, response.statusText);\n      console.error('Error data:', errorData);\n      throw new Error(`Failed to fetch delivery types: ${errorData?.message || response.statusText}`);\n    }\n    \n    const data = await response.json();\n    return data.delivery_types || [];\n  } catch (error) {\n    console.error('Error fetching delivery types:', error);\n    throw error;\n  }\n};\n","import { toast } from 'sonner';\nimport { API_BASE_URL, createFetchOptions } from './config';\nimport { UpdateClientInfoRequest, UpdateClientInfoResponse, ClientInfoResponse, ClientInfo } from './types';\nimport { getTelegramUser } from './userService';\n\n/**\n * Get client information by Telegram ID\n * @param telegramId The Telegram user ID\n * @returns A promise that resolves to the client information\n */\nexport const getClientInfo = async (telegramId?: number): Promise<ClientInfo | null> => {\n  try {\n    // Get user data if not provided\n    const user = getTelegramUser();\n    const safeId = telegramId || (user ? user.id : null);\n    \n    if (!safeId) {\n      console.error('No Telegram user ID available for client info');\n      toast.error('User data not available');\n      return null;\n    }\n    \n    console.log(`Fetching client info for Telegram ID: ${safeId}`);\n    \n    // Make the API call\n    const { options, clearTimeout } = createFetchOptions('GET');\n    \n    const response = await fetch(`${API_BASE_URL}/clients/by-telegram/${safeId}`, options);\n    clearTimeout();\n    \n    if (!response.ok) {\n      // If user is not found (404), we return null but don't show an error\n      if (response.status === 404) {\n        console.log('Client info not found (404)');\n        return null;\n      }\n      \n      const errorText = await response.text();\n      console.error(`API Error (${response.status}): ${errorText}`);\n      toast.error('Failed to fetch client information');\n      return null;\n    }\n    \n    // Parse response\n    const responseText = await response.text();\n    const clientInfo: ClientInfoResponse = JSON.parse(responseText);\n    \n    console.log('Client info fetched:', clientInfo);\n    return clientInfo;\n  } catch (error) {\n    console.error('Error fetching client info:', error);\n    toast.error('Failed to fetch client information');\n    return null;\n  }\n};\n\n/**\n * Update client information\n * @param phoneNumber Optional phone number to update\n * @param email Optional email to update\n * @param address Optional address to update\n * @returns A promise that resolves to true if successful\n */\nexport const updateClientInfo = async (\n  phoneNumber?: string,\n  email?: string,\n  address?: string\n): Promise<boolean> => {\n  try {\n    // Get user data\n    const user = getTelegramUser();\n    if (!user) {\n      console.error('No Telegram user data available');\n      toast.error('User data not available');\n      return false;\n    }\n    \n    console.log(`Updating client info for Telegram ID: ${user.id}`);\n    \n    // Prepare the request body\n    const requestBody: UpdateClientInfoRequest = {\n      telegram_id: user.id\n    };\n    \n    // Add optional fields if provided\n    if (phoneNumber) requestBody.phone_number = phoneNumber;\n    if (email) requestBody.email = email;\n    if (address) requestBody.address = address;\n    \n    console.log('Update client info request:', requestBody);\n    \n    // Make the API call\n    const { options, clearTimeout } = createFetchOptions('POST', requestBody);\n    \n    const response = await fetch(`${API_BASE_URL}/clients/update-info`, options);\n    clearTimeout();\n    \n    // Just check the status code for success (200-299 range)\n    if (response.ok) {\n      console.log(`Client info update successful with status: ${response.status}`);\n      toast.success('Client information updated successfully');\n      return true;\n    } else {\n      const errorText = await response.text();\n      console.error(`API Error (${response.status}): ${errorText}`);\n      toast.error('Failed to update client information');\n      return false;\n    }\n  } catch (error) {\n    console.error('Error updating client info:', error);\n    toast.error('Failed to update client information');\n    return false;\n  }\n};\n\n/**\n * Check if client has all required information\n * @returns A promise that resolves to true if all required information is present\n */\nexport const checkClientInformation = async (): Promise<boolean> => {\n  try {\n    // Get user data\n    const user = getTelegramUser();\n    if (!user) {\n      console.error('No Telegram user data available');\n      toast.error('User data not available');\n      return false;\n    }\n    \n    // Get client info\n    const clientInfo = await getClientInfo(user.id);\n    if (!clientInfo) {\n      toast.error('Please provide your contact information before creating an order');\n      return false;\n    }\n    \n    // Check required fields\n    if (!clientInfo.phone_number || !clientInfo.email || !clientInfo.address) {\n      toast.error('Please provide your contact information before creating an order');\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error checking client information:', error);\n    toast.error('Failed to check client information');\n    return false;\n  }\n}; ","import { toast } from 'sonner';\nimport { API_BASE_URL, createFetchOptions } from './config';\nimport { ReferralInfo, CreateReferralResponse, ReferralStats } from './types';\nimport { getTelegramUser } from './userService';\n\n// Define referral service API base\nconst REFERRAL_API_PATH = `${API_BASE_URL}/referrals`;\n\n/**\n * Get or create referral code for current user\n * @returns A promise that resolves to the referral information\n */\nexport const getUserReferralInfo = async (retryAttempt = 0): Promise<ReferralInfo | null> => {\n  try {\n    // Get user data\n    const user = getTelegramUser();\n    if (!user) {\n      console.error('No Telegram user data available');\n      toast.error('User data not available');\n      return null;\n    }\n    \n    console.log(`Getting referral info for Telegram ID: ${user.id}`);\n    \n    // Make the API call\n    const { options, clearTimeout } = createFetchOptions('GET');\n    \n    const response = await fetch((`${REFERRAL_API_PATH}/info/${user.id}`), options);\n    clearTimeout();\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`API Error (${response.status}): ${errorText}`);\n      \n      // If 404, it means the user doesn't have a referral code yet, so we create one\n      if (response.status === 404) {\n        console.log('No referral code found, creating one...');\n        const newReferral = await createReferralCode();\n        if (newReferral) {\n          return newReferral;\n        } else if (retryAttempt === 0) {\n          // Retry once more to get the newly created referral\n          console.log('Retrying to get referral info after creation...');\n          return getUserReferralInfo(1);\n        }\n      }\n      \n      // Only show error toast if we've already retried or it's not a 404\n      if (retryAttempt > 0 || response.status !== 404) {\n        toast.error('Failed to fetch referral information');\n      }\n      return null;\n    }\n    \n    // Parse response\n    const responseText = await response.text();\n    const referralInfo: ReferralInfo = JSON.parse(responseText);\n    \n    console.log('Referral info fetched:', referralInfo);\n    return referralInfo;\n  } catch (error) {\n    console.error('Error fetching referral info:', error);\n    if (retryAttempt === 0) {\n      console.log('Retrying to get referral info after error...');\n      return getUserReferralInfo(1);\n    }\n    toast.error('Failed to fetch referral information');\n    return null;\n  }\n};\n\n/**\n * Create a new referral code for current user\n * @returns A promise that resolves to the referral information\n */\nexport const createReferralCode = async (): Promise<ReferralInfo | null> => {\n  try {\n    // Get user data\n    const user = getTelegramUser();\n    if (!user) {\n      console.error('No Telegram user data available');\n      toast.error('User data not available');\n      return null;\n    }\n    \n    console.log(`Creating referral code for Telegram ID: ${user.id}`);\n    \n    // Make the API call\n    const { options, clearTimeout } = createFetchOptions('POST', { telegram_id: user.id });\n    \n    const response = await fetch(`${REFERRAL_API_PATH}/create`, options);\n    clearTimeout();\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`API Error (${response.status}): ${errorText}`);\n      toast.error('Failed to create referral code');\n      return null;\n    }\n    \n    // Parse response - per the API docs, response is the referral info directly, not wrapped\n    const responseText = await response.text();\n    const referralInfo: ReferralInfo = JSON.parse(responseText);\n    \n    console.log('Referral code created:', referralInfo);\n    return referralInfo;\n  } catch (error) {\n    console.error('Error creating referral code:', error);\n    toast.error('Failed to create referral code');\n    return null;\n  }\n};\n\n/**\n * Get referral statistics for current user\n * @returns A promise that resolves to the referral statistics\n */\nexport const getReferralStats = async (): Promise<ReferralStats | null> => {\n  try {\n    // Get user data\n    const user = getTelegramUser();\n    if (!user) {\n      console.error('No Telegram user data available');\n      toast.error('User data not available');\n      return null;\n    }\n    \n    console.log(`Getting referral stats for Telegram ID: ${user.id}`);\n    \n    // Make the API call\n    const { options, clearTimeout } = createFetchOptions('GET');\n    \n    const response = await fetch(`${REFERRAL_API_PATH}/stats/${user.id}`, options);\n    clearTimeout();\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`API Error (${response.status}): ${errorText}`);\n      toast.error('Failed to fetch referral statistics');\n      return null;\n    }\n    \n    // Parse response\n    const responseText = await response.text();\n    const stats: ReferralStats = JSON.parse(responseText);\n    \n    console.log('Referral stats fetched:', stats);\n    return stats;\n  } catch (error) {\n    console.error('Error fetching referral stats:', error);\n    toast.error('Failed to fetch referral statistics');\n    return null;\n  }\n};\n\n/**\n * Share referral link via Telegram\n * @param referralInfo The referral information\n * @returns A promise that resolves to true if successful\n */\nexport const shareReferralLink = async (referralInfo: ReferralInfo): Promise<boolean> => {\n  try {\n    // Check if the browser supports the Web Share API\n    if (navigator.share) {\n      await navigator.share({\n        title: 'Join me on DD Store',\n        text: 'Use my referral link to join DD Store',\n        url: referralInfo.telegram_deep_link,\n      });\n      toast.success('Referral link shared successfully');\n      return true;\n    } else {\n      // Fallback: copy to clipboard\n      await navigator.clipboard.writeText(referralInfo.telegram_deep_link);\n      toast.success('Referral link copied to clipboard');\n      return true;\n    }\n  } catch (error) {\n    console.error('Error sharing referral link:', error);\n    \n    // Try clipboard fallback if sharing fails\n    try {\n      await navigator.clipboard.writeText(referralInfo.telegram_deep_link);\n      toast.success('Referral link copied to clipboard');\n      return true;\n    } catch (clipboardError) {\n      toast.error('Failed to share referral link');\n      return false;\n    }\n  }\n};\n\n/**\n * Register a referral when a user joins through a referral link\n * @param referralCode The referral code from the URL\n * @returns A promise that resolves to true if successful\n */\nexport const registerReferral = async (referralCode: string): Promise<boolean> => {\n  try {\n    // Get user data\n    const user = getTelegramUser();\n    if (!user) {\n      console.error('No Telegram user data available');\n      // Don't show toast here as this might be called on initial page load\n      return false;\n    }\n    \n    console.log(`Registering referral for user ${user.id} with code ${referralCode}`);\n    \n    // Make the API call\n    const { options, clearTimeout } = createFetchOptions('POST', {\n      telegram_id: user.id,\n      referral_code: referralCode\n    });\n    \n    const response = await fetch(`${REFERRAL_API_PATH}/register`, options);\n    clearTimeout();\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`API Error (${response.status}): ${errorText}`);\n      return false;\n    }\n    \n    // Parse response\n    const responseText = await response.text();\n    const result = JSON.parse(responseText);\n    \n    console.log('Referral registration result:', result);\n    return result.success;\n  } catch (error) {\n    console.error('Error registering referral:', error);\n    return false;\n  }\n};\n\n/**\n * Check if the current user has been referred by someone\n * @returns A promise that resolves to true if the user has been referred\n */\nexport const checkIfUserWasReferred = async (): Promise<boolean> => {\n  try {\n    // Get user data\n    const user = getTelegramUser();\n    if (!user) {\n      console.error('No Telegram user data available');\n      return false;\n    }\n    \n    console.log(`Checking if user ${user.id} was referred`);\n    \n    // Make the API call\n    const { options, clearTimeout } = createFetchOptions('GET');\n    \n    const response = await fetch(`${REFERRAL_API_PATH}/was-referred/${user.id}`, options);\n    clearTimeout();\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`API Error (${response.status}): ${errorText}`);\n      return false;\n    }\n    \n    // Parse response\n    const responseText = await response.text();\n    const result = JSON.parse(responseText);\n    \n    console.log('User referral check result:', result);\n    return result.was_referred || false;\n  } catch (error) {\n    console.error('Error checking if user was referred:', error);\n    return false;\n  }\n}; ","import { API_BASE_URL, TIMEOUTS, cache, CACHE_CONFIG, createFetchOptions } from './config';\nimport { checkUserProfile /*, getUserRank*/ } from './userService';\nimport { fetchOrders } from './orderService';\nimport { fetchProducts } from './productService';\nimport { TelegramUser, UserProfile, StockItem, Order } from './types';\nimport { toast } from 'sonner';\n\n// Interface for the result of fetchInitialData\nexport interface InitialData {\n  profile: UserProfile | null;\n  orders: Order[];\n  products: StockItem[];\n}\n\n/**\n * Fetch multiple API resources in parallel\n * This significantly improves loading performance\n */\nexport const fetchInitialData = async (userId: number): Promise<InitialData> => {\n  console.log('Fetching initial data in parallel...');\n  \n  try {\n    // Start all requests simultaneously\n    const results = await Promise.allSettled([\n      checkUserProfile(userId),\n      fetchOrders(),\n      fetchProducts()\n    ]);\n    \n    // Process results\n    const profile = results[0].status === 'fulfilled' ? results[0].value : null;\n    const orders = results[1].status === 'fulfilled' ? results[1].value : [];\n    const products = results[2].status === 'fulfilled' ? results[2].value : [];\n    \n    // Log success or failures\n    if (results[0].status === 'rejected') {\n      console.error('Failed to fetch profile:', results[0].reason);\n    }\n    if (results[1].status === 'rejected') {\n      console.error('Failed to fetch orders:', results[1].reason);\n    }\n    if (results[2].status === 'rejected') {\n      console.error('Failed to fetch products:', results[2].reason);\n    }\n    \n    return { profile, orders, products };\n  } catch (error) {\n    console.error('Error in parallel fetch:', error);\n    toast.error('Error loading data. Some features may be limited.');\n    \n    // Return empty data to prevent app crashes\n    return {\n      profile: null,\n      orders: [],\n      products: []\n    };\n  }\n};\n\n/**\n * Prefetch data in the background\n * Call this early in the app lifecycle to warm up the cache\n */\nexport const prefetchData = async (userId: number): Promise<void> => {\n  try {\n    // Start prefetching in the background\n    fetchInitialData(userId)\n      .then(() => console.log('Background prefetch completed'))\n      .catch(error => console.error('Background prefetch failed:', error));\n      \n    // This function returns immediately, not waiting for the prefetch to complete\n    return;\n  } catch (error) {\n    console.error('Error starting prefetch:', error);\n  }\n};\n\n/**\n * Clear all cached data\n * Use this when you want to force fresh data from the API\n */\nexport const clearAllCaches = (): void => {\n  cache.clear();\n  console.log('All API caches cleared');\n};\n\n/**\n * Refresh specific data for a user\n */\nexport const refreshUserData = async (userId: number): Promise<void> => {\n  try {\n    // Clear relevant caches\n    const profileCacheKey = `profile_${userId}`;\n    const ordersCacheKey = `orders_${userId}`;\n    // const rankCacheKey = `rank_${userId}`;\n    \n    cache.invalidate(profileCacheKey);\n    cache.invalidate(ordersCacheKey);\n    // cache.invalidate(rankCacheKey);\n    cache.invalidate('products');\n    \n    // Fetch fresh data\n    await fetchInitialData(userId);\n    \n    toast.success('Data refreshed successfully');\n  } catch (error) {\n    console.error('Error refreshing data:', error);\n    toast.error('Failed to refresh data');\n  }\n}; ","import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { getRandomAvatarEmoji } from '../utils/emojiUtils';\nimport { checkUserProfile, UserProfile, TelegramUser } from '../services/api';\nimport { getTelegramUser as getTelegramUserFromAPI } from '../services/api';\nimport { getTelegramUser as getTelegramUserFromUtils } from '../utils/telegramUtils';\nimport { toast } from 'sonner';\nimport { cache } from '../services/api/config';\nimport { prefetchData, refreshUserData as refreshAllUserData } from '../services/api/optimizedService';\n\ninterface UserContextType {\n  username: string;\n  displayName: string;\n  telegramUser: TelegramUser | null;\n  profile: UserProfile | null;\n  avatarEmoji: string;\n  loading: boolean;\n  setUsername: (username: string) => void;\n  setAvatarEmoji: (emoji: string) => void;\n  updateTelegramUser: (user: TelegramUser) => void;\n  refreshUserData: () => Promise<void>;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport const UserProvider: React.FC<{children: ReactNode}> = ({ children }) => {\n  const [telegramUser, setTelegramUser] = useState<TelegramUser | null>(null);\n  const [username, setUsername] = useState<string>('');\n  const [displayName, setDisplayName] = useState<string>('');\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [avatarEmoji, setAvatarEmoji] = useState(getRandomAvatarEmoji());\n  const [loading, setLoading] = useState(true);\n  const [initAttempted, setInitAttempted] = useState(false);\n\n  // Function to update Telegram user data\n  const updateTelegramUser = useCallback((user: TelegramUser) => {\n    if (!user) return;\n    \n    console.log('Updating Telegram user data:', user);\n    setTelegramUser(user);\n    \n    // Update username if it's available\n    if (user.username) {\n      setUsername(user.username);\n    } else {\n      // If no username, use ID as fallback\n      setUsername(`user_${user.id}`);\n    }\n    \n    // Update display name\n    let fullName = user.first_name;\n    if (user.last_name) {\n      fullName += ` ${user.last_name}`;\n    }\n    setDisplayName(fullName);\n    \n    // Store user data in localStorage for recovery\n    try {\n      localStorage.setItem('telegramUser', JSON.stringify(user));\n      // Remove the old key for consistency\n      if (localStorage.getItem('telegramUserData')) {\n        localStorage.removeItem('telegramUserData');\n      }\n    } catch (e) {\n      console.warn('Failed to store user data in localStorage');\n    }\n    \n    // Start prefetching data in the background\n    const usernameToUse = user.username || `user_${user.id}`;\n    prefetchData(usernameToUse, user.id)\n      .then(() => {\n        // Update profile after prefetch\n        updateUserProfile(usernameToUse, user.id);\n      })\n      .catch(error => {\n        console.error('Error during prefetch:', error);\n        // Still try to update profile even if prefetch fails\n        updateUserProfile(usernameToUse, user.id);\n      });\n  }, []);\n  \n  // Function to update user profile\n  const updateUserProfile = useCallback(async (usernameToUse: string, userId: number) => {\n    try {\n      console.log('Checking user profile...');\n      const userProfile = await checkUserProfile(usernameToUse, userId);\n      console.log('User profile loaded');\n      setProfile(userProfile);\n    } catch (error: any) {\n      console.error('Error fetching user profile:', error);\n      \n      // Set a default profile\n      const defaultProfile = {\n        telegram_username: usernameToUse,\n        rank: 1,\n        total_orders: 0\n      };\n      console.log('Using default profile');\n      setProfile(defaultProfile);\n    }\n  }, []);\n\n  // Function to refresh user data\n  const refreshUserData = useCallback(async () => {\n    try {\n      setLoading(true);\n      \n      if (telegramUser) {\n        const usernameToUse = telegramUser.username || `user_${telegramUser.id}`;\n        await refreshAllUserData(usernameToUse, telegramUser.id);\n        \n        // Update profile after refresh\n        await updateUserProfile(usernameToUse, telegramUser.id);\n      } else {\n        toast.error('No user data available for refresh');\n      }\n    } catch (error: any) {\n      console.error('Error refreshing user data:', error);\n      toast.error(`Error refreshing data: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }, [telegramUser, updateUserProfile]);\n\n  // Function to log raw Telegram data for debugging\n  const logRawTelegramData = useCallback(() => {\n    console.log('DEBUG - RAW TELEGRAM DATA:');\n    \n    // Log window.Telegram if available\n    if (window.Telegram) {\n      console.log('window.Telegram exists');\n      \n      if (window.Telegram.WebApp) {\n        console.log('window.Telegram.WebApp exists');\n        console.log('initData:', window.Telegram.WebApp.initData);\n        \n        if (window.Telegram.WebApp.initDataUnsafe) {\n          console.log('initDataUnsafe contents:', JSON.stringify(window.Telegram.WebApp.initDataUnsafe || {}, null, 2));\n          \n          // Display raw user object if available\n          if (window.Telegram.WebApp.initDataUnsafe.user) {\n            const rawUser = window.Telegram.WebApp.initDataUnsafe.user;\n            console.log('RAW USER OBJECT:', rawUser);\n            return rawUser;\n          } else {\n            console.log('No user data in initDataUnsafe');\n          }\n        } else {\n          console.log('No initDataUnsafe available');\n        }\n        \n        // Try to parse initData if it exists\n        if (window.Telegram.WebApp.initData) {\n          try {\n            const params = new URLSearchParams(window.Telegram.WebApp.initData);\n            console.log('Parsed initData params:', Array.from(params.entries()));\n            \n            if (params.has('user')) {\n              try {\n                const userData = JSON.parse(decodeURIComponent(params.get('user') || '{}'));\n                console.log('User data parsed from initData:', userData);\n                return userData;\n              } catch (e) {\n                console.error('Error parsing user data from initData:', e);\n              }\n            } else {\n              console.log('No user param in initData');\n            }\n          } catch (e) {\n            console.error('Error parsing initData:', e);\n          }\n        } else {\n          console.log('initData is empty');\n        }\n      } else {\n        console.log('No WebApp in Telegram object');\n      }\n    } else {\n      console.log('No Telegram object in window');\n    }\n    \n    return null;\n  }, []);\n\n  // Initialize user data\n  useEffect(() => {\n    if (initAttempted) return;\n    \n    const initializeUserData = async () => {\n      try {\n        setLoading(true);\n        setInitAttempted(true);\n        \n        console.log('Initializing user data...');\n        \n        // APPROACH 1: Try to get user data from Telegram WebApp\n        // This is the recommended approach for Mini Apps\n        const telegramUserData = getTelegramUserFromUtils();\n        \n        if (telegramUserData) {\n          console.log('User data retrieved from Telegram WebApp:', telegramUserData);\n          updateTelegramUser(telegramUserData);\n          setLoading(false);\n          return;\n        }\n        \n        // APPROACH 2: Try to get user data from localStorage\n        try {\n          const storedUser = localStorage.getItem('telegramUser') || localStorage.getItem('telegramUserData');\n          if (storedUser) {\n            const userData = JSON.parse(storedUser) as TelegramUser;\n            console.log('Using stored user data:', userData);\n            updateTelegramUser(userData);\n            setLoading(false);\n            return;\n          }\n        } catch (e) {\n          console.warn('Failed to retrieve user data from localStorage');\n        }\n        \n        // APPROACH 3: Try to get user data from API\n        try {\n          const apiUserData = await getTelegramUserFromAPI();\n          if (apiUserData) {\n            console.log('User data retrieved from API:', apiUserData);\n            updateTelegramUser(apiUserData);\n            setLoading(false);\n            return;\n          }\n        } catch (apiError) {\n          console.error('Error getting user data from API:', apiError);\n        }\n        \n        // If we reach here, we couldn't get user data\n        console.log('No user data available, using default values');\n        setUsername('guest');\n        setDisplayName('Guest User');\n        setLoading(false);\n      } catch (error) {\n        console.error('Error initializing user data:', error);\n        setUsername('guest');\n        setDisplayName('Guest User');\n        setLoading(false);\n      }\n    };\n    \n    initializeUserData();\n  }, [updateTelegramUser, initAttempted]);\n\n  return (\n    <UserContext.Provider value={{\n      username,\n      displayName,\n      telegramUser,\n      profile,\n      avatarEmoji,\n      loading,\n      setUsername,\n      setAvatarEmoji,\n      updateTelegramUser,\n      refreshUserData\n    }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = (): UserContextType => {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n","import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { toast } from 'sonner';\n\n// This matches more closely what our API structure needs\nexport interface CartItem {\n  productId: string; // SKU from the API\n  name: string;\n  color: string;\n  size: string;\n  price: number;\n  sale_price?: number;\n  quantity: number;\n  item_type?: 'stock' | 'preorder';\n  // For preorder items\n  dewu_url?: string;\n  category_type?: string;\n  delivery_type?: string; // For backward compatibility\n  shipping_type?: string; // New API expects shipping_type\n  price_cny?: number; // Price in Chinese Yuan for preorder items\n  // Image URL for the item\n  photo_url?: string;\n}\n\n// For compatibility with existing code\ninterface Product {\n  id: string; // SKU\n  name: string;\n  color: string;\n  sizes: string[];\n  price: number;\n  quantity: number;\n  photo_url?: string;\n}\n\n// Preorder item interface\ninterface PreorderItem {\n  dewu_url: string;\n  size: string;\n  category_type: string;\n  delivery_type?: string; // For backward compatibility\n  shipping_type?: string; // New API expects shipping_type\n  price: number;\n  price_cny?: number;\n  name: string;\n  photo_url?: string;\n}\n\ninterface CartContextType {\n  items: CartItem[];\n  addToCart: (product: Product, size: string) => void;\n  addPreorderToCart: (preorderItem: PreorderItem) => void;\n  removeFromCart: (productId: string, size: string) => void;\n  clearCart: () => void;\n  itemCount: number;\n  totalPrice: number;\n  updateQuantity: (productId: string, size: string, quantity: number) => void;\n  getItemQuantity: (productId: string, size: string) => number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport const CartProvider: React.FC<{children: ReactNode}> = ({ children }) => {\n  const [items, setItems] = useState<CartItem[]>([]);\n  \n  // Calculate total item count and price\n  const itemCount = items.reduce((total, item) => total + item.quantity, 0);\n  const totalPrice = items.reduce((total, item) => total + (item.price * item.quantity), 0);\n\n  // Load cart from localStorage on component mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        setItems(JSON.parse(savedCart));\n      } catch (e) {\n        console.error('Failed to parse cart from localStorage:', e);\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(items));\n  }, [items]);\n\n  const addToCart = (product: Product, size: string) => {\n    setItems(currentItems => {\n      // Check if this product and size is already in the cart\n      const existingItemIndex = currentItems.findIndex(\n        item => item.productId === product.id && item.size === size\n      );\n\n      if (existingItemIndex >= 0) {\n        // If already in cart, increase quantity\n        const updatedItems = [...currentItems];\n        updatedItems[existingItemIndex].quantity += 1;\n        // Removed toast notification as requested\n        return updatedItems;\n      } else {\n        // Otherwise add new item\n        // Removed toast notification as requested\n        return [...currentItems, {\n          productId: product.id,\n          name: product.name,\n          color: product.color,\n          size,\n          price: product.price,\n          quantity: 1,\n          item_type: 'stock',\n          photo_url: product.photo_url\n        }];\n      }\n    });\n  };\n\n  const addPreorderToCart = (preorderItem: PreorderItem) => {\n    // Generate a unique ID for preorder items using the URL and size\n    const preorderId = `preorder-${btoa(preorderItem.dewu_url)}-${preorderItem.size}`;\n    \n    setItems(currentItems => {\n      // Check if this preorder item is already in the cart\n      const existingItemIndex = currentItems.findIndex(\n        item => item.productId === preorderId\n      );\n\n      if (existingItemIndex >= 0) {\n        // If already in cart, increase quantity\n        const updatedItems = [...currentItems];\n        updatedItems[existingItemIndex].quantity += 1;\n        return updatedItems;\n      } else {\n        // Otherwise add new preorder item\n        return [...currentItems, {\n          productId: preorderId,\n          name: preorderItem.name,\n          color: '',\n          size: preorderItem.size,\n          price: preorderItem.price,\n          quantity: 1,\n          item_type: 'preorder',\n          dewu_url: preorderItem.dewu_url,\n          category_type: preorderItem.category_type,\n          delivery_type: preorderItem.delivery_type, // Keep for backward compatibility\n          shipping_type: preorderItem.shipping_type, // New API field\n          price_cny: preorderItem.price_cny,\n          photo_url: preorderItem.photo_url\n        }];\n      }\n    });\n  };\n\n  const removeFromCart = (productId: string, size: string) => {\n    setItems(currentItems => {\n      const existingItemIndex = currentItems.findIndex(\n        item => item.productId === productId && item.size === size\n      );\n\n      if (existingItemIndex >= 0) {\n        const updatedItems = [...currentItems];\n        if (updatedItems[existingItemIndex].quantity > 1) {\n          // If quantity > 1, just decrease quantity\n          updatedItems[existingItemIndex].quantity -= 1;\n        } else {\n          // Otherwise remove the item\n          updatedItems.splice(existingItemIndex, 1);\n        }\n        return updatedItems;\n      }\n      return currentItems;\n    });\n  };\n\n  const updateQuantity = (productId: string, size: string, quantity: number) => {\n    setItems(currentItems => {\n      const existingItemIndex = currentItems.findIndex(\n        item => item.productId === productId && item.size === size\n      );\n\n      if (existingItemIndex >= 0) {\n        const updatedItems = [...currentItems];\n        if (quantity <= 0) {\n          // Remove item if quantity is 0 or less\n          updatedItems.splice(existingItemIndex, 1);\n        } else {\n          // Update quantity\n          updatedItems[existingItemIndex].quantity = quantity;\n        }\n        return updatedItems;\n      } else if (quantity > 0) {\n        // If item doesn't exist but quantity > 0, we can't add it without product details\n        console.warn('Attempted to update quantity for non-existent item');\n      }\n      return currentItems;\n    });\n  };\n\n  const getItemQuantity = (productId: string, size: string): number => {\n    const item = items.find(item => item.productId === productId && item.size === size);\n    return item ? item.quantity : 0;\n  };\n\n  const clearCart = () => {\n    setItems([]);\n    toast.info('Cart cleared');\n  };\n\n  return (\n    <CartContext.Provider value={{\n      items,\n      addToCart,\n      addPreorderToCart,\n      removeFromCart,\n      clearCart,\n      itemCount,\n      totalPrice,\n      updateQuantity,\n      getItemQuantity\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nexport const useCart = (): CartContextType => {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n","import { useEffect, useState } from 'react';\nimport { registerReferral } from '@/services/api';\n\n/**\n * Hook to handle referral detection and registration\n */\nexport const useReferral = () => {\n  const [referralCode, setReferralCode] = useState<string | null>(null);\n  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n  const [isProcessed, setIsProcessed] = useState<boolean>(false);\n  \n  // On mount, check URL for referral code\n  useEffect(() => {\n    const detectReferralCode = () => {\n      try {\n        // Get current URL\n        const url = new URL(window.location.href);\n        \n        // Check for referral code in search params\n        const code = url.searchParams.get('ref');\n        \n        // Also check for \"start\" parameter with ref_ prefix (Telegram deep link format)\n        const startParam = url.searchParams.get('start');\n        if (startParam && startParam.startsWith('ref_')) {\n          const telegramCode = startParam.substring(4); // Remove 'ref_' prefix\n          if (telegramCode) {\n            console.log('Referral code detected from Telegram deep link:', telegramCode);\n            setReferralCode(telegramCode);\n            // Remove the start parameter from the URL without refreshing the page\n            url.searchParams.delete('start');\n            window.history.replaceState({}, document.title, url.toString());\n            return;\n          }\n        }\n        \n        // Check path for /ref/CODE format\n        const pathParts = window.location.pathname.split('/');\n        if (pathParts.length >= 3 && pathParts[1] === 'ref') {\n          const pathCode = pathParts[2];\n          if (pathCode) {\n            console.log('Referral code detected from path:', pathCode);\n            setReferralCode(pathCode);\n            // Remove the referral code from the path without refreshing the page\n            const newPath = window.location.pathname.replace(/\\/ref\\/[^\\/]+/, '');\n            window.history.replaceState({}, document.title, newPath + window.location.search);\n            return;\n          }\n        }\n        \n        if (code) {\n          console.log('Referral code detected from query parameter:', code);\n          setReferralCode(code);\n          \n          // Remove the referral code from the URL without refreshing the page\n          url.searchParams.delete('ref');\n          window.history.replaceState({}, document.title, url.toString());\n        }\n      } catch (error) {\n        console.error('Error detecting referral code:', error);\n      }\n    };\n    \n    detectReferralCode();\n  }, []);\n  \n  // When referral code is detected, register it\n  useEffect(() => {\n    const processReferral = async () => {\n      if (!referralCode || isProcessed || isProcessing) return;\n      \n      setIsProcessing(true);\n      try {\n        // Store in local storage first to prevent duplicate processing\n        const processedReferrals = JSON.parse(localStorage.getItem('processedReferrals') || '[]');\n        \n        // If this referral was already processed, skip\n        if (processedReferrals.includes(referralCode)) {\n          console.log('Referral already processed:', referralCode);\n          setIsProcessed(true);\n          setIsProcessing(false);\n          return;\n        }\n        \n        // Call the API to register the referral\n        const success = await registerReferral(referralCode);\n        \n        if (success) {\n          console.log('Referral registered successfully');\n          \n          // Add to processed referrals\n          processedReferrals.push(referralCode);\n          localStorage.setItem('processedReferrals', JSON.stringify(processedReferrals));\n        }\n        \n        setIsProcessed(true);\n      } catch (error) {\n        console.error('Error processing referral:', error);\n      } finally {\n        setIsProcessing(false);\n      }\n    };\n    \n    processReferral();\n  }, [referralCode, isProcessed, isProcessing]);\n  \n  return {\n    referralCode,\n    isProcessing,\n    isProcessed\n  };\n};\n\nexport default useReferral; ","import { useState, useEffect } from 'react';\nimport { checkUserExists } from '@/services/api';\nimport { getTelegramUser } from '@/services/api/userService';\nimport { toast } from 'sonner';\n\ninterface UseRegistrationOptions {\n  onNewUser?: (isNew: boolean) => void;\n}\n\ninterface ApiResponse {\n  status?: string;\n  message?: string;\n}\n\n/**\n * Add DD coins to the user's account\n * @param userId The user's Telegram ID\n * @param reasonCode The reason code for adding DD coins\n * @returns A promise that resolves when the DD coins have been added\n */\nconst addDDCoinsWelcomeBonus = async (userId: number): Promise<boolean> => {\n  try {\n    const response = await fetch('https://v2786182.hosted-by-vdsina.ru/api/v1/users/dd-coins', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        telegram_user_id: userId,\n        reason_code: 'WELCOME'\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Error adding DD coins: ${errorText}`);\n      return false;\n    }\n\n    const data = await response.json();\n    console.log('DD coins added successfully:', data);\n    return true;\n  } catch (error) {\n    console.error('Error adding DD coins:', error);\n    return false;\n  }\n};\n\n/**\n * Show a welcome bonus notification in the center of the screen\n */\nconst showWelcomeBonusNotification = () => {\n  // Delay showing the notification\n  setTimeout(() => {\n    // Create and append the notification element\n    const notification = document.createElement('div');\n    notification.className = 'fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-black text-white p-6 rounded-lg shadow-lg z-50 w-80 text-center';\n    notification.innerHTML = `\n      <div class=\"flex flex-col items-center\">\n        <div class=\"text-yellow-400 text-xl mb-2\">🎁 Welcome Bonus!</div>\n        <div class=\"text-lg font-bold mb-2\">500 DD Coins Added</div>\n        <div class=\"text-sm\">Your welcome bonus has been added to your account.</div>\n      </div>\n    `;\n    document.body.appendChild(notification);\n\n    // Remove the notification after 4 seconds\n    setTimeout(() => {\n      notification.classList.add('opacity-0', 'transition-opacity', 'duration-500');\n      setTimeout(() => {\n        document.body.removeChild(notification);\n      }, 500);\n    }, 4000);\n  }, 1500); // Delay showing the notification by 1.5 seconds\n};\n\n/**\n * Hook to handle user registration status and processing\n */\nexport const useRegistration = (options?: UseRegistrationOptions) => {\n  const [isNewUser, setIsNewUser] = useState<boolean>(false);\n  const [isChecking, setIsChecking] = useState<boolean>(false);\n  const [hasChecked, setHasChecked] = useState<boolean>(false);\n  \n  useEffect(() => {\n    const checkUserRegistration = async () => {\n      if (hasChecked || isChecking) return;\n      \n      setIsChecking(true);\n      \n      try {\n        // Get the Telegram user\n        const user = getTelegramUser();\n        if (!user) {\n          console.log('No Telegram user available, cannot check registration status');\n          setIsChecking(false);\n          return;\n        }\n        \n        // Check if user exists in the API\n        const checkResponse = await checkUserExists(true); // Return full response\n        console.log('User check response:', checkResponse);\n        \n        // Handle different response statuses\n        if (checkResponse && typeof checkResponse === 'object') {\n          const response = checkResponse as ApiResponse;\n          \n          // Handle new user case\n          if (response.status === 'created') {\n            console.log('New user created');\n            setIsNewUser(true);\n            \n            // Call the onNewUser callback if provided\n            if (options?.onNewUser) {\n              options.onNewUser(true);\n            }\n            \n            // Add welcome bonus for new users\n            const bonusAdded = await addDDCoinsWelcomeBonus(user.id);\n            if (bonusAdded) {\n              toast.success('Добро пожаловать! 500 DD coins добавлены на ваш счет в качестве бонуса!', {\n                duration: 6000,\n                id: 'welcome-bonus'\n              });\n              showWelcomeBonusNotification();\n            }\n          }\n          // Handle updated user case\n          else if (response.status === 'updated') {\n            console.log('User updated');\n            \n            // Add welcome bonus for updated users too\n            const bonusAdded = await addDDCoinsWelcomeBonus(user.id);\n            if (bonusAdded) {\n              toast.success('С возвращением! 500 DD coins добавлены на ваш счет!', {\n                duration: 6000,\n                id: 'welcome-back-bonus'\n              });\n              showWelcomeBonusNotification();\n            }\n          } else {\n            setIsNewUser(false);\n          }\n        } else if (checkResponse === false) {\n          // Handle new user (backward compatibility)\n          console.log('New user detected (boolean response)');\n          setIsNewUser(true);\n          \n          // Call the onNewUser callback if provided\n          if (options?.onNewUser) {\n            options.onNewUser(true);\n          }\n          \n          // Add welcome bonus for new users\n          const bonusAdded = await addDDCoinsWelcomeBonus(user.id);\n          if (bonusAdded) {\n            toast.success('Добро пожаловать! 500 DD coins добавлены на ваш счет в качестве бонуса!', {\n              duration: 6000,\n              id: 'welcome-bonus'\n            });\n            showWelcomeBonusNotification();\n          }\n        } else {\n          setIsNewUser(false);\n        }\n        \n        setHasChecked(true);\n      } catch (error) {\n        console.error('Error checking user registration:', error);\n      } finally {\n        setIsChecking(false);\n      }\n    };\n    \n    checkUserRegistration();\n  }, [hasChecked, isChecking, options]);\n  \n  return {\n    isNewUser,\n    isChecking,\n    hasChecked\n  };\n};\n\nexport default useRegistration; ","export default \"__VITE_ASSET__DD8S$x_P__\"","export default \"__VITE_ASSET__BT9VmGaE__\"","export default \"__VITE_ASSET__xKwLQmwz__\"","export default \"__VITE_ASSET__CFtXzjf6__\"","export default \"__VITE_ASSET__oIAFCLbW__\"","export default \"__VITE_ASSET__BI3pfTEQ__\"","export default \"__VITE_ASSET__D$B$jYVY__\"","export default \"__VITE_ASSET__B62wRg6Z__\"","export default \"__VITE_ASSET__C83Z$dNv__\"","export default \"__VITE_ASSET__CZglLt8a__\"","import React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport PageLayout from '@/components/PageLayout';\nimport UserAvatar from '@/components/UserAvatar';\nimport { ArrowRight } from 'lucide-react';\nimport { useUser } from '@/contexts/UserContext';\nimport { getRandomBannerEmoji } from '@/utils/emojiUtils';\nimport { initTelegramWebApp, hapticSelection } from '@/utils/telegramUtils';\nimport { getDDCoinsBalance, getTelegramUser } from '@/services/api';\nimport { toast } from 'sonner';\nimport LoadingSpinner from '@/components/LoadingSpinner';\nimport BannerSwiper from '@/components/BannerSwiper';\nimport DDManagerCard from '@/components/DDManagerCard';\nimport ProductCard from '@/components/ProductCard';\n\n// Import banner images\nimport mainBanner from '@/assets/jointgbanner.webp';\nimport csBanner from '@/assets/buycatsofabanner.webp';\nimport ddCoinsBanner from '@/assets/ddcoinsbanner.webp';\nimport calculatorBanner from '@/assets/calcbanner.webp';\nimport shopBanner from '@/assets/gotoshopbanner.webp';\nimport sneakersBanner from '@/assets/sneakers_category_banner.webp';\nimport clothesBanner from '@/assets/clothes_category_banner.webp';\nimport jeansBanner from '@/assets/jeans_category_banner.webp';\nimport beltBanner from '@/assets/belt_category_banner.webp';\n\nconst Home: React.FC = () => {\n  const { username, displayName, telegramUser, avatarEmoji, updateTelegramUser } = useUser();\n  const navigate = useNavigate();\n  const [ddCoinsBalance, setDDCoinsBalance] = useState<number>(0);\n  const [isLoadingDDCoins, setIsLoadingDDCoins] = useState<boolean>(false);\n\n  // Initialize Telegram WebApp, get user data, and fetch DD coins\n  useEffect(() => {\n    const initApp = async () => {\n      try {\n        // Initialize Telegram WebApp\n        initTelegramWebApp();\n        \n        // Get Telegram user data\n        const user = getTelegramUser();\n        if (user) {\n          console.log('Telegram user found on Home page:', user);\n          // Update the user context with Telegram user data\n          updateTelegramUser(user);\n          \n          // Fetch DD coins balance\n          await fetchDDCoins(user.id);\n        }\n      } catch (error) {\n        console.error('Error initializing Telegram on Home page:', error);\n      }\n    };\n    \n    initApp();\n  }, [updateTelegramUser]);\n\n  // Fetch DD coins balance\n  const fetchDDCoins = async (userId: number) => {\n    if (!userId) return;\n    \n    setIsLoadingDDCoins(true);\n    try {\n      console.log(`Fetching DD coins for user ID: ${userId}`);\n      const balance = await getDDCoinsBalance();\n      console.log('Home page: DD coins balance received:', balance);\n      setDDCoinsBalance(balance);\n    } catch (error) {\n      console.error('Error fetching DD coins balance:', error);\n      toast.error('Failed to load DD coins balance');\n    } finally {\n      setIsLoadingDDCoins(false);\n    }\n  };\n\n  // Banner data\n  const banners = [\n    {\n      image: mainBanner,\n      link: 'https://t.me/dd_concept',\n      external: true\n    },\n    {\n      image: csBanner, \n      link: '/shop?brand=Cat%26Sofa'\n    },\n    {\n      image: ddCoinsBanner,\n      link: '/profile'\n    }\n  ];\n\n  // Get the display username - prioritize Telegram username if available\n  const displayUsername = telegramUser?.username || username;\n  \n  // Handle profile click with haptic feedback\n  const handleProfileClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    \n    // Trigger selection haptic feedback\n    hapticSelection();\n    \n    // Navigate to profile page\n    navigate('/profile');\n  };\n\n  return (\n    <PageLayout fullHeight className=\"p-4 pb-20\">\n      <header className=\"mb-6\">\n        {/* User profile section - clickable to navigate to profile */}\n        <Link to=\"/profile\" className=\"flex items-center gap-3 hover:opacity-90 transition-opacity\" onClick={handleProfileClick}>\n          <UserAvatar \n            user={telegramUser}\n            emoji={avatarEmoji} \n            size=\"md\" \n            className=\"hover-lift\"\n          />\n          <div>\n            <h1 className=\"text-2xl font-semibold\">Привет, {displayName}!</h1>\n            {displayUsername && (\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                @{displayUsername}\n              </p>\n            )}\n          </div>\n        </Link>\n      </header>\n\n      <section className=\"mb-8 animate-slide-up\">\n        <BannerSwiper banners={banners} />\n      </section>\n\n      {/* Three blocks with updated layout */}\n      <section className=\"mb-8\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          {/* Order Block - takes 1 column and full height */}\n          <Link \n            to=\"/shop\" \n            className=\"bg-cover bg-center rounded-lg p-4 h-full col-span-1 shadow-sm hover-lift flex flex-col justify-end\"\n            style={{ backgroundImage: `url(${shopBanner})` }}\n          >\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-xl font-medium text-white\">Заказать</h3>\n              <ArrowRight size={20} className=\"text-white\" />\n            </div>\n          </Link>\n\n          {/* Right column blocks stacked vertically */}\n          <div className=\"col-span-1 space-y-4\">\n            {/* DD Coins Block */}\n            <Link \n              to=\"/profile\" \n              className=\"bg-telegram-blue text-white dark:bg-telegram-blue rounded-lg p-4 shadow-sm hover:shadow-md transition-all duration-300 transform hover:-translate-y-1 flex flex-col justify-between\"\n            >\n              <h3 className=\"font-medium text-white\">$DD COINS:</h3>\n              <div className=\"text-4xl font-bold mb-1 text-white\">\n                {isLoadingDDCoins ? (\n                  <div className=\"flex items-center justify-center h-10\">\n                    <LoadingSpinner size=\"md\" className=\"text-white\" />\n                  </div>\n                ) : (\n                  ddCoinsBalance || 0\n                )}\n              </div>\n              <p className=\"text-xs text-white/80\">Баланс и реферальная программа</p>\n              <div className=\"flex justify-end mt-1\">\n                <ArrowRight size={20} className=\"text-white\" />\n              </div>\n            </Link>\n\n            {/* DD Manager Block */}\n            <DDManagerCard />\n          </div>\n        </div>\n        \n        {/* Delivery Calculator Button - Full Width */}\n        <Link \n          to=\"/calculator\" \n          className=\"w-full rounded-lg overflow-hidden relative hover-lift h-16 block mt-4\"\n          style={{ \n            backgroundImage: `url(${calculatorBanner})`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center'\n          }}\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent\"></div>\n          <div className=\"absolute inset-0 flex items-center p-4\">\n            <h3 className=\"font-medium text-white text-lg flex-1 text-center\">Рассчитать доставку</h3>\n            <ArrowRight className=\"text-white\" size={20} />\n          </div>\n        </Link>\n      </section>\n\n      <section className=\"mb-8\">\n        <h2 className=\"text-xl font-medium mb-4\">Что купить?</h2>\n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <Link \n            to=\"/shop?category=sneakers\" \n            className=\"rounded-lg overflow-hidden relative hover-lift aspect-[5/3]\"\n            style={{ \n              backgroundImage: `url(${sneakersBanner})`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent\"></div>\n            <div className=\"absolute bottom-0 w-full p-4 flex justify-between items-center\">\n              <h3 className=\"font-medium text-white\">Кроссовки</h3>\n              <ArrowRight className=\"text-white\" size={20} />\n            </div>\n          </Link>\n          <Link \n            to=\"/shop?category=tops\" \n            className=\"rounded-lg overflow-hidden relative hover-lift aspect-[5/3]\"\n            style={{ \n              backgroundImage: `url(${clothesBanner})`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent\"></div>\n            <div className=\"absolute bottom-0 w-full p-4 flex justify-between items-center\">\n              <h3 className=\"font-medium text-white\">Верх</h3>\n              <ArrowRight className=\"text-white\" size={20} />\n            </div>\n          </Link>\n          <Link \n            to=\"/shop?category=bottoms\" \n            className=\"rounded-lg overflow-hidden relative hover-lift aspect-[5/3]\"\n            style={{ \n              backgroundImage: `url(${jeansBanner})`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent\"></div>\n            <div className=\"absolute bottom-0 w-full p-4 flex justify-between items-center\">\n              <h3 className=\"font-medium text-white\">Низ</h3>\n              <ArrowRight className=\"text-white\" size={20} />\n            </div>\n          </Link>\n          <Link \n            to=\"/shop?category=accessories\" \n            className=\"rounded-lg overflow-hidden relative hover-lift aspect-[5/3]\"\n            style={{ \n              backgroundImage: `url(${beltBanner})`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center'\n            }}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent\"></div>\n            <div className=\"absolute bottom-0 w-full p-4 flex justify-between items-center\">\n              <h3 className=\"font-medium text-white\">Аксессуары</h3>\n              <ArrowRight className=\"text-white\" size={20} />\n            </div>\n          </Link>\n        </div>\n      </section>\n\n      {/* <section className=\"mb-10\">\n        <h2 className=\"text-xl font-medium mb-4\">Latest News</h2>\n        <div className=\"space-y-4\">\n          <div className=\"bg-white dark:bg-sidebar-accent/50 p-4 rounded-lg shadow-sm animate-slide-up\">\n            <h3 className=\"font-medium\">New Collection Arriving Soon</h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Get ready for our summer collection dropping next week!</p>\n          </div>\n          <div className=\"bg-white dark:bg-sidebar-accent/50 p-4 rounded-lg shadow-sm animate-slide-up\" style={{ animationDelay: '0.1s' }}>\n            <h3 className=\"font-medium\">Free Shipping Weekend</h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Enjoy free shipping on all orders this weekend</p>\n          </div>\n          <div className=\"bg-white dark:bg-sidebar-accent/50 p-4 rounded-lg shadow-sm animate-slide-up\" style={{ animationDelay: '0.2s' }}>\n            <h3 className=\"font-medium\">Member Exclusive Discounts</h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Members get 15% off all accessories this month</p>\n          </div>\n          <div className=\"bg-white dark:bg-sidebar-accent/50 p-4 rounded-lg shadow-sm animate-slide-up\" style={{ animationDelay: '0.3s' }}>\n            <h3 className=\"font-medium\">New Store Opening</h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">Visit our new flagship store in Moscow starting June 1st</p>\n          </div>\n        </div>\n      </section> */}\n    </PageLayout>\n  );\n};\n\nexport default Home;\n","/**\n * Sorts sizes from smaller to larger (numeric sizes in ascending order, string sizes from XS to XXL)\n * @param sizes Array of size strings to sort\n * @returns Sorted array of sizes\n */\nexport const sortSizes = (sizes: string[]): string[] => {\n  // Helper function to determine if a size is numeric\n  const isNumeric = (size: string): boolean => /^[\\d.,]+$/.test(size);\n  \n  // Helper function to convert letter sizes to a numeric value for sorting\n  const getLetterSizeValue = (size: string): number => {\n    const sizeMap: Record<string, number> = {\n      'XXXS': 1, 'XXS': 2, 'XS': 3, 'S': 4, 'M': 5, 'L': 6, 'XL': 7, 'XXL': 8, 'XXXL': 9,\n      '3XS': 1, '2XS': 2, '3XL': 9\n    };\n    \n    // Normalize size by removing spaces and converting to uppercase\n    const normalizedSize = size.toUpperCase().trim();\n    \n    // Return the mapped value or a high number (to put unknown sizes at the end)\n    return sizeMap[normalizedSize] || 999;\n  };\n  \n  // Separate numeric and non-numeric sizes\n  const numericSizes = sizes.filter(isNumeric);\n  const letterSizes = sizes.filter(size => !isNumeric(size));\n  \n  // Sort numeric sizes numerically (ascending)\n  const sortedNumericSizes = numericSizes.sort((a, b) => parseFloat(a) - parseFloat(b));\n  \n  // Sort letter sizes by their mapped value\n  const sortedLetterSizes = letterSizes.sort((a, b) => getLetterSizeValue(a) - getLetterSizeValue(b));\n  \n  // Return numeric sizes first, then letter sizes\n  return [...sortedNumericSizes, ...sortedLetterSizes];\n}; ","import React, { useState, useEffect, useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Filter, Search, ShoppingCart, X, Tag } from 'lucide-react';\nimport { Link, useSearchParams, useNavigate } from 'react-router-dom';\nimport PageLayout from '@/components/PageLayout';\nimport ProductCard from '@/components/ProductCard';\nimport LoadingSpinner from '@/components/LoadingSpinner';\nimport { fetchProducts, fetchCategories, StockItem, Category } from '@/services/api';\nimport { toast } from 'sonner';\nimport { useCart } from '@/contexts/CartContext';\n\nconst Shop: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSizes, setSelectedSizes] = useState<string[]>([]);\n  const [selectedBrands, setSelectedBrands] = useState<string[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [showFilters, setShowFilters] = useState(false);\n  const { itemCount } = useCart();\n\n  // Fetch products using React Query with retry and longer staleTime\n  const { data: products, isLoading, error, isError, refetch } = useQuery({\n    queryKey: ['products'],\n    queryFn: fetchProducts,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 1,\n    retryDelay: 1000,\n  });\n\n  // Fetch categories using React Query\n  const { data: categories } = useQuery({\n    queryKey: ['categories'],\n    queryFn: fetchCategories,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 1,\n    retryDelay: 1000,\n  });\n  \n  // Parse URL parameters on initial load\n  useEffect(() => {\n    const brandParam = searchParams.get('brand');\n    const categoryParam = searchParams.get('category');\n    const sizeParam = searchParams.get('size');\n    const searchParam = searchParams.get('search');\n    \n    if (brandParam) {\n      setSelectedBrands(brandParam.split(','));\n    }\n    \n    if (categoryParam) {\n      setSelectedCategories(categoryParam.split(','));\n    }\n    \n    if (sizeParam) {\n      setSelectedSizes(sizeParam.split(','));\n    }\n    \n    if (searchParam) {\n      setSearchTerm(searchParam);\n    }\n  }, [searchParams]);\n\n  // Update URL parameters when filters change\n  useEffect(() => {\n    const newParams = new URLSearchParams();\n    \n    if (selectedBrands.length > 0) {\n      newParams.set('brand', selectedBrands.join(','));\n    }\n    \n    if (selectedCategories.length > 0) {\n      newParams.set('category', selectedCategories.join(','));\n    }\n    \n    if (selectedSizes.length > 0) {\n      newParams.set('size', selectedSizes.join(','));\n    }\n    \n    if (searchTerm) {\n      newParams.set('search', searchTerm);\n    }\n    \n    // Only update if params actually changed to avoid needless history entries\n    if (newParams.toString() !== searchParams.toString()) {\n      setSearchParams(newParams);\n    }\n  }, [selectedBrands, selectedCategories, selectedSizes, searchTerm, setSearchParams, searchParams]);\n\n  useEffect(() => {\n    if (isError && error instanceof Error) {\n      toast.error(`Shop error: ${error.message}`);\n    }\n  }, [isError, error]);\n\n  // Extract all available sizes from products\n  const availableSizes = useMemo(() => {\n    if (!products) return [];\n    \n    const sizes = new Set<string>();\n    \n    products.forEach(product => {\n      if (Array.isArray(product.sizes)) {\n        product.sizes.forEach(sizeObj => {\n          if (sizeObj.quantity > 0) {\n            sizes.add(sizeObj.size);\n          }\n        });\n      }\n    });\n    \n    return Array.from(sizes).sort();\n  }, [products]);\n  \n  // Extract all available brands from products\n  const availableBrands = useMemo(() => {\n    if (!products) return [];\n    \n    const brands = new Set<string>();\n    \n    products.forEach(product => {\n      if (product.brand) {\n        brands.add(product.brand);\n      }\n    });\n    \n    return Array.from(brands).sort();\n  }, [products]);\n  \n  // Extract all available categories from products\n  const availableCategories = useMemo(() => {\n    if (!products) return [];\n    \n    const categorySet = new Set<string>();\n    \n    products.forEach(product => {\n      if (product.category) {\n        categorySet.add(product.category);\n      }\n    });\n    \n    return Array.from(categorySet).sort();\n  }, [products]);\n\n  // Toggle size selection\n  const toggleSizeSelection = (size: string) => {\n    setSelectedSizes(prev => {\n      if (prev.includes(size)) {\n        return prev.filter(s => s !== size);\n      } else {\n        return [...prev, size];\n      }\n    });\n  };\n  \n  // Toggle brand selection\n  const toggleBrandSelection = (brand: string) => {\n    setSelectedBrands(prev => {\n      if (prev.includes(brand)) {\n        return prev.filter(b => b !== brand);\n      } else {\n        return [...prev, brand];\n      }\n    });\n  };\n  \n  // Toggle category selection\n  const toggleCategorySelection = (category: string) => {\n    setSelectedCategories(prev => {\n      if (prev.includes(category)) {\n        return prev.filter(c => c !== category);\n      } else {\n        return [...prev, category];\n      }\n    });\n  };\n\n  // Filter products based on search term, selected sizes, brands, and categories\n  const filteredProducts = useMemo(() => {\n    if (!products) return [];\n    \n    return products.filter(product => {\n      // Filter by search term\n      const matchesSearch = searchTerm === '' || \n                           product.item_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           product.color_code.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           (product.brand && product.brand.toLowerCase().includes(searchTerm.toLowerCase()));\n      \n      // Filter by sizes - if no sizes selected, show all\n      const matchesSize = selectedSizes.length === 0 || \n                          (Array.isArray(product.sizes) && \n                           product.sizes.some(s => selectedSizes.includes(s.size) && s.quantity > 0));\n      \n      // Filter by brands - if no brands selected, show all\n      const matchesBrand = selectedBrands.length === 0 || \n                          (product.brand && selectedBrands.includes(product.brand));\n      \n      // Filter by categories - if no categories selected, show all\n      const matchesCategory = selectedCategories.length === 0 ||\n                             (product.category && selectedCategories.includes(product.category));\n      \n      return matchesSearch && matchesSize && matchesBrand && matchesCategory;\n    });\n  }, [products, searchTerm, selectedSizes, selectedBrands, selectedCategories]);\n  \n  // Clear all filters\n  const clearFilters = () => {\n    setSelectedSizes([]);\n    setSelectedBrands([]);\n    setSelectedCategories([]);\n    setSearchTerm('');\n  };\n  \n  // Remove a specific size filter\n  const removeSizeFilter = (size: string) => {\n    setSelectedSizes(prev => prev.filter(s => s !== size));\n  };\n  \n  // Remove a specific brand filter\n  const removeBrandFilter = (brand: string) => {\n    setSelectedBrands(prev => prev.filter(b => b !== brand));\n  };\n  \n  // Remove a specific category filter\n  const removeCategoryFilter = (category: string) => {\n    setSelectedCategories(prev => prev.filter(c => c !== category));\n  };\n  \n  // Check if any filters are active\n  const hasActiveFilters = selectedSizes.length > 0 || selectedBrands.length > 0 || selectedCategories.length > 0 || searchTerm.length > 0;\n\n  return (\n    <PageLayout>\n      <div className=\"p-4\">\n        <header className=\"mb-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h1 className=\"text-2xl font-semibold\">Shop</h1>\n            <Link \n              to=\"/cart\" \n              className=\"relative flex items-center justify-center w-10 h-10 bg-telegram-button text-white rounded-full hover:bg-telegram-button/90 transition-colors\"\n              aria-label=\"View Cart\"\n            >\n              <ShoppingCart size={20} className=\"text-white\" />\n              {itemCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold w-5 h-5 flex items-center justify-center rounded-full\">\n                  {itemCount}\n                </span>\n              )}\n            </Link>\n          </div>\n          \n          {/* Search bar */}\n          <div className=\"relative mb-4\">\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <Search size={20} className=\"text-telegram-hint\" />\n            </div>\n            <input\n              type=\"text\"\n              placeholder=\"Search products...\"\n              className=\"w-full p-3 pl-10 pr-4 border border-telegram-hint/30 rounded-lg bg-telegram-bg text-telegram-text focus:outline-none focus:ring-2 focus:ring-telegram-button focus:border-transparent\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n          \n          {/* Filters button */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <button\n              className=\"flex items-center gap-2 text-sm text-telegram-text\"\n              onClick={() => setShowFilters(!showFilters)}\n            >\n              <Filter size={18} className=\"text-telegram-hint\" />\n              <span>{showFilters ? 'Hide filters' : 'Show filters'}</span>\n            </button>\n            \n            {hasActiveFilters && (\n              <button\n                className=\"flex items-center gap-1 text-xs text-red-500\"\n                onClick={clearFilters}\n              >\n                <X size={14} />\n                <span>Clear filters</span>\n              </button>\n            )}\n          </div>\n          \n          {/* Active filters display */}\n          {hasActiveFilters && (\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              {selectedSizes.map(size => (\n                <span key={`filter-size-${size}`} className=\"inline-flex items-center gap-1 px-2 py-1 bg-telegram-light text-telegram-blue text-xs rounded-full\">\n                  <Tag size={12} />\n                  Size: {size}\n                  <button \n                    className=\"ml-1\" \n                    onClick={() => removeSizeFilter(size)}\n                  >\n                    <X size={12} />\n                  </button>\n                </span>\n              ))}\n              \n              {selectedBrands.map(brand => (\n                <span key={`filter-brand-${brand}`} className=\"inline-flex items-center gap-1 px-2 py-1 bg-telegram-light text-telegram-blue text-xs rounded-full\">\n                  <Tag size={12} />\n                  Brand: {brand}\n                  <button \n                    className=\"ml-1\" \n                    onClick={() => removeBrandFilter(brand)}\n                  >\n                    <X size={12} />\n                  </button>\n                </span>\n              ))}\n              \n              {selectedCategories.map(category => (\n                <span key={`filter-category-${category}`} className=\"inline-flex items-center gap-1 px-2 py-1 bg-telegram-light text-telegram-blue text-xs rounded-full\">\n                  <Tag size={12} />\n                  Category: {category}\n                  <button \n                    className=\"ml-1\" \n                    onClick={() => removeCategoryFilter(category)}\n                  >\n                    <X size={12} />\n                  </button>\n                </span>\n              ))}\n              \n              {searchTerm && (\n                <span className=\"inline-flex items-center gap-1 px-2 py-1 bg-telegram-light text-telegram-blue text-xs rounded-full\">\n                  <Search size={12} />\n                  \"{searchTerm}\"\n                  <button \n                    className=\"ml-1\" \n                    onClick={() => setSearchTerm('')}\n                  >\n                    <X size={12} />\n                  </button>\n                </span>\n              )}\n            </div>\n          )}\n          \n          {showFilters && (\n            <div className=\"mb-4 p-4 bg-telegram-secondary-bg rounded-lg animate-slide-down space-y-4\">\n              {/* Size filter */}\n              <div>\n                <h3 className=\"text-sm font-medium mb-2 text-telegram-text\">Filter by Size (Select Multiple)</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {availableSizes.map(size => (\n                    <button\n                      key={size}\n                      className={`px-3 py-1 text-sm rounded-full border transition-colors ${\n                        selectedSizes.includes(size) \n                          ? 'bg-telegram-button text-telegram-button-text border-telegram-button' \n                          : 'bg-telegram-bg text-telegram-text border-telegram-hint/30 hover:border-telegram-hint/50'\n                      }`}\n                      onClick={() => toggleSizeSelection(size)}\n                    >\n                      {size}\n                    </button>\n                  ))}\n                </div>\n              </div>\n              \n              {/* Brand filter */}\n              {availableBrands.length > 0 && (\n                <div>\n                  <h3 className=\"text-sm font-medium mb-2 text-telegram-text\">Filter by Brand (Select Multiple)</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {availableBrands.map(brand => (\n                      <button\n                        key={brand}\n                        className={`px-3 py-1 text-sm rounded-full border transition-colors ${\n                          selectedBrands.includes(brand) \n                            ? 'bg-telegram-button text-telegram-button-text border-telegram-button' \n                            : 'bg-telegram-bg text-telegram-text border-telegram-hint/30 hover:border-telegram-hint/50'\n                        }`}\n                        onClick={() => toggleBrandSelection(brand)}\n                      >\n                        {brand}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {/* Category filter */}\n              {availableCategories.length > 0 && (\n                <div>\n                  <h3 className=\"text-sm font-medium mb-2 text-telegram-text\">Filter by Category (Select Multiple)</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {availableCategories.map(category => (\n                      <button\n                        key={category}\n                        className={`px-3 py-1 text-sm rounded-full border transition-colors ${\n                          selectedCategories.includes(category) \n                            ? 'bg-telegram-button text-telegram-button-text border-telegram-button' \n                            : 'bg-telegram-bg text-telegram-text border-telegram-hint/30 hover:border-telegram-hint/50'\n                        }`}\n                        onClick={() => toggleCategorySelection(category)}\n                      >\n                        {category}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </header>\n\n        {/* Error display */}\n        {isError && (\n          <div className=\"p-3 bg-red-50 border border-red-300 rounded-lg mb-4\">\n            <h3 className=\"text-sm font-medium text-red-700\">Error Loading Products:</h3>\n            <p className=\"text-xs text-red-600\">\n              {error instanceof Error ? error.message : 'Unknown error'}\n            </p>\n          </div>\n        )}\n\n        {/* Products grid */}\n        {isLoading ? (\n          <div className=\"flex justify-center items-center h-64\">\n            <LoadingSpinner size=\"lg\" />\n          </div>\n        ) : isError ? (\n          <div className=\"text-center py-10\">\n            <h2 className=\"text-lg font-medium text-red-600 mb-2\">Error loading products</h2>\n            <p className=\"text-gray-600 mb-4\">Please try again later</p>\n            <button \n              className=\"px-4 py-2 bg-telegram-blue text-white rounded-lg\"\n              onClick={() => refetch()}\n            >\n              Retry\n            </button>\n          </div>\n        ) : filteredProducts.length === 0 ? (\n          <div className=\"text-center py-10\">\n            <h2 className=\"text-lg font-medium text-gray-700\">No products found</h2>\n            <p className=\"text-gray-500 mt-2\">Try changing your filters or search term</p>\n            {hasActiveFilters && (\n              <button \n                className=\"mt-4 px-4 py-2 bg-telegram-blue text-white rounded-lg\"\n                onClick={clearFilters}\n              >\n                Clear all filters\n              </button>\n            )}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-2 gap-4\">\n            {filteredProducts.map((product) => (\n              <ProductCard \n                key={product.sku} \n                product={product}\n                className=\"animate-fade-in\"\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default Shop;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport { ShoppingBag, Plus, Minus, ShoppingCart } from 'lucide-react';\nimport PageLayout from '@/components/PageLayout';\nimport LoadingSpinner from '@/components/LoadingSpinner';\nimport SizeSelector from '@/components/SizeSelector';\nimport { fetchProducts, addProductToCart, StockItem } from '@/services/api';\nimport { useCart } from '@/contexts/CartContext';\nimport { getConsistentEmoji } from '@/utils/emojiUtils';\nimport { hapticSelection, hapticImpact } from '@/utils/telegramUtils';\nimport { sortSizes } from '@/utils/sizeUtils';\nimport { toast } from 'sonner';\nimport PhotoSwiper from '@/components/PhotoSwiper';\n\nconst ProductDetails: React.FC = () => {\n  const { productId } = useParams<{ productId: string }>();\n  const navigate = useNavigate();\n  const { addToCart: addItemToCart, updateQuantity, getItemQuantity } = useCart();\n  const [selectedSize, setSelectedSize] = useState<string>('');\n  \n  // Fetch all products with retry and longer staleTime\n  const { data: products, isLoading, error, isError, refetch } = useQuery({\n    queryKey: ['products'],\n    queryFn: fetchProducts,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: 1,\n    retryDelay: 1000,\n  });\n  \n  // Find the current product\n  const product = products?.find(p => p.sku === productId);\n  \n  // Get available sizes (only those with count > 0)\n  const availableSizes = useMemo(() => {\n    if (!product) return [];\n    \n    // Handle array of SizeAvailability\n    if (Array.isArray(product.sizes)) {\n      const sizes = product.sizes\n        .filter(size => size.quantity > 0)\n        .map(size => size.size);\n      \n      // Return sorted sizes\n      return sortSizes(sizes);\n    }\n    \n    // Fallback for backward compatibility\n    return [];\n  }, [product]);\n\n  // Set default selected size when product loads\n  useEffect(() => {\n    if (availableSizes.length > 0 && !selectedSize) {\n      setSelectedSize(availableSizes[0]);\n    }\n  }, [availableSizes, selectedSize]);\n  \n  // Get emoji for product\n  const productEmoji = product \n    ? getConsistentEmoji(`${product.item_name}-${product.color_code}`, 'product')\n    : '📦';\n  \n  // Get current quantity in cart\n  const currentQuantity = useMemo(() => {\n    if (!product || !selectedSize) return 0;\n    return getItemQuantity(product.sku, selectedSize);\n  }, [product, selectedSize, getItemQuantity]);\n  \n  // Get processed photo URLs\n  const photoUrls = useMemo(() => {\n    if (!product || !product.photos) return [];\n    \n    return Array.isArray(product.photos) \n      ? product.photos.map(photo => {\n          if (typeof photo === 'string') return photo;\n          return photo.photo_url || '';\n        }).filter(url => url)\n      : [];\n  }, [product]);\n  \n  // Get maximum available quantity for the selected size\n  const getMaxAvailableQuantity = useMemo(() => {\n    if (!product || !selectedSize) return 0;\n    \n    const sizeInfo = product.sizes.find(s => s.size === selectedSize);\n    return sizeInfo ? sizeInfo.quantity : 0;\n  }, [product, selectedSize]);\n  \n  const handleAddToCart = () => {\n    if (!product || !selectedSize) return;\n    \n    // Check if adding one more would exceed available stock\n    if (currentQuantity >= getMaxAvailableQuantity) {\n      toast.error(`Извините, доступно только ${getMaxAvailableQuantity} шт. размера ${selectedSize}`);\n      return;\n    }\n    \n    // Provide haptic feedback\n    hapticSelection();\n    \n    // Calculate price - convert from string if needed\n    const price = typeof product.price_rub === 'string' \n      ? parseFloat(product.price_rub.replace(/[^\\d.-]/g, ''))\n      : product.price_rub;\n    \n    // Call the cart context method to add the product\n    // Create a temporary product object that matches what the cart context expects\n    const tempProduct = {\n      id: product.sku,\n      name: product.item_name,\n      color: product.color_code,\n      sizes: availableSizes,\n      // Use the actual price from the API\n      price: price,\n      quantity: 1\n    };\n    \n    addItemToCart(tempProduct, selectedSize);\n    \n    // Also call the API method (which is just a placeholder for now)\n    addProductToCart(product.sku, selectedSize);\n  };\n  \n  const handleIncreaseQuantity = () => {\n    if (!product || !selectedSize) return;\n    \n    // Check if adding one more would exceed available stock\n    if (currentQuantity >= getMaxAvailableQuantity) {\n      toast.error(`Извините, доступно только ${getMaxAvailableQuantity} шт. размера ${selectedSize}`);\n      return;\n    }\n    \n    hapticSelection();\n    updateQuantity(product.sku, selectedSize, currentQuantity + 1);\n  };\n  \n  const handleDecreaseQuantity = () => {\n    if (!product || !selectedSize || currentQuantity <= 0) return;\n    hapticSelection();\n    updateQuantity(product.sku, selectedSize, currentQuantity - 1);\n  };\n  \n  const handleViewCart = () => {\n    hapticSelection();\n    navigate('/cart');\n  };\n  \n  if (isLoading) {\n    return (\n      <PageLayout>\n        <div className=\"flex justify-center items-center h-screen\">\n          <LoadingSpinner size=\"lg\" />\n        </div>\n      </PageLayout>\n    );\n  }\n  \n  if (isError || !product) {\n    return (\n      <PageLayout>\n        <div className=\"p-4 text-center\">\n          <h2 className=\"text-lg font-medium text-red-600 mb-2\">\n            {isError ? \"Ошибка загрузки товара\" : \"Товар не найден\"}\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n            {isError ? \"Пожалуйста, попробуйте позже\" : \"Этот товар может быть больше не доступен\"}\n          </p>\n          <div className=\"flex justify-center gap-4\">\n            {isError && (\n              <button \n                className=\"px-4 py-2 bg-telegram-blue text-white rounded-lg\"\n                onClick={() => refetch()}\n              >\n                Повторить\n              </button>\n            )}\n            <button \n              className=\"px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-lg\"\n              onClick={() => navigate('/shop')}\n            >\n              В магазин\n            </button>\n          </div>\n        </div>\n      </PageLayout>\n    );\n  }\n  \n  return (\n    <PageLayout>\n      <div className=\"flex flex-col min-h-screen\">\n        {/* Product image slider using PhotoSwiper component */}\n        <PhotoSwiper\n          photos={photoUrls}\n          productName={product.item_name}\n          fallbackEmoji={productEmoji}\n        />\n        \n        <div className=\"p-4 flex-1\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h1 className=\"text-xl font-bold\">{product.item_name}</h1>\n            <Link \n              to=\"/cart\" \n              className=\"relative flex items-center justify-center w-10 h-10 bg-telegram-button text-white rounded-full hover:bg-telegram-button/90 transition-colors\"\n              aria-label=\"View Cart\"\n            >\n              <ShoppingCart size={20} className=\"text-white\" />\n              {/* Show total quantity of this product in cart across all sizes */}\n              {availableSizes.reduce((total, size) => total + getItemQuantity(product.sku, size), 0) > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold w-5 h-5 flex items-center justify-center rounded-full\">\n                  {availableSizes.reduce((total, size) => total + getItemQuantity(product.sku, size), 0)}\n                </span>\n              )}\n            </Link>\n          </div>\n          \n          <div className=\"mb-6\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              {product.brand && (\n                <span className=\"px-2 py-1 bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 text-xs rounded-full\">\n                  {product.brand}\n                </span>\n              )}\n              <span className=\"px-2 py-1 bg-telegram-light dark:bg-telegram-dark/20 text-telegram-blue dark:text-telegram-blue text-xs rounded-full\">\n                {product.color_code}\n              </span>\n            </div>\n            <p className=\"text-lg font-semibold text-telegram-blue\">\n              ₽{typeof product.price_rub === 'string' \n                ? parseFloat(product.price_rub.replace(/[^\\d.-]/g, '')).toLocaleString() \n                : product.price_rub.toLocaleString()}\n            </p>\n          </div>\n          \n          <div className=\"mb-6\">\n            <h2 className=\"font-medium mb-2\">Выберите размер</h2>\n            <SizeSelector\n              availableSizes={availableSizes}\n              selectedSize={selectedSize}\n              onChange={setSelectedSize}\n            />\n          </div>\n          \n          <div className=\"mb-6\">\n            {product.description && (\n              <>\n                <h2 className=\"font-medium mb-2\">Описание</h2>\n                <p className=\"text-gray-700 dark:text-gray-300 text-sm\">\n                  {product.description}\n                </p>\n              </>\n            )}\n          </div>\n          \n          <div className=\"sticky bottom-0 pt-4 pb-2 bg-white dark:bg-sidebar-primary\">\n            {selectedSize && (\n              <div className=\"mb-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-medium\">Размер: {selectedSize}</span>\n                  {getItemQuantity(product.sku, selectedSize) > 0 && (\n                    <span className=\"text-sm text-gray-500\">\n                      В корзине: {getItemQuantity(product.sku, selectedSize)} шт.\n                    </span>\n                  )}\n                </div>\n                \n                {getItemQuantity(product.sku, selectedSize) === 0 ? (\n                  <button\n                    onClick={handleAddToCart}\n                    disabled={!selectedSize || availableSizes.length === 0}\n                    className=\"w-full py-3 px-4 bg-telegram-blue text-white rounded-lg flex items-center justify-center gap-2 hover:bg-telegram-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <ShoppingBag size={20} />\n                    <span>Добавить в корзину</span>\n                  </button>\n                ) : (\n                  <div className=\"flex items-center justify-between border border-gray-200 dark:border-gray-700 rounded-lg p-1\">\n                    <button \n                      onClick={handleDecreaseQuantity}\n                      className=\"w-10 h-10 flex items-center justify-center text-telegram-text bg-gray-100 dark:bg-gray-800 rounded-md\"\n                    >\n                      <Minus size={18} />\n                    </button>\n                    <span className=\"font-medium\">{getItemQuantity(product.sku, selectedSize)}</span>\n                    <button \n                      onClick={handleIncreaseQuantity}\n                      className=\"w-10 h-10 flex items-center justify-center text-telegram-text bg-gray-100 dark:bg-gray-800 rounded-md\"\n                    >\n                      <Plus size={18} />\n                    </button>\n                  </div>\n                )}\n              </div>\n            )}\n            \n            <button\n              onClick={handleViewCart}\n              className=\"w-full py-3 px-4 bg-telegram-blue text-white rounded-lg flex items-center justify-center gap-2 hover:bg-telegram-dark transition-colors\"\n            >\n              <ShoppingCart size={20} />\n              <span>Перейти в корзину</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default ProductDetails;\n","import React, { createContext, useContext, ReactNode } from 'react';\n\n// User type for consistency\ninterface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  language_code?: string;\n  is_premium?: boolean;\n  photo_url?: string;\n  allows_write_to_pm?: boolean;\n}\n\n// Define WebApp interface for local use\ninterface TelegramWebApp {\n  initData: string;\n  initDataUnsafe: {\n    user?: TelegramUser;\n    auth_date?: string;\n    hash?: string;\n    query_id?: string;\n    start_param?: string;\n  };\n  ready: () => void;\n  close: () => void;\n  expand: () => void;\n  MainButton: {\n    isVisible: boolean;\n    onClick: (callback: () => void) => void;\n    offClick: (callback?: () => void) => void;\n    show: () => void;\n    hide: () => void;\n    setParams: (params: Record<string, unknown>) => void;\n  };\n  BackButton: {\n    isVisible: boolean;\n    onClick: (callback: () => void) => void;\n    offClick: (callback?: () => void) => void;\n    show: () => void;\n    hide: () => void;\n  };\n  themeParams: {\n    backgroundColor?: string;\n    textColor?: string;\n    hintColor?: string;\n    linkColor?: string;\n    buttonColor?: string;\n    buttonTextColor?: string;\n    secondaryBackgroundColor?: string;\n    isDark?: boolean;\n  };\n}\n\n// Define the context interface with proper types\ninterface TelegramContextType {\n  tg: TelegramWebApp | undefined;\n  onClose: () => void;\n  onToggleButton: () => void;\n  initWebApp: () => void;\n  getUserData: () => TelegramUser | null;\n  user: TelegramUser | undefined;\n  queryId: string | undefined;\n}\n\n// Create the context\nconst TelegramContext = createContext<TelegramContextType | null>(null);\n\n// Provider component\nexport const TelegramProvider: React.FC<{children: ReactNode}> = ({ children }) => {\n  // Get the Telegram WebApp instance\n  const tg = typeof window !== 'undefined' ? window.Telegram?.WebApp as TelegramWebApp | undefined : undefined;\n\n  // Function to close the WebApp\n  const onClose = () => {\n    if (tg) {\n      tg.close();\n    }\n  };\n\n  // Function to toggle the main button\n  const onToggleButton = () => {\n    if (tg?.MainButton?.isVisible) {\n      tg.MainButton.hide();\n    } else if (tg?.MainButton) {\n      tg.MainButton.show();\n    }\n  };\n\n  // Initialize the WebApp\n  const initWebApp = () => {\n    console.log(\"Initializing Telegram WebApp with direct access...\");\n    if (tg) {\n      tg.ready();\n      console.log(\"Telegram WebApp initialized successfully\");\n    } else {\n      console.error(\"Telegram WebApp is not available\");\n    }\n  };\n\n  // Get user data from initDataUnsafe\n  const getUserData = (): TelegramUser | null => {\n    if (tg?.initDataUnsafe?.user) {\n      console.log(\"User data found in initDataUnsafe:\", tg.initDataUnsafe.user);\n      \n      // Store in localStorage for future use\n      try {\n        localStorage.setItem('telegramUser', JSON.stringify(tg.initDataUnsafe.user));\n      } catch (e) {\n        console.error(\"Error storing user data in localStorage:\", e);\n      }\n      \n      return tg.initDataUnsafe.user;\n    }\n    \n    console.log(\"No user data found in initDataUnsafe\");\n    \n    // Try to get from localStorage as fallback\n    try {\n      const storedUser = localStorage.getItem('telegramUser');\n      if (storedUser) {\n        const userData = JSON.parse(storedUser) as TelegramUser;\n        console.log(\"Using stored user data from localStorage:\", userData);\n        return userData;\n      }\n    } catch (e) {\n      console.error(\"Error retrieving user data from localStorage:\", e);\n    }\n    \n    return null;\n  };\n\n  // Create the context value\n  const contextValue: TelegramContextType = {\n    tg,\n    onClose,\n    onToggleButton,\n    initWebApp,\n    getUserData,\n    user: tg?.initDataUnsafe?.user,\n    queryId: tg?.initDataUnsafe?.query_id,\n  };\n\n  return (\n    <TelegramContext.Provider value={contextValue}>\n      {children}\n    </TelegramContext.Provider>\n  );\n};\n\n// Hook to use the Telegram context\nexport const useTelegram = () => {\n  const context = useContext(TelegramContext);\n  if (!context) {\n    throw new Error('useTelegram must be used within a TelegramProvider');\n  }\n  return context;\n}; ","import React, { useEffect, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport PageLayout from '@/components/PageLayout';\nimport LoadingSpinner from '@/components/LoadingSpinner';\nimport OrderCard from '@/components/OrderCard';\nimport UserAvatar from '@/components/UserAvatar';\nimport ReferralCard from '@/components/ReferralCard';\nimport { useUser } from '@/contexts/UserContext';\nimport { fetchOrders, /* getUserRank, */ checkUserExists, getDDCoinsBalance, getTelegramUser } from '@/services/api';\nimport { toast } from 'sonner';\nimport { useTelegram } from '@/contexts/TelegramContext';\nimport { Settings as SettingsIcon, Coins } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { API_BASE_URL, createFetchOptions } from '@/services/api/config';\n\nconst Profile: React.FC = () => {\n  const { username, displayName, telegramUser, profile, avatarEmoji, updateTelegramUser } = useUser();\n  const [isRegistered, setIsRegistered] = useState<boolean>(true);\n  // const [userRank, setUserRank] = useState<number>(0);\n  // const [isLoadingRank, setIsLoadingRank] = useState<boolean>(false);\n  const [ddCoinsBalance, setDDCoinsBalance] = useState<number>(0);\n  const [isLoadingDDCoins, setIsLoadingDDCoins] = useState<boolean>(false);\n  const navigate = useNavigate();\n  \n  // Use the Telegram context\n  const { tg, initWebApp, getUserData } = useTelegram();\n\n  // Fetch DD coins balance when component mounts\n  useEffect(() => {\n    const fetchDDCoins = async () => {\n      const user = getTelegramUser();\n      if (!user) return;\n      \n      setIsLoadingDDCoins(true);\n      try {\n        const balance = await getDDCoinsBalance();\n        console.log('Profile page - DD coins direct API call:', balance);\n        setDDCoinsBalance(balance);\n      } catch (error) {\n        console.error('Error fetching DD coins balance:', error);\n      } finally {\n        setIsLoadingDDCoins(false);\n      }\n    };\n    \n    fetchDDCoins();\n  }, []);\n\n  // Fetch DD coins balance\n  const fetchDDCoinsBalance = async () => {\n    if (!telegramUser) return;\n    \n    setIsLoadingDDCoins(true);\n    try {\n      const balance = await getDDCoinsBalance();\n      console.log('Profile page: DD coins balance received:', balance);\n      setDDCoinsBalance(balance);\n    } catch (error) {\n      console.error('Error fetching DD coins balance:', error);\n    } finally {\n      setIsLoadingDDCoins(false);\n    }\n  };\n\n  // Fetch user rank directly from the API\n  /* \n  const fetchUserRank = async (userId: number) => {\n    setIsLoadingRank(true);\n    try {\n      console.log(`Fetching rank for user ID: ${userId}`);\n      \n      const requestBody = {\n        telegram_user_id: userId\n      };\n      \n      const { options, clearTimeout } = createFetchOptions('POST', requestBody);\n      \n      const response = await fetch(`${API_BASE_URL}/users/rank`, options);\n      clearTimeout();\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch rank: ${response.status} ${response.statusText}`);\n      }\n      \n      const responseText = await response.text();\n      console.log('Raw rank response:', responseText);\n      \n      const data = JSON.parse(responseText);\n      console.log('Parsed rank response:', data);\n      \n      if (data && data.loyalty_rank !== undefined) {\n        const rankValue = typeof data.loyalty_rank === 'string' \n          ? parseInt(data.loyalty_rank, 10) \n          : Number(data.loyalty_rank);\n          \n        console.log('Setting user rank to:', rankValue);\n        setUserRank(rankValue);\n      } else {\n        console.error('loyalty_rank not found in response:', data);\n        setUserRank(0);\n      }\n    } catch (error) {\n      console.error('Error fetching user rank:', error);\n      setUserRank(0);\n    } finally {\n      setIsLoadingRank(false);\n    }\n  };\n  */\n\n  // Initialize Telegram WebApp and get user data\n  useEffect(() => {\n    const initTelegram = async () => {\n      try {\n        console.log('Initializing Telegram WebApp on Profile page...');\n        \n        // Initialize Telegram WebApp using the hook\n        initWebApp();\n        \n        // Get Telegram user data using the hook\n        const user = getUserData();\n        \n        if (user) {\n          console.log('Telegram user found on Profile page:', user);\n          // Update the user context with Telegram user data\n          updateTelegramUser(user);\n          \n          // Check if user exists in the API\n          const exists = await checkUserExists();\n          setIsRegistered(typeof exists === 'boolean' ? exists : exists.exists || false);\n          \n          // Get user rank directly from the API\n          // await fetchUserRank(user.id);\n          \n          // Get DD coins balance\n          await fetchDDCoinsBalance();\n        } else {\n          console.log('No Telegram user data found on Profile page');\n          \n          // Try one more time after a delay\n          setTimeout(async () => {\n            const retryUser = getUserData();\n            if (retryUser) {\n              console.log('Telegram user found after delay:', retryUser);\n              updateTelegramUser(retryUser);\n              \n              // Check if user exists in the API\n              const exists = await checkUserExists();\n              setIsRegistered(typeof exists === 'boolean' ? exists : exists.exists || false);\n              \n              // Get user rank directly from the API\n              // await fetchUserRank(retryUser.id);\n              \n              // Get DD coins balance\n              await fetchDDCoinsBalance();\n            } else {\n              console.log('Still no Telegram user data after retry');\n            }\n          }, 500);\n        }\n      } catch (error) {\n        console.error('Error initializing Telegram on Profile page:', error);\n      }\n    };\n    \n    initTelegram();\n  }, [updateTelegramUser, initWebApp, getUserData, tg]);\n\n  // Fetch orders\n  const { data: orders, isLoading, error, isError, refetch } = useQuery({\n    queryKey: ['orders'],\n    queryFn: fetchOrders,\n    staleTime: 60 * 1000, // 1 minute\n    retry: 1,\n    retryDelay: 1000,\n    enabled: isRegistered, // Only run the query if user is registered\n  });\n\n  if (isLoading) {\n    return (\n      <PageLayout>\n        <div className=\"flex justify-center items-center h-64\">\n          <LoadingSpinner size=\"lg\" />\n        </div>\n      </PageLayout>\n    );\n  }\n\n  if (isError && error instanceof Error && !error.message.includes('not found')) {\n    return (\n      <PageLayout>\n        <div className=\"p-4 text-center\">\n          <h2 className=\"text-lg font-medium text-red-600 dark:text-red-400 mb-2\">Error loading profile</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n            {error instanceof Error ? error.message : 'Please try again later'}\n          </p>\n          <button \n            className=\"px-4 py-2 bg-telegram-blue text-white rounded-lg\"\n            onClick={() => refetch()}\n          >\n            Retry\n          </button>\n        </div>\n      </PageLayout>\n    );\n  }\n\n  const displayOrders = orders || [];\n\n  return (\n    <PageLayout>\n      <div className=\"p-4 relative\">\n        <div className=\"flex items-center justify-between mb-8 animate-fade-in\">\n          <div className=\"flex items-center gap-4\">\n            <UserAvatar \n              user={telegramUser} \n              emoji={avatarEmoji} \n              size=\"lg\" \n              className=\"hover-lift\"\n            />\n            <div>\n              <h1 className=\"text-2xl font-semibold\">\n                {telegramUser?.username ? `@${telegramUser.username}` : displayName}\n              </h1>\n              {telegramUser && (\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  {telegramUser.first_name} {telegramUser.last_name || ''}\n                </p>\n              )}\n              {/* <div className=\"mt-2 flex items-center\">\n                <span className=\"text-sm bg-telegram-light dark:bg-telegram-dark/20 text-telegram-blue dark:text-telegram-blue px-2 py-1 rounded-full\">\n                  {isLoadingRank ? 'Loading...' : `Rank ${userRank}`}\n                </span>\n              </div> */}\n            </div>\n          </div>\n          <button \n            onClick={() => navigate('/settings')}\n            className=\"w-10 h-10 flex items-center justify-center rounded-full bg-telegram-light dark:bg-sidebar-accent hover:bg-telegram-secondary-bg dark:hover:bg-sidebar-primary transition-colors\"\n            aria-label=\"Settings\"\n          >\n            <SettingsIcon size={20} className=\"text-telegram-blue\" />\n          </button>\n        </div>\n\n        {/* DD Coins Balance */}\n        <div className=\"mb-8 bg-white dark:bg-sidebar-accent rounded-lg p-4 shadow-sm animate-slide-up\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Coins size={24} className=\"text-yellow-500\" />\n              <h2 className=\"text-lg font-semibold\">DD Coins Balance</h2>\n            </div>\n            {isLoadingDDCoins ? (\n              <span className=\"text-sm text-gray-500\">Loading...</span>\n            ) : (\n              <span className=\"text-xl font-bold text-telegram-blue\">{ddCoinsBalance || 0}</span>\n            )}\n          </div>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-2\">\n            You can use your DD coins to get discounts on your orders (up to 50% of the order value).\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-4 mb-8 animate-slide-up\">\n          <div className=\"bg-white dark:bg-sidebar-accent rounded-lg p-4 text-center shadow-sm\">\n            <h2 className=\"text-xl font-semibold text-telegram-blue\">{displayOrders.length}</h2>\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm\">Orders</p>\n          </div>\n          <div className=\"bg-white dark:bg-sidebar-accent rounded-lg p-4 text-center shadow-sm\">\n            <h2 className=\"text-xl font-semibold text-telegram-blue\">\n              {displayOrders.filter(o => o.status === 'delivered').length}\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm\">Completed</p>\n          </div>\n          <div className=\"bg-white dark:bg-sidebar-accent rounded-lg p-4 text-center shadow-sm\">\n            <h2 className=\"text-xl font-semibold text-telegram-blue\">\n              {displayOrders.filter(o => o.status !== 'delivered').length}\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm\">Pending</p>\n          </div>\n        </div>\n\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-medium mb-4\">Invite Friends</h2>\n          <div className=\"bg-white dark:bg-sidebar-accent rounded-lg shadow-sm overflow-hidden\">\n            <div className=\"p-4 border-b border-gray-100 dark:border-gray-800/50\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Share your referral link with friends and earn rewards when they join and make purchases!\n              </p>\n            </div>\n            <ReferralCard className=\"animate-fade-in\" />\n          </div>\n        </div>\n\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-medium mb-4\">Order History</h2>\n          \n          {orders && orders.length > 0 ? (\n            <div className=\"space-y-4\">\n              {orders.map((order) => (\n                <OrderCard\n                  key={order.order_id}\n                  order={order}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"p-6 text-center bg-telegram-secondary-bg rounded-lg\">\n              <h3 className=\"font-medium text-lg mb-2\">No Orders Yet</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                You haven't placed any orders yet. Start shopping to see your orders here.\n              </p>\n              <button\n                onClick={() => navigate('/shop')}\n                className=\"px-4 py-2 bg-telegram-blue text-white rounded-lg\"\n              >\n                Browse Products\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default Profile;\n","import { API_BASE_URL, createFetchOptions } from './config';\nimport { getTelegramUser } from './userService';\nimport { toast } from 'sonner';\n\nexport interface Promocode {\n  id: number;\n  promocode_text: string;\n  discount_fixed: number | null;\n  discount_percent: string | null;\n  usages_global: number;\n  usages_per_user: number;\n  valid_to_dttm: string;\n}\n\nexport interface ValidatePromocodeResponse {\n  success: boolean;\n  message: string;\n  promocode: Promocode | null;\n}\n\nexport interface CreatePromocodeResponse {\n  success: boolean;\n  message: string;\n  promocode: Promocode;\n}\n\n/**\n * Validate a promocode for the current user\n * @param promocodeText The promocode to validate\n * @returns A promise that resolves to the validation response\n */\nexport const validatePromocode = async (promocodeText: string): Promise<ValidatePromocodeResponse> => {\n  try {\n    const user = getTelegramUser();\n    if (!user) {\n      throw new Error('No Telegram user data available');\n    }\n\n    const { options, clearTimeout } = createFetchOptions('POST', {\n      telegram_id: user.id,\n      promocode_text: promocodeText\n    });\n\n    const response = await fetch(`${API_BASE_URL}/promocodes/validate`, options);\n    clearTimeout();\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(errorText || 'Failed to validate promocode');\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error validating promocode:', error);\n    throw error;\n  }\n};\n\n/**\n * Calculate the final price after applying a promocode discount\n * @param originalPrice The original price before discount\n * @param promocode The promocode to apply\n * @returns The final price after discount\n */\nexport const calculateDiscountedPrice = (originalPrice: number, promocode: Promocode): number => {\n  let finalPrice = originalPrice;\n  \n  // Apply fixed discount first\n  if (promocode.discount_fixed > 0) {\n    finalPrice = Math.max(0, finalPrice - promocode.discount_fixed);\n  }\n  \n  // Then apply percentage discount if any\n  if (promocode.discount_percent && promocode.discount_percent !== 'null') {\n    const percentageDiscount = (finalPrice * parseFloat(promocode.discount_percent)) / 100;\n    finalPrice = Math.max(0, finalPrice - percentageDiscount);\n  }\n  \n  return Math.round(finalPrice); // Round to nearest integer\n};\n\n/**\n * Create a new promocode (admin only)\n * @param promocodeData The promocode data\n * @returns A promise that resolves to the created promocode\n */\nexport const createPromocode = async (promocodeData: {\n  promocode_text: string;\n  discount_fixed: number;\n  usages_global: number;\n  usages_per_user: number;\n  valid_to_dttm: string;\n  client_id?: number | null;\n}): Promise<CreatePromocodeResponse> => {\n  try {\n    const { options, clearTimeout } = createFetchOptions('POST', promocodeData);\n\n    const response = await fetch(`${API_BASE_URL}/promocodes/create`, options);\n    clearTimeout();\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(errorText || 'Failed to create promocode');\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating promocode:', error);\n    throw error;\n  }\n}; ","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ShoppingCart, ArrowLeft, Loader2, Coins } from 'lucide-react';\nimport { useCart } from '@/contexts/CartContext';\nimport PageLayout from '@/components/PageLayout';\nimport { Button } from '@/components/ui/button';\nimport ClientInfoForm from '@/components/ClientInfoForm';\nimport CartItem from '@/components/CartItem/CartItem';\nimport { toast } from 'sonner';\nimport { createUnifiedOrder } from '@/services/api/orderService';\nimport { checkClientInformation, getClientInfo } from '@/services/api/clientService';\nimport { getTelegramUser } from '@/services/api/userService';\nimport PromocodeInput from '@/components/PromocodeInput';\nimport { Promocode } from '@/services/api/promocodeService';\nimport { DeliveryRate } from '@/services/api/types';\nimport { getDDCoinsBalance } from '@/services/api/userService';\n\nconst Cart: React.FC = () => {\n  const { items, removeFromCart, clearCart } = useCart();\n  const [isCreatingOrder, setIsCreatingOrder] = useState(false);\n  const [isCheckingClientInfo, setIsCheckingClientInfo] = useState(false);\n  const [showClientInfoForm, setShowClientInfoForm] = useState(false);\n  const [currentPromocode, setCurrentPromocode] = useState<Promocode | undefined>();\n  const [finalPrice, setFinalPrice] = useState<number>(0);\n  const [ddCoinsBalance, setDDCoinsBalance] = useState<number>(0);\n  const [ddCoinsToUse, setDDCoinsToUse] = useState<number>(0);\n  const [isLoadingDDCoins, setIsLoadingDDCoins] = useState<boolean>(false);\n  const [selectedDeliveryRate, setSelectedDeliveryRate] = useState<DeliveryRate | null>(null);\n  const [clientInfo, setClientInfo] = useState<{ email: string; phone_number: string; address: string } | null>(null);\n  \n  // Fetch DD coins balance when component mounts\n  useEffect(() => {\n    const fetchDDCoins = async () => {\n      const user = getTelegramUser();\n      if (!user) return;\n      \n      setIsLoadingDDCoins(true);\n      try {\n        const balance = await getDDCoinsBalance();\n        setDDCoinsBalance(balance);\n      } catch (error) {\n        console.error('Error fetching DD coins balance:', error);\n      } finally {\n        setIsLoadingDDCoins(false);\n      }\n    };\n    \n    fetchDDCoins();\n  }, []);\n  \n  // Calculate total price whenever cart items or promocode changes\n  useEffect(() => {\n    const subtotal = items.reduce((sum, item) => sum + (item.sale_price || item.price) * item.quantity, 0);\n    if (currentPromocode) {\n      // Apply fixed discount first (only once for the whole order)\n      let discountedPrice = subtotal;\n      if (currentPromocode.discount_fixed) {\n        discountedPrice = Math.max(0, discountedPrice - currentPromocode.discount_fixed);\n      }\n      // Then apply percentage discount\n      if (currentPromocode.discount_percent && currentPromocode.discount_percent !== 'null') {\n        const percentageDiscount = (discountedPrice * parseFloat(currentPromocode.discount_percent)) / 100;\n        discountedPrice = Math.max(0, discountedPrice - percentageDiscount);\n      }\n      \n      // Add delivery price if a delivery rate is selected\n      if (selectedDeliveryRate) {\n        discountedPrice += selectedDeliveryRate.price_rub;\n      }\n      \n      setFinalPrice(Math.round(discountedPrice));\n    } else {\n      let calculatedPrice = subtotal;\n      \n      // Add delivery price if a delivery rate is selected\n      if (selectedDeliveryRate) {\n        calculatedPrice += selectedDeliveryRate.price_rub;\n      }\n      \n      setFinalPrice(calculatedPrice);\n    }\n    \n    // Reset DD coins to use if price has changed\n    setDDCoinsToUse(0);\n  }, [items, currentPromocode, selectedDeliveryRate]);\n\n  // Calculate the maximum amount of DD coins that can be used (50% of final price)\n  const maxDDCoinsToUse = Math.min(\n    ddCoinsBalance,\n    Math.floor(finalPrice * 0.5)\n  );\n  \n  // Calculate the final price after DD coins\n  const finalPriceAfterDDCoins = finalPrice - ddCoinsToUse;\n  \n  // Handle DD coins slider change\n  const handleDDCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(e.target.value);\n    setDDCoinsToUse(value);\n  };\n\n  const handlePromocodeApplied = (promocode: Promocode, discountedPrice: number) => {\n    setCurrentPromocode(promocode);\n    setFinalPrice(Math.round(discountedPrice));\n  };\n\n  const handlePromocodeRemoved = () => {\n    setCurrentPromocode(undefined);\n    setFinalPrice(items.reduce((sum, item) => sum + (item.sale_price || item.price) * item.quantity, 0));\n  };\n\n  const handleCreateOrder = async () => {\n    try {\n      setIsCreatingOrder(true);\n      \n      if (items.length === 0) {\n        toast.error('Ваша корзина пуста!');\n        setIsCreatingOrder(false);\n        return;\n      }\n      \n      const telegramUser = getTelegramUser();\n      if (!telegramUser) {\n        toast.error('Пожалуйста, войдите, чтобы создать заказ');\n        setIsCreatingOrder(false);\n        return;\n      }\n\n      // Get client information and show form to review/update\n      try {\n        const info = await getClientInfo();\n        // Store client info for the form\n        setClientInfo(info ? {\n          email: info.email || '',\n          phone_number: info.phone_number || '',\n          address: info.address || ''\n        } : null);\n        \n        setShowClientInfoForm(true);\n        setIsCreatingOrder(false);\n      } catch (error) {\n        console.error('Error getting client information:', error);\n        toast.error('Ошибка загрузки данных. Пожалуйста, попробуйте позже.');\n        setIsCreatingOrder(false);\n      }\n    } catch (error: any) {\n      console.error('Error in order creation process:', error);\n      toast.error(`Error: ${error.message}`);\n      setIsCreatingOrder(false);\n    }\n  };\n  \n  // Handle client info form completion\n  const handleClientInfoComplete = (deliveryRate?: DeliveryRate) => {\n    setShowClientInfoForm(false);\n    if (deliveryRate) {\n      // alert(\"Setting delivery type to \" + deliveryRate.delivery_type);\n      setSelectedDeliveryRate(deliveryRate);\n    } else {\n      alert(\"No delivery rate provided\");\n    }\n    createOrderWithInfo(deliveryRate);\n  };\n\n  // Separate function to create order after client info is confirmed\n  const createOrderWithInfo = async (deliveryRate?: DeliveryRate) => {\n    try {\n      setIsCreatingOrder(true);\n      \n      const telegramUser = getTelegramUser();\n      if (!telegramUser) {\n        toast.error('Пожалуйста, войдите, чтобы создать заказ');\n        return;\n      }\n\n      // Fetch the latest client info after the form is submitted\n      const latestClientInfo = await getClientInfo();\n      \n      // Format items for the unified API\n      const formattedItems = items.map(item => {\n        if (item.item_type === 'preorder') {\n          // Map category_type to match API requirements\n          let categoryType = item.category_type;\n          if (categoryType === 'shoes') {\n            categoryType = 'sneakers';\n          }\n          \n          return {\n            item_type: 'preorder' as const,\n            dewu_url: item.dewu_url,\n            size: item.size,\n            category_type: categoryType, // Use mapped category type\n            shipping_type: item.shipping_type || (item.delivery_type === 'cargo' ? 'cargo' : 'aero'), // Use shipping_type or convert from delivery_type\n            price_cny: item.price_cny || Math.round(item.price / 12), // Use existing price_cny or estimate it\n            quantity: item.quantity\n          };\n        } else {\n          // For stock items, use stock_id which is the productId\n          return {\n            item_type: 'stock' as const,\n            stock_id: parseInt(item.productId) || undefined, // Try to parse as integer if possible\n            sku: !parseInt(item.productId) ? item.productId : undefined, // Use sku as fallback\n            size: item.size,\n            quantity: item.quantity\n          };\n        }\n      });\n      \n      // Create an order using the unified API endpoint\n      const orderData = {\n        telegram_user_id: telegramUser.id,\n        delivery_method: deliveryRate?.delivery_type || 'self_pickup', // Updated to use what the API expects\n        delivery_address: latestClientInfo?.address || '',\n        promocode_text: currentPromocode?.promocode_text,\n        dd_coins_amount: ddCoinsToUse,\n        items: formattedItems,\n        final_price: finalPriceAfterDDCoins\n      };\n\n      console.log('Creating unified order with data:', JSON.stringify(orderData));\n      \n      const response = await createUnifiedOrder(orderData);\n      \n      if (response.success) {\n        clearCart();\n        toast.success('Заказ создан успешно');\n      } else {\n        toast.error(response.message || 'Не удалось создать заказ. Пожалуйста, попробуйте позже.');\n      }\n    } catch (error: any) {\n      console.error('Error creating order:', error);\n      toast.error('Ошибка при создании заказа. Пожалуйста, попробуйте позже.');\n      setIsCreatingOrder(false);\n    }\n  };\n\n  return (\n    <PageLayout>\n      <div className=\"max-w-4xl mx-auto px-4 py-6\">\n        <h1 className=\"text-2xl font-bold mb-6\">Корзина</h1>\n        \n        {items.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <ShoppingCart className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-4 text-lg font-medium text-gray-900 dark:text-gray-100\">Ваша корзина пуста</h3>\n            <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">\n              Добавьте товары в корзину, чтобы продолжить покупки\n            </p>\n            <Link\n              to=\"/shop\"\n              className=\"mt-6 inline-flex items-center text-sm font-medium text-telegram-blue hover:text-telegram-dark\"\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Продолжить покупки\n            </Link>\n          </div>\n        ) : (\n          <div>\n            <div className=\"space-y-4\">\n              {items.map((item) => (\n                <CartItem\n                  key={`${item.productId}-${item.size}`}\n                  item={item}\n                  onRemove={() => removeFromCart(item.productId, item.size)}\n                />\n              ))}\n            </div>\n            \n            {/* Promocode Input */}\n            <div className=\"bg-white dark:bg-sidebar-accent rounded-lg p-4 shadow-sm mb-6 mt-6\">\n              <h3 className=\"text-sm font-medium mb-2\">У вас есть промокод?</h3>\n              <PromocodeInput\n                originalPrice={items.reduce((sum, item) => sum + (item.sale_price || item.price) * item.quantity, 0)}\n                onPromocodeApplied={handlePromocodeApplied}\n                onPromocodeRemoved={handlePromocodeRemoved}\n                currentPromocode={currentPromocode}\n              />\n            </div>\n            \n            {/* Order Summary */}\n            <div className=\"bg-white dark:bg-sidebar-accent rounded-lg p-4 shadow-sm\">\n              <h3 className=\"text-lg font-medium mb-4\">Информация о заказе</h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Сумма товаров</span>\n                  <span>₽{items.reduce((sum, item) => sum + (item.sale_price || item.price) * item.quantity, 0)}</span>\n                </div>\n                \n                {selectedDeliveryRate && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">\n                      Доставка ({selectedDeliveryRate.delivery_type === 'self_pickup' \n                        ? 'Самовывоз' \n                        : selectedDeliveryRate.delivery_type === 'courier'\n                          ? 'Курьер'\n                          : 'Почта'})\n                    </span>\n                    <span>\n                      {selectedDeliveryRate.price_rub > 0 \n                        ? `₽${selectedDeliveryRate.price_rub.toLocaleString()}`\n                        : 'Бесплатно'}\n                    </span>\n                  </div>\n                )}\n                \n                {currentPromocode && (\n                  <div className=\"flex justify-between text-telegram-blue\">\n                    <span>Скидка по промокоду</span>\n                    <span>\n                      {currentPromocode.discount_fixed ? \n                        `-₽${currentPromocode.discount_fixed}` : \n                        (currentPromocode.discount_percent && currentPromocode.discount_percent !== 'null') ? \n                          `-${currentPromocode.discount_percent}%` : \n                          ''\n                      }\n                    </span>\n                  </div>\n                )}\n                \n                {/* DD Coins Section */}\n                {ddCoinsBalance > 0 && finalPrice > 0 && (\n                  <div className=\"pt-3 border-t border-gray-200 dark:border-gray-700\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <div className=\"flex items-center gap-1\">\n                        <Coins size={16} className=\"text-yellow-500\" />\n                        <span className=\"font-medium\">DD Коины</span>\n                      </div>\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Баланс: {ddCoinsBalance}\n                      </span>\n                    </div>\n                    \n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Использовать DD Коины для оплаты</span>\n                        <span className=\"text-telegram-blue\">{ddCoinsToUse} коинов (-₽{ddCoinsToUse})</span>\n                      </div>\n                      \n                      <input\n                        type=\"range\"\n                        min=\"0\"\n                        max={maxDDCoinsToUse}\n                        value={ddCoinsToUse}\n                        onChange={handleDDCoinsChange}\n                        className=\"w-full\"\n                        disabled={maxDDCoinsToUse <= 0}\n                      />\n                      \n                      <div className=\"flex justify-between text-xs text-gray-500\">\n                        <span>0</span>\n                        <span>Макс: {maxDDCoinsToUse} коинов (50% от суммы)</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"flex justify-between font-medium pt-2 border-t border-gray-200 dark:border-gray-700\">\n                  <span>Итого</span>\n                  <span>₽{finalPriceAfterDDCoins}</span>\n                </div>\n              </div>\n              <button\n                onClick={handleCreateOrder}\n                disabled={isCreatingOrder || isCheckingClientInfo}\n                className=\"w-full mt-4 bg-telegram-blue text-white py-3 rounded-lg font-medium hover:bg-telegram-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isCreatingOrder || isCheckingClientInfo ? (\n                  <>\n                    <Loader2 className=\"inline-block mr-2 h-4 w-4 animate-spin\" />\n                    {isCheckingClientInfo ? 'Проверка данных...' : 'Создание заказа...'}\n                  </>\n                ) : (\n                  'Оформить заказ'\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Client Info Form */}\n      {showClientInfoForm && (\n        <ClientInfoForm\n          onComplete={handleClientInfoComplete}\n          onCancel={() => setShowClientInfoForm(false)}\n          clientInfo={clientInfo}\n        />\n      )}\n    </PageLayout>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport PageLayout from \"@/components/PageLayout\";\n\nconst NotFound = () => {\n  const navigate = useNavigate();\n\n  return (\n    <PageLayout fullHeight>\n      <div className=\"min-h-screen flex flex-col items-center justify-center p-4 text-center\">\n        <div className=\"text-8xl mb-4 animate-float\">🔍</div>\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-6\">\n          Oops! We couldn't find that page\n        </p>\n        \n        <button\n          onClick={() => navigate(\"/\")}\n          className=\"px-6 py-3 bg-telegram-blue text-white rounded-lg hover:bg-telegram-dark transition-colors\"\n        >\n          Return to Home\n        </button>\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default NotFound;\n","import React, { useState, useEffect } from 'react';\nimport { Calculator, ExternalLink, Truck, Plane, Loader2, ShoppingBag } from 'lucide-react';\nimport PageLayout from '@/components/PageLayout';\nimport { hapticSelection, openTelegramUrl } from '@/utils/telegramUtils';\nimport { calculateShipping } from '@/services/api/orderService';\nimport { fetchCategories } from '@/services/api/productService';\nimport { Category } from '@/services/api/types';\nimport { toast } from 'sonner';\nimport { useCart } from '@/contexts/CartContext';\n\n// Constants for fallback calculation if API fails\nconst CNY_USD_RATE = 0.14;\nconst USD_RUB_RATE = 90;\nconst COMMISSION_COEFFICIENT = 1700;\n\n// Shipping type coefficients\nconst SHIPPING_TYPE_COEFFICIENTS = {\n  car: 7,\n  plane: 15\n};\n\n// Helper function to capitalize first letter of each word\nconst formatCategoryName = (name: string): string => {\n  return name\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n};\n\nconst DeliveryCalculator: React.FC = () => {\n  const { addPreorderToCart } = useCart();\n  \n  // State for form inputs\n  const [price, setPrice] = useState<string>('');\n  const [itemType, setItemType] = useState<string>('');\n  const [shippingType, setShippingType] = useState<string>('car');\n  const [itemUrl, setItemUrl] = useState<string>('');\n  const [size, setSize] = useState<string>('');\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\n  const [isAddingToCart, setIsAddingToCart] = useState<boolean>(false);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [isLoadingCategories, setIsLoadingCategories] = useState<boolean>(false);\n  \n  // State for validation\n  const [priceError, setPriceError] = useState<string>('');\n  const [urlError, setUrlError] = useState<string>('');\n  \n  // State for calculation result\n  const [totalPrice, setTotalPrice] = useState<number | null>(null);\n  \n  // Fetch categories on component mount\n  useEffect(() => {\n    const loadCategories = async () => {\n      setIsLoadingCategories(true);\n      try {\n        const fetchedCategories = await fetchCategories();\n        setCategories(fetchedCategories);\n        \n        // Set default item type to the first category if available\n        if (fetchedCategories.length > 0) {\n          setItemType(fetchedCategories[0].name);\n        }\n      } catch (error) {\n        console.error('Failed to load categories:', error);\n        toast.error('Failed to load item categories');\n      } finally {\n        setIsLoadingCategories(false);\n      }\n    };\n    \n    loadCategories();\n  }, []);\n  \n  // Calculate price using the API with explicit button click\n  const handleCalculate = async () => {\n    if (!price || priceError) {\n      toast.error('Введите корректную цену для расчёта');\n      return;\n    }\n    \n    if (!itemType) {\n      toast.error('Выберите категорию товара');\n      return;\n    }\n    \n    // Map internal item type to API category_type\n    const apiCategoryType = mapToCategoryType(itemType);\n    if (!apiCategoryType) {\n      toast.error('Неверный тип категории');\n      return;\n    }\n    \n    setIsCalculating(true);\n    \n    try {\n      const priceInCNY = parseInt(price);\n      \n      // Call the API to calculate the shipping cost\n      const shippingCost = await calculateShipping(priceInCNY, shippingType, apiCategoryType);\n      \n      // Set the total price from the API response\n      setTotalPrice(shippingCost);\n    } catch (error: any) {\n      console.error('Error calculating shipping:', error);\n      toast.error(`Ошибка расчёта доставки: ${error.message}`);\n      setTotalPrice(null);\n    } finally {\n      setIsCalculating(false);\n    }\n  };\n  \n  // Simplified version that just lowercases the category\n  const mapToCategoryType = (internalCategory: string): string => {\n    return internalCategory.toLowerCase();\n  };\n  \n  // Validate price input\n  const handlePriceChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    \n    // Allow only numbers\n    if (value && !/^\\d+$/.test(value)) {\n      setPriceError('Введите только цифры');\n      setPrice(value);\n      return;\n    }\n    \n    // Check if price is within allowed range\n    const numValue = parseInt(value);\n    if (value && (numValue <= 0 || numValue >= 1000000)) {\n      setPriceError('Цена должна быть от 1 до 999,999 юаней');\n    } else {\n      setPriceError('');\n    }\n    \n    setPrice(value);\n  };\n  \n  // Validate URL input and extract clean URL if needed\n  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    \n    // Extract the URL if there's pasted text with additional content\n    const extractedUrl = extractDewuUrl(value);\n    const cleanUrl = extractedUrl || value;\n    \n    if (cleanUrl && !isValidUrl(cleanUrl)) {\n      setUrlError('Введите корректную ссылку');\n    } else {\n      setUrlError('');\n    }\n    \n    // If we extracted a URL, use that instead of the original input\n    setItemUrl(extractedUrl || value);\n  };\n  \n  // Extract DEWU URL from pasted text\n  const extractDewuUrl = (text: string): string | null => {\n    // Common DEWU URL patterns\n    const urlPatterns = [\n      /https?:\\/\\/dw4\\.co\\/[^\\s]+/i,\n      /https?:\\/\\/m\\.dewu\\.com\\/[^\\s]+/i,\n      /https?:\\/\\/www\\.dewu\\.com\\/[^\\s]+/i,\n      /https?:\\/\\/dewu\\.com\\/[^\\s]+/i\n    ];\n    \n    // Try each pattern until we find a match\n    for (const pattern of urlPatterns) {\n      const match = text.match(pattern);\n      if (match && match[0]) {\n        console.log('Extracted DEWU URL:', match[0]);\n        return match[0];\n      }\n    }\n    \n    return null;\n  };\n  \n  // Check if string is a valid URL\n  const isValidUrl = (url: string) => {\n    try {\n      new URL(url);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  \n  // Handle item type selection\n  const handleItemTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    hapticSelection();\n    setItemType(e.target.value);\n    // Reset total price when input changes\n    setTotalPrice(null);\n  };\n  \n  // Handle shipping type selection\n  const handleShippingTypeChange = (type: string) => {\n    hapticSelection();\n    setShippingType(type);\n    // Reset total price when input changes\n    setTotalPrice(null);\n  };\n  \n  const handleAddToCart = async () => {\n    if (!itemUrl) {\n      toast.error('Введите ссылку на товар');\n      return;\n    }\n    \n    if (urlError) {\n      toast.error('Введите корректную ссылку на товар');\n      return;\n    }\n    \n    if (!totalPrice) {\n      toast.error('Сначала рассчитайте стоимость');\n      return;\n    }\n    \n    // Map internal item type to API category_type\n    const apiCategoryType = mapToCategoryType(itemType);\n    if (!apiCategoryType) {\n      toast.error('Неверный тип категории');\n      return;\n    }\n    \n    setIsAddingToCart(true);\n    \n    try {\n      // Parse the price from the input\n      const priceInCNY = price ? parseInt(price) : 0;\n      \n      // Convert shipping type to the API expected format\n      const apiShippingType = shippingType === 'car' ? 'cargo' : 'aero';\n      \n      // Add the preorder item to cart\n      addPreorderToCart({\n        dewu_url: itemUrl,\n        size: size || 'Не указан', \n        category_type: apiCategoryType,\n        shipping_type: apiShippingType,\n        price: totalPrice,\n        price_cny: priceInCNY, // Include the price in CNY\n        name: `Предзаказ - ${apiCategoryType === 'обувь' ? 'Обувь' : \n              apiCategoryType === 'одежда' ? 'Одежда' : \n              apiCategoryType === 'аксессуары' ? 'Аксессуары' : \n              itemType} - ${size || 'Размер не указан'}`\n      });\n      \n      toast.success('Предзаказ добавлен в корзину');\n      \n      // Clear form after adding to cart\n      setItemUrl('');\n      setSize('');\n      setTotalPrice(null);\n    } catch (error: any) {\n      console.error('Error adding preorder to cart:', error);\n      toast.error('Ошибка при добавлении предзаказа в корзину');\n    } finally {\n      setIsAddingToCart(false);\n    }\n  };\n  \n  return (\n    <PageLayout>\n      <div className=\"p-4\">\n        <div className=\"flex items-center mb-6\">\n          <Calculator className=\"mr-2 text-telegram-blue\" size={24} />\n          <h1 className=\"text-2xl font-semibold\">Калькулятор доставки</h1>\n        </div>\n        \n        <div className=\"space-y-6\">\n          {/* Price Input */}\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">\n              Цена товара (юани)\n            </label>\n            <input\n              type=\"text\"\n              value={price}\n              onChange={handlePriceChange}\n              placeholder=\"Введите цену в юанях\"\n              className={`w-full p-3 rounded-lg border ${priceError ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} bg-white dark:bg-sidebar-accent`}\n            />\n            {priceError && (\n              <p className=\"text-red-500 text-sm\">{priceError}</p>\n            )}\n            <div className=\"flex items-center text-xs text-telegram-hint\">\n              <button \n                onClick={() => openTelegramUrl(\"https://telegra.ph/Poisk-i-kartochka-tovara-ceny-razmernaya-setka-i-sroki-dostavki-04-11\")}\n                className=\"flex items-center text-telegram-link\"\n              >\n                Как проверить цену? <ExternalLink size={12} className=\"ml-1\" />\n              </button>\n            </div>\n          </div>\n          \n          {/* Item Type Selection */}\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">\n              Категория товара\n            </label>\n            <select\n              value={itemType}\n              onChange={handleItemTypeChange}\n              className=\"w-full p-3 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-sidebar-accent\"\n              disabled={isLoadingCategories}\n            >\n              {isLoadingCategories ? (\n                <option value=\"\">Загрузка категорий...</option>\n              ) : categories.length === 0 ? (\n                <option value=\"\">Нет доступных категорий</option>\n              ) : (\n                categories.map(category => (\n                  <option key={category.id} value={category.name}>\n                    {formatCategoryName(category.name)}\n                  </option>\n                ))\n              )}\n            </select>\n          </div>\n          \n          {/* Shipping Type Selection */}\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">\n              Тип доставки\n            </label>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <button\n                type=\"button\"\n                onClick={() => handleShippingTypeChange('car')}\n                className={`p-3 rounded-lg flex flex-col items-center justify-center ${\n                  shippingType === 'car' \n                    ? 'bg-telegram-blue text-white' \n                    : 'bg-white dark:bg-sidebar-accent border border-gray-300 dark:border-gray-700'\n                }`}\n              >\n                <Truck size={24} className=\"mb-2\" />\n                <span className=\"font-medium\">Автомобиль</span>\n                <span className=\"text-xs mt-1 opacity-80\">21-35 дней</span>\n              </button>\n              \n              <button\n                type=\"button\"\n                onClick={() => handleShippingTypeChange('plane')}\n                className={`p-3 rounded-lg flex flex-col items-center justify-center ${\n                  shippingType === 'plane' \n                    ? 'bg-telegram-blue text-white' \n                    : 'bg-white dark:bg-sidebar-accent border border-gray-300 dark:border-gray-700'\n                }`}\n              >\n                <Plane size={24} className=\"mb-2\" />\n                <span className=\"font-medium\">Самолет</span>\n                <span className=\"text-xs mt-1 opacity-80\">5-10 дней</span>\n              </button>\n            </div>\n          </div>\n          \n          {/* Calculate Button */}\n          <button\n            type=\"button\"\n            onClick={handleCalculate}\n            disabled={isCalculating || !price || !!priceError || !itemType}\n            className=\"w-full bg-green-600 text-white p-4 rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {isCalculating ? (\n              <>\n                <Loader2 className=\"inline-block mr-2 h-4 w-4 animate-spin\" />\n                Идет расчет...\n              </>\n            ) : (\n              'Рассчитать стоимость доставки'\n            )}\n          </button>\n          \n          {/* Calculation Result */}\n          {totalPrice !== null && (\n            <div className=\"mt-8 p-4 bg-telegram-secondary-bg rounded-lg\">\n              <h2 className=\"text-lg font-medium mb-2\">Предварительная стоимость</h2>\n              <div className=\"flex justify-between items-center\">\n                <span>Итоговая цена:</span>\n                <span className=\"text-2xl font-bold text-telegram-blue\">\n                  ₽{totalPrice.toLocaleString()}\n                </span>\n              </div>\n              <div className=\"mt-4 text-xs text-telegram-hint\">\n                <p>Включает стоимость товара, доставки и комиссии</p>\n              </div>\n            </div>\n          )}\n          \n          {/* Item URL Input (Required) */}\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">\n              Ссылка на товар <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              value={itemUrl}\n              onChange={handleUrlChange}\n              placeholder=\"Вставьте ссылку Poizon (DEWU)\"\n              className={`w-full p-3 rounded-lg border ${urlError ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} bg-white dark:bg-sidebar-accent`}\n            />\n            {urlError && (\n              <p className=\"text-red-500 text-sm\">{urlError}</p>\n            )}\n            <div className=\"flex items-center text-xs text-telegram-hint\">\n              <a \n                href=\"https://teletype.in/@poizonshop/link\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"flex items-center text-telegram-link\"\n              >\n                Как получить ссылку? <ExternalLink size={12} className=\"ml-1\" />\n              </a>\n            </div>\n          </div>\n          \n          {/* Size Input (Optional) */}\n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium\">\n              Размер (Необязательно)\n            </label>\n            <input\n              type=\"text\"\n              value={size}\n              onChange={(e) => setSize(e.target.value)}\n              placeholder=\"например, 42, XL и т.д.\"\n              className=\"w-full p-3 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-sidebar-accent\"\n            />\n          </div>\n          \n          {/* Add to Cart Button */}\n          {totalPrice !== null && (\n            <button\n              onClick={handleAddToCart}\n              disabled={isAddingToCart || !itemUrl || !!urlError}\n              className=\"w-full mt-4 bg-telegram-blue text-white py-3 rounded-lg font-medium hover:bg-telegram-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n            >\n              {isAddingToCart ? (\n                <>\n                  <Loader2 className=\"h-5 w-5 animate-spin\" />\n                  Добавление в корзину...\n                </>\n              ) : (\n                <>\n                  <ShoppingBag size={20} />\n                  Добавить в корзину\n                </>\n              )}\n            </button>\n          )}\n        </div>\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default DeliveryCalculator; ","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ChevronLeft, Save, Loader2 } from 'lucide-react';\nimport PageLayout from '@/components/PageLayout';\nimport { useUser } from '@/contexts/UserContext';\nimport { toast } from 'sonner';\nimport { getClientInfo, updateClientInfo } from '@/services/api/clientService';\n\nconst Settings: React.FC = () => {\n  const navigate = useNavigate();\n  const { telegramUser } = useUser();\n  \n  // Form state\n  const [email, setEmail] = useState<string>('');\n  const [phone, setPhone] = useState<string>('');\n  const [address, setAddress] = useState<string>('');\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  \n  // Load user data from API\n  useEffect(() => {\n    const loadClientInfo = async () => {\n      setIsLoading(true);\n      try {\n        const clientInfo = await getClientInfo();\n        if (clientInfo) {\n          setEmail(clientInfo.email || '');\n          setPhone(clientInfo.phone_number || '');\n          setAddress(clientInfo.address || '');\n        }\n      } catch (error) {\n        console.error('Error loading client info:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadClientInfo();\n  }, []);\n  \n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    try {\n      // Email validation\n      if (!email.trim()) {\n        toast.error('Пожалуйста, введите ваш email');\n        setIsSubmitting(false);\n        return;\n      }\n      \n      // Phone validation\n      if (!phone.trim()) {\n        toast.error('Пожалуйста, введите ваш номер телефона');\n        setIsSubmitting(false);\n        return;\n      }\n      \n      // Address validation\n      if (!address.trim()) {\n        toast.error('Пожалуйста, введите ваш адрес');\n        setIsSubmitting(false);\n        return;\n      }\n      \n      // Call the API to update client info\n      const success = await updateClientInfo(phone, email, address);\n      \n      if (success) {\n        // Return to profile page\n        navigate('/profile');\n      }\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      toast.error('Ошибка сохранения настроек. Пожалуйста, попробуйте позже.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  return (\n    <PageLayout>\n      <div className=\"p-4\">\n        <div className=\"flex items-center gap-4 mb-6\">\n          <button \n            onClick={() => navigate('/profile')}\n            className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800\"\n          >\n            <ChevronLeft size={18} />\n          </button>\n          <h1 className=\"text-xl font-semibold\">Settings</h1>\n        </div>\n        \n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"w-8 h-8 animate-spin text-telegram-blue\" />\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-1\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Email Address *\n              </label>\n              <input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-telegram-blue focus:border-telegram-blue dark:bg-gray-800\"\n                placeholder=\"your@email.com\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-1\">\n              <label htmlFor=\"phone\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Phone Number *\n              </label>\n              <input\n                id=\"phone\"\n                type=\"tel\"\n                value={phone}\n                onChange={(e) => setPhone(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-telegram-blue focus:border-telegram-blue dark:bg-gray-800\"\n                placeholder=\"+7 (999) 123-4567\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-1\">\n              <label htmlFor=\"address\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Address *\n              </label>\n              <textarea\n                id=\"address\"\n                value={address}\n                onChange={(e) => setAddress(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-telegram-blue focus:border-telegram-blue dark:bg-gray-800\"\n                placeholder=\"Your full address\"\n                rows={3}\n                required\n              />\n            </div>\n            \n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"w-full flex items-center justify-center gap-2 bg-telegram-blue text-white py-2 px-4 rounded-md hover:bg-telegram-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  Saving...\n                </>\n              ) : (\n                <>\n                  <Save size={16} />\n                  Save Settings\n                </>\n              )}\n            </button>\n          </form>\n        )}\n      </div>\n    </PageLayout>\n  );\n};\n\nexport default Settings; ","import { Toaster } from \"sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { HashRouter, Routes, Route, useLocation, useNavigate } from \"react-router-dom\";\nimport { UserProvider, useUser } from \"./contexts/UserContext\";\nimport { CartProvider } from \"./contexts/CartContext\";\nimport { ThemeProvider } from \"next-themes\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { \n  initTelegramWebApp, \n  getTelegramUser, \n  showBackButton, \n  hideBackButton,\n  syncTelegramTheme,\n  listenForThemeChanges,\n  setThemeClass,\n  setDarkGrayTheme,\n  setTelegramColors,\n  requestTelegramTheme,\n  setupThemeChangeListener\n} from \"./utils/telegramUtils\";\nimport { checkUserExists /*, getUserRank*/ } from \"./services/api\";\nimport { toast } from \"sonner\";\nimport useReferral from \"./hooks/useReferral\";\nimport useRegistration from \"./hooks/useRegistration\";\nimport Home from \"./pages/Home\";\nimport Shop from \"./pages/Shop\";\nimport ProductDetails from \"./pages/ProductDetails\";\nimport Profile from \"./pages/Profile\";\nimport Cart from \"./pages/Cart\";\nimport NotFound from \"./pages/NotFound\";\nimport DeliveryCalculator from \"./pages/DeliveryCalculator\";\nimport Settings from \"./pages/Settings\";\n\n// Create a simple mock for useTelegram if the actual module is not available\nconst useTelegram = () => {\n  return {\n    tg: window.Telegram?.WebApp,\n    initWebApp: () => {\n      console.log(\"Mock initWebApp called\");\n      if (window.Telegram?.WebApp) {\n        // Use type assertion to avoid TypeScript errors\n        (window.Telegram.WebApp as any).ready?.();\n      }\n    },\n    getUserData: () => {\n      console.log(\"Mock getUserData called\");\n      if (window.Telegram?.WebApp?.initDataUnsafe?.user) {\n        return window.Telegram.WebApp.initDataUnsafe.user;\n      }\n      \n      // Try to get from localStorage as fallback\n      try {\n        const storedUser = localStorage.getItem('telegramUser');\n        if (storedUser) {\n          return JSON.parse(storedUser);\n        }\n      } catch (e) {\n        console.error(\"Error retrieving user data from localStorage:\", e);\n      }\n      \n      return null;\n    }\n  };\n};\n\n// Create a persistent query client with optimized settings\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      retry: 2,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      gcTime: 10 * 60 * 1000, // 10 minutes (garbage collection time, formerly cacheTime)\n    },\n  },\n});\n\n// Component to initialize Telegram WebApp\nconst TelegramInitializer = ({ children }: { children: React.ReactNode }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { updateTelegramUser } = useUser();\n  const [initialized, setInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Import the useTelegram hook\n  const { tg, initWebApp, getUserData } = useTelegram();\n  \n  // Initialize the referral system\n  const { referralCode, isProcessing: isProcessingReferral } = useReferral();\n  \n  // Check user registration status\n  const { isNewUser } = useRegistration({\n    onNewUser: (isNew) => {\n      if (isNew && referralCode) {\n        console.log(`New user registered with referral code: ${referralCode}`);\n        toast.success('Добро пожаловать! Вас пригласил друг.');\n      }\n    }\n  });\n\n  // Setup theme change listener for instant theme updates\n  useEffect(() => {\n    // Setup the theme change listener\n    const cleanupThemeListener = setupThemeChangeListener();\n    \n    // Clean up when component unmounts\n    return () => {\n      cleanupThemeListener();\n    };\n  }, []);\n\n  // Check user existence in the API\n  const checkUserInAPI = useCallback(async () => {\n    try {\n      const userExists = await checkUserExists();\n      console.log(\"API user check result:\", userExists);\n      \n      if (userExists) {\n        // If user exists, also get their rank\n        // const rank = await getUserRank();\n        // console.log(\"User rank:\", rank);\n      } else {\n        console.log(\"User does not exist in the system yet\");\n      }\n    } catch (error) {\n      console.error(\"Error checking user in API:\", error);\n    }\n  }, []);\n\n  // Handle navigation to valid routes\n  const handleNavigation = useCallback(() => {\n    const validRoutes = [\"/\", \"/shop\", \"/profile\", \"/cart\", \"/calculator\", \"/settings\"];\n    const isProductRoute = location.pathname.startsWith(\"/product/\");\n    \n    // Check if the path contains Telegram WebApp data\n    const isTelegramWebAppDataPath = location.pathname.includes(\"tgWebAppData=\") || \n                                    location.search.includes(\"tgWebAppData=\");\n    \n    if (isTelegramWebAppDataPath) {\n      console.log(\"Detected Telegram WebApp data in URL, redirecting to home and preserving data\");\n      // Don't navigate away, we'll handle the data in initializeTelegram\n      return true;\n    }\n    \n    if (!validRoutes.includes(location.pathname) && !isProductRoute) {\n      console.log(\"Redirecting to home from invalid path:\", location.pathname);\n      navigate(\"/\", { replace: true });\n      return false;\n    }\n    return true;\n  }, [location.pathname, location.search, navigate]);\n\n  // Initialize Telegram WebApp\n  const initializeTelegram = useCallback(async () => {\n    if (initialized) return;\n    \n    // Check if navigation is needed first\n    if (!handleNavigation()) return;\n    \n    console.log(\"Initializing Telegram interface...\");\n    \n    // Check if we're in Telegram\n    const isTelegramBrowser = navigator.userAgent.toLowerCase().includes('telegram') || \n                             window.location.href.includes('tgwebapp');\n    \n    if (isTelegramBrowser) {\n      console.log(\"Running in Telegram browser\");\n    } else {\n      console.log(\"Not running in Telegram browser\");\n    }\n    \n    // Check if we have tgWebAppData in the URL\n    const hasTgWebAppData = window.location.href.includes('tgWebAppData=');\n    if (hasTgWebAppData) {\n      console.log(\"Found tgWebAppData in URL, this is a direct launch from Telegram\");\n    }\n    \n    try {\n      // CRITICAL: Initialize the WebApp FIRST using the direct method\n      if (tg) {\n        // Initialize using the useTelegram hook\n        initWebApp();\n        \n        // Apply Telegram colors based on user's theme\n        setTelegramColors();\n        \n        // Request the current theme to ensure we have the latest\n        requestTelegramTheme();\n        \n        // Wait a moment for Telegram to initialize\n        // This is important for Mini Apps to receive initData\n        await new Promise(resolve => setTimeout(resolve, 300));\n        \n        // Try to get user data using the useTelegram hook\n        const userData = getUserData();\n        \n        if (userData) {\n          console.log(\"User data retrieved:\", userData);\n          updateTelegramUser(userData);\n          \n          // Check if user exists in the API system\n          await checkUserInAPI();\n          \n          // If we have tgWebAppData in the URL, navigate to home to clean up the URL\n          if (hasTgWebAppData && location.pathname !== '/') {\n            console.log(\"Navigating to home to clean up URL\");\n            navigate('/', { replace: true });\n          }\n          \n          setInitialized(true);\n          setIsLoading(false);\n        } else if (isTelegramBrowser) {\n          console.log(\"No user data available despite being in Telegram browser\");\n          \n          // Try one more time after a delay\n          // This is sometimes necessary as Telegram might not provide the data immediately\n          setTimeout(() => {\n            const retryUserData = getUserData();\n            if (retryUserData) {\n              console.log(\"User data retrieved after delay:\", retryUserData);\n              updateTelegramUser(retryUserData);\n              \n              // If we have tgWebAppData in the URL, navigate to home to clean up the URL\n              if (hasTgWebAppData && location.pathname !== '/') {\n                console.log(\"Navigating to home to clean up URL\");\n                navigate('/', { replace: true });\n              }\n            } else {\n              console.log(\"Still no user data after retry. This might indicate:\");\n              console.log(\"1. The Mini App is not properly configured in BotFather\");\n              console.log(\"2. The user is not using the official Telegram app\");\n              console.log(\"3. There's an issue with the initData validation\");\n              \n              // Try to use localStorage as a last resort\n              try {\n                const storedUser = localStorage.getItem('telegramUser');\n                if (storedUser) {\n                  const parsedUser = JSON.parse(storedUser);\n                  console.log(\"Using stored user data from localStorage:\", parsedUser);\n                  updateTelegramUser(parsedUser);\n                }\n              } catch (e) {\n                console.error(\"Error retrieving user data from localStorage:\", e);\n              }\n            }\n            setInitialized(true); // Mark as initialized anyway to prevent further attempts\n            setIsLoading(false);\n          }, 800);\n        } else {\n          console.log(\"Not in Telegram browser, continuing without user data\");\n          setInitialized(true);\n          setIsLoading(false);\n        }\n      } else {\n        // Fallback to the old method if tg is not available\n        console.log(\"Telegram WebApp is not available, using fallback method\");\n        initTelegramWebApp();\n        \n        // Apply Telegram colors based on user's theme\n        setTelegramColors();\n        \n        // Wait a moment for Telegram to initialize\n        await new Promise(resolve => setTimeout(resolve, 300));\n        \n        // Try to get user data using the old method\n        const userData = getTelegramUser();\n        \n        if (userData) {\n          console.log(\"User data retrieved using fallback method:\", userData);\n          updateTelegramUser(userData);\n        }\n        \n        setInitialized(true);\n        setIsLoading(false);\n      }\n    } catch (error) {\n      console.error(\"Error during Telegram initialization:\", error);\n      setInitialized(true); // Mark as initialized to prevent further attempts\n      setIsLoading(false);\n    }\n  }, [initialized, handleNavigation, updateTelegramUser, navigate, location.pathname, tg, initWebApp, getUserData]);\n\n  // Handle back button functionality\n  useEffect(() => {\n    // Only show back button if not on home page\n    if (location.pathname !== '/') {\n      console.log(\"Showing back button for path:\", location.pathname);\n      showBackButton(() => {\n        console.log(\"Back button pressed, navigating back\");\n        navigate(-1); // Go back to previous page\n      });\n    } else {\n      console.log(\"Hiding back button for home page\");\n      hideBackButton();\n    }\n    \n    // Clean up when component unmounts\n    return () => {\n      hideBackButton();\n    };\n  }, [location.pathname, navigate]);\n\n  // Listen for theme changes\n  useEffect(() => {\n    console.log(\"Setting up theme change listener\");\n    \n    // Request the theme from Telegram\n    requestTelegramTheme();\n    \n    // Apply Telegram colors based on user's theme\n    setTelegramColors();\n    \n    // Set up listener that will adapt to theme changes\n    const themeChangeHandler = () => {\n      console.log(\"Theme change detected, adapting to user theme\");\n      setTelegramColors();\n    };\n    \n    // Add event listener for theme changes\n    window.addEventListener('themechange', themeChangeHandler);\n    \n    // Return cleanup function\n    return () => {\n      window.removeEventListener('themechange', themeChangeHandler);\n    };\n  }, []);\n\n  useEffect(() => {\n    initializeTelegram().finally(() => {\n      // Set loading to false after initialization completes (success or failure)\n      setIsLoading(false);\n    });\n  }, [initializeTelegram]);\n\n  // Handle route changes\n  useEffect(() => {\n    handleNavigation();\n  }, [location.pathname, handleNavigation]);\n\n  // Show nothing while loading to prevent 404 page flash\n  if (isLoading) {\n    return <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-telegram-blue\"></div>\n    </div>;\n  }\n\n  return children;\n};\n\n// Main App component\nconst App = () => {\n  // Ensure we're using HashRouter for GitHub Pages compatibility\n  return (\n    <ThemeProvider defaultTheme=\"dark\" attribute=\"class\">\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <UserProvider>\n            <CartProvider>\n              <Toaster richColors closeButton position=\"top-center\" />\n              <HashRouter>\n                <TelegramInitializer>\n                  <Routes>\n                    <Route path=\"/\" element={<Home />} />\n                    <Route path=\"/shop\" element={<Shop />} />\n                    <Route path=\"/product/:productId\" element={<ProductDetails />} />\n                    <Route path=\"/profile\" element={<Profile />} />\n                    <Route path=\"/cart\" element={<Cart />} />\n                    <Route path=\"/calculator\" element={<DeliveryCalculator />} />\n                    <Route path=\"/settings\" element={<Settings />} />\n                    <Route path=\"*\" element={<NotFound />} />\n                  </Routes>\n                </TelegramInitializer>\n              </HashRouter>\n            </CartProvider>\n          </UserProvider>\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\nimport { TelegramProvider } from './contexts/TelegramContext'\nimport { setTelegramColors, requestTelegramTheme } from './utils/telegramUtils'\nimport { toast } from 'sonner'\n\n// Declare global toast property\ndeclare global {\n  interface Window {\n    toast: typeof toast;\n  }\n}\n\n// Apply theme immediately before rendering\nrequestTelegramTheme();\nsetTelegramColors();\n\n// Listen for Telegram events after page loads\nwindow.addEventListener('load', () => {\n  // Sync colors with Telegram theme\n  setTelegramColors();\n  \n  // Request current theme from Telegram\n  setTimeout(() => {\n    requestTelegramTheme();\n  }, 1000);\n});\n\n// Make toast globally available\nwindow.toast = toast;\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <TelegramProvider>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </TelegramProvider>\n);\n"],"file":"assets/main-C4wbMIHD.js"}